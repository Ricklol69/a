--[ VARIABLES

setfpscap(99999);

values = values or {}
values.enabled = values.enabled or {}

values.enabled["noScreenEffects"] = value

values.enabled["megaBullets"] = value

local jesusFolder = workspace:FindFirstChild("JesusFolder") or Instance.new("Folder", workspace); jesusFolder.Name = "JesusFolder"
values.enabled["jesus"] = value


if not isfile("chaos.win") then
    makefolder("chaos.win")
end





local workspace = game.Workspace
local players = game:GetService("Players")
local LC = players.LocalPlayer
local mouse = LC:GetMouse()
local camera = workspace.CurrentCamera
local lighting = game:GetService("Lighting")
local rp = game:GetService("ReplicatedStorage")
local rs = game:GetService("RunService")
local cg = game.CoreGui
local uis = game:GetService("UserInputService")
local mainFolder = cg:FindFirstChild("BBCFolder") or Instance.new("Folder", cg); mainFolder.Name = "BBCFolder"
local sg = mainFolder:FindFirstChild("BBCsc") or Instance.new("ScreenGui", mainFolder); sg.Name = "BBCsc"; sg.IgnoreGuiInset = true ;sg.ResetOnSpawn = false
local loopsEnabled = true
local defaultColor = Color3.fromRGB(255,255,255)
local realAmmoTypes = rp:FindFirstChild("realAmmoTypes") or rp:FindFirstChild("AmmoTypes") and rp:FindFirstChild("AmmoTypes"):Clone(); if realAmmoTypes then realAmmoTypes.Name = "realAmmoTypes" end
local fovCircle
--]

--[ TABLES
local values = {
	color = {
		playerEsp = Color3.fromRGB(255,255,255),
		playerEspOutline = Color3.fromRGB(255,255,255),
		playerNameTag = Color3.fromRGB(255,255,255),
		playerBox = Color3.fromRGB(255,255,255),
		playerBoxOutline = Color3.fromRGB(255,255,255),
		playerHealthTag = Color3.fromRGB(0,255,0),
		playerDistanceTag = Color3.fromRGB(255,255,255),
		npcEsp = Color3.fromRGB(255,255,255),
		npcNameTag = Color3.fromRGB(255,255,255),
		npcBox = Color3.fromRGB(255,255,255),
		npcBoxOutline = Color3.fromRGB(255,255,255),
		npcHealthTag = Color3.fromRGB(255,255,255),
		npcDistanceTag = Color3.fromRGB(255,255,255),
		vehicleEsp = Color3.fromRGB(255,255,255),
		vehicleNameTag = Color3.fromRGB(255,255,255),
		containerEsp = Color3.fromRGB(255,255,255),
		containerNameTag = Color3.fromRGB(255,255,255),
		corpseNameTag = Color3.fromRGB(255,255,255),
		droppedItemNameTag = Color3.fromRGB(255,255,255),
		viewmodel = Color3.fromRGB(255,255,255),
		crosshair = Color3.fromRGB(255,255,255),
		aimFov = Color3.fromRGB(255,255,255),
	},
	transparency = {
		playerEsp = 0.70,
		npcEsp = 0.70,
		vehicleEsp = 0.70,
		containerEsp = 0.70,
		viewmodel = 0.70,
	},
	enabled = {
		playerEsp = false,
		playerNameTag = false,
		playerDistanceTag = false,
		playerBox = false,
		playerHealthTag = false,
		npcEsp = false,
		npcNameTag = false,
		npcDistanceTag = false,
		npcBox = false,
		npcHealthTag = false,
		vehicleEsp = false,
		vehicleNameTag = false,
		containerEsp = false,
		containerNameTag = false,
		corpseNameTag = false,
		droppedItemNameTag = false,
		customViewmodel = false,
		skinChanger = false,
		crosshair = false,
		fullbright = false,
		removefog = false,
		removefoliage = false,
		inventoryChecker = false,
		noScreenEffects = false,
		aim = false,
		aimCheckVisible = false,
		aimFov = false,
		megaBullets = false,
		jesus = false,
		helicopter = false,
		tpWalk = false,
	},
	distance = {
		player = 1000,
		npc = 1000,
		vehicle = 1000,
		container = 1000,
		corpse = 1000,
		droppedItem = 1000,
	},
	tagSize = {
		player = 10,
		npc = 10,
		vehicle = 10,
		container = 10,
		corpse = 10,
		droppedItem = 10,
	},
	radius = {
		aim = 100,
		inventoryChecker = 100,
	},
	misc = {
		tagsFont = 1,
		viewmodelMaterial = Enum.Material.Plastic,
		crosshairType = "Dot",
		aimPrediction = 1,
		aimDistanceFactor = 2000,
		fovChange = 60,
		fov = 90,
		aimMode = "Magnet",
		tpWalkSpeed = 1,
	}
}

local skins = {
	["762x25MAG"] = "Nutcracker",
	["762x25Rnd71Mag"] = "Arctic",
	["762x25TTMAG"] = "Watergun",
	["762x39MAG"] = "DeltaAnime",
	["762x39Rnd75Mag"] = "Anton",
	["762x54Rnd10Mag"] = "Permafrost",
	["9x18vzMag"] = "GiftWrap",
	["9x19MP443MAG"] = "JollyRoger",
	["9x19MP5MAG"] = "Permafrost",
	["9x39Mag"] = "Shoreline",
	AKMN = "DeltaAnime",
	FrontAKMN = "DeltaAnime",
	HandleRK3AKMN = "DeltaAnime",
	PolymerStockAKMN = "DeltaAnime",
	HandleAKMN = "Valentine",
	TacticalFrontAKMN = "AnodizedRed",
	MuzzleBrakeAKM = "AnodizedRed",
	CombatGloves = "Anarchy",
	CamoShirt = "Anarchy",
	HandWraps = "SantaCommando",
	WastelandShirt = "SantaCommando",
	M4 = "Devil",
	Lighter = "EarlyAccess",
	GorkaShirt = "Wetsuit",
	GhillieTorso = "Arctic",
	AsVal = "Shoreline",
	F1 = "Pineapple",
	Makarov = "Serpant",
	Mosin = "SkullHunter",
	PPSH41 = "Nutcracker",
	SVD = "Permafrost",
	Saiga12 = "Valentine",
	TT33 = "Watergun",
	ZSh = "Woodland",
	MP5SD  = "Permafrost",
	MP443 = "Whiteout",
	IZh81 = "Watergun",
}

local createdThings = {}
local toggles = {}
local createdElements = {} --for choice settings drop
local toToggle = {} --for disable toggles by keybind

local modelElements = {
	player = {},
	npc = {},
	vehicle = {},
	container = {},
	corpse = {},
	droppedItem = {}
}
--]

--[ FUNCTIONS
local function checkDistance(pos1, pos2, max)
	local distance = (pos1 - pos2).Magnitude
	return distance <= max
end

local function getEspElements(instance, kind)
	if not modelElements[kind][instance] then
		modelElements[kind][instance] = {
			boxes = {},
			boxOutlines = {},
			healthTags = {},
			nameTags = {},
			distanceTags = {}
		}
	end
	return modelElements[kind][instance]
end

local function addHighlight(model, fillcolor, outlinecolor, transparency)
	if model and model.PrimaryPart then
		local Highlight = Instance.new("Highlight", model)
		Highlight.FillColor = fillcolor
		Highlight.OutlineColor = outlinecolor
		Highlight.FillTransparency = transparency
		Highlight.Name = model.Name.."Highlight"
		table.insert(createdThings, Highlight)
	end
end

local function addBox(part, parent, color, transparency, index)
	if part and parent then
		local Box = Instance.new("BoxHandleAdornment", parent)
		Box.Name = part.Name.."Box"..(index or "")
		Box.Color3 = color
		Box.Adornee = part
		Box.Size = part.Size
		Box.ZIndex = 0
		Box.AlwaysOnTop = true
		Box.Transparency = transparency or 0.7
		table.insert(createdThings, Box)
	end
end

local function addFrameBox(instance, kind)
	if not instance or not instance:IsA("Model") then warn("Instance is nil or not model") return end
	local elements = getEspElements(instance, kind)
	local box = Drawing.new('Square')
	local boxOutline = Drawing.new('Square')
	box.Transparency = 1
	box.Thickness = 2
	box.Filled = false
	box.Color = values.color[kind.."Box"] or defaultColor
	boxOutline.Transparency = 1
	boxOutline.Thickness = 1
	boxOutline.Filled = false
	boxOutline.Color = values.color[kind.."BoxOutline"] or defaultColor
	table.insert(elements.boxes, box)
	table.insert(elements.boxOutlines, boxOutline)
end

local function addHealthTag(instance, kind)
	if not instance or not instance:IsA("Model") then warn("Instance is nil or not model") return end
	if instance:FindFirstChildWhichIsA("Humanoid") then
		local humanoid = instance:FindFirstChildWhichIsA("Humanoid")
		local elements = getEspElements(instance, kind)
		local healthTag = Drawing.new('Text')
		healthTag.Transparency = 1
		healthTag.Font = values.misc["tagsFont"]
		healthTag.Size = values.tagSize[kind] or 15
		healthTag.Center = true
		healthTag.Outline = true
		healthTag.Color = values.color[kind.."HealthTag"] or defaultColor
		healthTag.Text = humanoid.Health
		table.insert(elements.healthTags, healthTag)
	end
end

local function addNameTag(instance, kind)
	if not instance or not instance:IsA("Model") then warn("Instance is nil or not model") return end
	local elements = getEspElements(instance, kind)
	local nameTag = Drawing.new('Text')
	nameTag.Transparency = 1
	nameTag.Font = values.misc["tagsFont"]
	nameTag.Size = values.tagSize[kind] or 15
	nameTag.Center = true
	nameTag.Outline = true
	nameTag.Color = values.color[kind.."NameTag"] or defaultColor
	nameTag.Text = kind == "vehicle" and instance.Parent.Name or instance.Name
	if kind == "droppedItem" then
		if instance.Parent and instance:FindFirstChild("ItemProperties") then
			local amount = instance.ItemProperties:GetAttribute("Amount")
			nameTag.Text = amount and instance.Name.."["..amount.."]" or instance.Name
		end
	end
	table.insert(elements.nameTags, nameTag)
end

local function addDistanceTag(instance, kind)
	if not instance or not instance:IsA("Model") then warn("Instance is nil or not model") return end
	local elements = getEspElements(instance, kind)
	local distanceTag = Drawing.new('Text')
	distanceTag.Transparency = 1
	distanceTag.Size = values.tagSize[kind] or 15
	distanceTag.Font = values.misc["tagsFont"]
	distanceTag.Center = true
	distanceTag.Outline = true
	distanceTag.Color = values.color[kind.."DistanceTag"] or defaultColor
	distanceTag.Text = instance.Name
	table.insert(elements.distanceTags, distanceTag)
end

local function getInvChekerFrame()
	local BackgroundColor = Color3.fromRGB(70,70,70)
	local BorderColor = Color3.fromRGB(255, 255, 255)
	local TextColor = Color3.fromRGB(255, 255, 255)
	for i,v in pairs(Flags) do	
		if i == "__Designer.Colors.elementText" then
			TextColor = v
		elseif i == "__Designer.Colors.innerBorder" then
			BorderColor = v
		elseif i == "__Designer.Colors.background" then
			BackgroundColor = v
		end
	end
	local MainFrame = sg:FindFirstChild("InventoryCheckerFrame") or Instance.new("Frame", sg); MainFrame.Name = "InventoryCheckerFrame"
	MainFrame.BackgroundColor3 = BackgroundColor
	MainFrame.BackgroundTransparency = 0.10
	MainFrame.AnchorPoint = Vector2.new(0.5,0.5)
	MainFrame.BorderColor3 = BorderColor
	MainFrame.BorderSizePixel = 1
	MainFrame.Position = UDim2.fromScale(0.5, 0.15)
	MainFrame.Size = UDim2.fromScale(0.575, 0.18)


	local GridHolder = MainFrame:FindFirstChild("GridHolder") or Instance.new("Frame", MainFrame); GridHolder.Name = "GridHolder"
	local GridLayout = GridHolder:FindFirstChild("UIGridLayout") or Instance.new("UIGridLayout", GridHolder);
	GridHolder.Size = UDim2.fromScale(1,1)
	GridHolder.BackgroundTransparency = 1
	GridLayout.CellSize = UDim2.fromScale(0.083, 0.5)
	GridLayout.FillDirectionMaxCells = 12
	GridLayout.CellPadding = UDim2.new(0,0,0,0)

	local TextHolder = MainFrame:FindFirstChild("TextHolder") or Instance.new("Frame", MainFrame); TextHolder.Name = "TextHolder"
	local TextLabel = TextHolder:FindFirstChild("TextLabel") or Instance.new("TextLabel", TextHolder)
	TextLabel.BackgroundTransparency = 1
	TextLabel.Size = UDim2.fromScale(1,1)
	TextLabel.FontFace = Font.fromName("RobotoMono", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
	TextLabel.TextScaled = true
	TextLabel.TextColor3 = TextColor
	TextHolder.BackgroundColor3 = BackgroundColor
	TextHolder.BackgroundTransparency = 0.1
	TextHolder.BorderColor3 = BorderColor
	TextHolder.BorderSizePixel = 1
	TextHolder.Position = UDim2.fromScale(0,-0.157)
	TextHolder.Size = UDim2.fromScale(1, 0.15)
	if not table.find(createdThings, MainFrame) then
		table.insert(createdThings, MainFrame)
	end
	return MainFrame, GridHolder, TextLabel
end

local function removeDrawings(elements, elementType)
	for i = #elements[elementType], 1, -1 do
		local d = elements[elementType][i]
		if tostring(d) == "Drawing" then
			d:Remove()
			table.remove(elements[elementType], i)
		elseif typeof(d) == "table" then
			for b,c in pairs(d) do
				if tostring(c) == "Drawing" then
					c:Remove()
				end
			end
		end
	end
end

local function setIfDifferent(currentValue, newValue, setValueFunction)
	if currentValue ~= newValue then
		setValueFunction(newValue)
	end
end
--]






local inputService   = game:GetService("UserInputService")
local runService     = game:GetService("RunService")
local tweenService   = game:GetService("TweenService")
local players        = game:GetService("Players")
local localPlayer    = players.LocalPlayer
local mouse          = localPlayer:GetMouse()

local menu           = game:GetObjects("rbxassetid://12702460854")[1]
menu.bg.Position     = UDim2.new(0.5,-menu.bg.Size.X.Offset/2,0.5,-menu.bg.Size.Y.Offset/2)
menu.Parent          = game:GetService("CoreGui")
menu.bg.pre.Text = '                                    chaos<font color="#c375ae">.cc</font> | <font color="#c375ae">Project </font>Delta'
local library = {cheatname = "";ext = "";gamename = "";colorpicking = false;tabbuttons = {};tabs = {};options = {};flags = {};scrolling = true;notifyText = Drawing.new("Text");playing = false;multiZindex = 200;toInvis = {};libColor = Color3.fromRGB(240, 142, 214);disabledcolor = Color3.fromRGB(233, 0, 0);blacklisted = {Enum.KeyCode.W,Enum.KeyCode.A,Enum.KeyCode.S,Enum.KeyCode.D,Enum.UserInputType.MouseMovement}}

function draggable(a)local b=inputService;local c;local d;local e;local f;local function g(h)if not library.colorpicking then local i=h.Position-e;a.Position=UDim2.new(f.X.Scale,f.X.Offset+i.X,f.Y.Scale,f.Y.Offset+i.Y)end end;a.InputBegan:Connect(function(h)if h.UserInputType==Enum.UserInputType.MouseButton1 or h.UserInputType==Enum.UserInputType.Touch then c=true;e=h.Position;f=a.Position;h.Changed:Connect(function()if h.UserInputState==Enum.UserInputState.End then c=false end end)end end)a.InputChanged:Connect(function(h)if h.UserInputType==Enum.UserInputType.MouseMovement or h.UserInputType==Enum.UserInputType.Touch then d=h end end)b.InputChanged:Connect(function(h)if h==d and c then g(h)end end)end
draggable(menu.bg)

local tabholder = menu.bg.bg.bg.bg.main.group
local tabviewer = menu.bg.bg.bg.bg.tabbuttons



inputService.InputEnded:Connect(function(key)
    if key.KeyCode == Enum.KeyCode.RightShift then
        menu.Enabled = not menu.Enabled
        library.scrolling = false
        library.colorpicking = false
        for i,v in next, library.toInvis do
            v.Visible = false
        end
    end
end)

local keyNames = {
    [Enum.KeyCode.LeftAlt] = 'LALT';
    [Enum.KeyCode.RightAlt] = 'RALT';
    [Enum.KeyCode.LeftControl] = 'LCTRL';
    [Enum.KeyCode.RightControl] = 'RCTRL';
    [Enum.KeyCode.LeftShift] = 'LSHIFT';
    [Enum.KeyCode.RightShift] = 'RSHIFT';
    [Enum.KeyCode.Underscore] = '_';
    [Enum.KeyCode.Minus] = '-';
    [Enum.KeyCode.Plus] = '+';
    [Enum.KeyCode.Period] = '.';
    [Enum.KeyCode.Slash] = '/';
    [Enum.KeyCode.BackSlash] = '\\';
    [Enum.KeyCode.Question] = '?';
    [Enum.UserInputType.MouseButton1] = 'MB1';
    [Enum.UserInputType.MouseButton2] = 'MB2';
    [Enum.UserInputType.MouseButton3] = 'MB3';
}

library.notifyText.Font = 2
library.notifyText.Size = 13
library.notifyText.Outline = true
library.notifyText.Color = Color3.new(1,1,1)
library.notifyText.Position = Vector2.new(10,60)

function library:Tween(...)
    tweenService:Create(...):Play()
end

function library:notify(text)
    if playing then return end
    playing = true
    library.notifyText.Text = text
    library.notifyText.Transparency = 0
    library.notifyText.Visible = true
    for i = 0,1,0.1 do wait()
        library.notifyText.Transparency = i
    end
    spawn(function()
        wait(3)
        for i = 1,0,-0.1 do wait()
            library.notifyText.Transparency = i
        end
        playing = false
        library.notifyText.Visible = false
    end)
end

function library:addTab(name)
    local newTab = tabholder.tab:Clone()
    local newButton = tabviewer.button:Clone()

    table.insert(library.tabs,newTab)
    newTab.Parent = tabholder
    newTab.Visible = false

    table.insert(library.tabbuttons,newButton)
    newButton.Parent = tabviewer
    newButton.Modal = true
    newButton.Visible = true
    newButton.text.Text = name
    newButton.MouseButton1Click:Connect(function()
        for i,v in next, library.tabs do
            v.Visible = v == newTab
        end
        for i,v in next, library.toInvis do
            v.Visible = false
        end
        for i,v in next, library.tabbuttons do
            local state = v == newButton
            if state then
                v.element.Visible = true
                library:Tween(v.element, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0.000})
                v.text.TextColor3 = Color3.fromRGB(244, 244, 244)
            else
                library:Tween(v.element, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1.000})
                v.text.TextColor3 = Color3.fromRGB(144, 144, 144)
            end
        end
    end)

    local tab = {}
    local groupCount = 0
    local jigCount = 0
    local topStuff = 2000
  
    function tab:createGroup(pos,groupname) -- newTab[pos == 0 and "left" or "right"] 
        local groupbox = Instance.new("Frame")
        local grouper = Instance.new("Frame")
        local UIListLayout = Instance.new("UIListLayout")
        local UIPadding = Instance.new("UIPadding")
        local element = Instance.new("Frame")
        local title = Instance.new("TextLabel")
        local backframe = Instance.new("Frame")

        groupCount -= 1

        groupbox.Parent = newTab[pos]
        groupbox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        groupbox.BorderColor3 = Color3.fromRGB(30, 30, 30)
        groupbox.BorderSizePixel = 2
        groupbox.Size = UDim2.new(0, 211, 0, 8)
        groupbox.ZIndex = groupCount

        grouper.Parent = groupbox
        grouper.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
        grouper.BorderColor3 = Color3.fromRGB(0, 0, 0)
        grouper.Size = UDim2.new(1, 0, 1, 0)

        UIListLayout.Parent = grouper
        UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

        UIPadding.Parent = grouper
        UIPadding.PaddingBottom = UDim.new(0, 4)
        UIPadding.PaddingTop = UDim.new(0, 7)

        element.Name = "element"
        element.Parent = groupbox
        element.BackgroundColor3 = library.libColor
        element.BorderSizePixel = 0
        element.Size = UDim2.new(1, 0, 0, 1)

        title.Parent = groupbox
        title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        title.BackgroundTransparency = 1.000
        title.BorderSizePixel = 0
        title.Position = UDim2.new(0, 17, 0, 0)
        title.ZIndex = 2
        title.Font = Enum.Font.Code
        title.Text = groupname or ""
        title.TextColor3 = Color3.fromRGB(255, 255, 255)
        title.TextSize = 13.000
        title.TextStrokeTransparency = 0.000
        title.TextXAlignment = Enum.TextXAlignment.Left

        backframe.Parent = groupbox
        backframe.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
        backframe.BorderSizePixel = 0
        backframe.Position = UDim2.new(0, 10, 0, -2)
        backframe.Size = UDim2.new(0, 13 + title.TextBounds.X, 0, 3)

        local group = {}
        function group:addToggle(args)
            if not args.flag and args.text then args.flag = args.text end
            if not args.flag then return warn("⚠️ incorrect arguments ⚠️ - missing args on recent toggle") end
            groupbox.Size += UDim2.new(0, 0, 0, 20)

            local toggleframe = Instance.new("Frame")
            local tobble = Instance.new("Frame")
            local mid = Instance.new("Frame")
            local front = Instance.new("Frame")
            local text = Instance.new("TextLabel")
            local button = Instance.new("TextButton")

            jigCount -= 1
            library.multiZindex -= 1

            toggleframe.Name = "toggleframe"
            toggleframe.Parent = grouper
            toggleframe.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            toggleframe.BackgroundTransparency = 1.000
            toggleframe.BorderSizePixel = 0
            toggleframe.Size = UDim2.new(1, 0, 0, 20)
            toggleframe.ZIndex = library.multiZindex
            
            tobble.Name = "tobble"
            tobble.Parent = toggleframe
            tobble.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            tobble.BorderColor3 = Color3.fromRGB(0, 0, 0)
            tobble.BorderSizePixel = 3
                        tobble.Position = UDim2.new(0.0299999993, 0, 0.272000015, 0)

            tobble.Size = UDim2.new(0, 10, 0, 10)
            
            mid.Name = "mid"
            mid.Parent = tobble
            mid.BackgroundColor3 = Color3.fromRGB(69, 23, 255)
            mid.BorderColor3 = Color3.fromRGB(30,30,30)
            mid.BorderSizePixel = 2
            mid.Size = UDim2.new(0, 10, 0, 10)
            
            front.Name = "front"
            front.Parent = mid
            front.BackgroundColor3 = Color3.fromRGB(15,15,15)
            front.BorderColor3 = Color3.fromRGB(0, 0, 0)
            front.Size = UDim2.new(0, 10, 0, 10)
            
            text.Name = "text"
            text.Parent = toggleframe
            text.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
            text.BackgroundTransparency = 1.000
            text.Position = UDim2.new(0, 22, 0, 0)
            text.Size = UDim2.new(0, 0, 1, 2)
            text.Font = Enum.Font.Code
            text.Text = args.text or args.flag
            text.TextColor3 = Color3.fromRGB(155, 155, 155)
            text.TextSize = 13.000
            text.TextStrokeTransparency = 0.000
            text.TextXAlignment = Enum.TextXAlignment.Left
            
            button.Name = "button"
            button.Parent = toggleframe
            button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

            button.BackgroundTransparency = 1.000
            button.BorderSizePixel = 0
            button.Size = UDim2.new(0, 101, 1, 0)
            button.Font = Enum.Font.SourceSans
            button.Text = ""
            button.TextColor3 = Color3.fromRGB(0, 0, 0)
            button.TextSize = 14.000

            if args.disabled then
                button.Visible = false
                text.TextColor3 = library.disabledcolor
                text.Text = args.text
            return end

            local state = false
            function toggle(newState)
                state = newState
                library.flags[args.flag] = state
                front.BackgroundColor3 = state and library.libColor or Color3.fromRGB(15,15,15)
                text.TextColor3 = state and Color3.fromRGB(244, 244, 244) or Color3.fromRGB(144, 144, 144)
                if args.callback then
                    args.callback(state)
                end
            end
            button.MouseButton1Click:Connect(function()
                state = not state
                front.Name = state and "accent" or "back"
                library.flags[args.flag] = state
                mid.BorderColor3 = Color3.fromRGB(30,30,30)
                front.BackgroundColor3 = state and library.libColor or Color3.fromRGB(15,15,15)
                text.TextColor3 = state and Color3.fromRGB(244, 244, 244) or Color3.fromRGB(144, 144, 144)
                if args.callback then
                    args.callback(state)
                end
            end)
            button.MouseEnter:connect(function()
                mid.BorderColor3 = library.libColor
			end)
            button.MouseLeave:connect(function()
                mid.BorderColor3 = Color3.fromRGB(30,30,30)
			end)

            library.flags[args.flag] = false
            library.options[args.flag] = {type = "toggle",changeState = toggle,skipflag = args.skipflag,oldargs = args}
            local toggle = {}
            function toggle:addKeybind(args)
                if not args.flag then return warn("⚠️ incorrect arguments ⚠️ - missing args on toggle:keybind") end
                local next = false
                
                local keybind = Instance.new("Frame")
                local button = Instance.new("TextButton")

                keybind.Parent = toggleframe
                keybind.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                keybind.BackgroundTransparency = 1.000
                keybind.BorderColor3 = Color3.fromRGB(0, 0, 0)
                keybind.BorderSizePixel = 0
                keybind.Position = UDim2.new(0.720000029, 4, 0.272000015, 0)
                keybind.Size = UDim2.new(0, 51, 0, 10)
                
                button.Parent = keybind
                button.BackgroundColor3 = Color3.fromRGB(187, 131, 255)
                button.BackgroundTransparency = 1.000
                button.BorderSizePixel = 0
                button.Position = UDim2.new(-0.270902753, 0, 0, 0)
                button.Size = UDim2.new(1.27090275, 0, 1, 0)
                button.Font = Enum.Font.Code
                button.Text = ""
                button.TextColor3 = Color3.fromRGB(155, 155, 155)
                button.TextSize = 13.000
                button.TextStrokeTransparency = 0.000
                button.TextXAlignment = Enum.TextXAlignment.Right
    
                function updateValue(val)
                    if library.colorpicking then return end
                    library.flags[args.flag] = val
                    button.Text = keyNames[val] or val.Name
                end
                inputService.InputBegan:Connect(function(key)
                    local key = key.KeyCode == Enum.KeyCode.Unknown and key.UserInputType or key.KeyCode
                    if next then
                        if not table.find(library.blacklisted,key) then
                            next = false
                            library.flags[args.flag] = key
                            button.Text = keyNames[key] or key.Name
                            button.TextColor3 = Color3.fromRGB(155, 155, 155)
                        end
                    end
                    if not next and key == library.flags[args.flag] and args.callback then
                        args.callback()
                    end
                end)
    
                button.MouseButton1Click:Connect(function()
                    if library.colorpicking then return end
                    library.flags[args.flag] = Enum.KeyCode.Unknown
                    button.Text = "--"
                    button.TextColor3 = library.libColor
                    next = true
                end)
    
                library.flags[args.flag] = Enum.KeyCode.Unknown
                library.options[args.flag] = {type = "keybind",changeState = updateValue,skipflag = args.skipflag,oldargs = args}
    
                updateValue(args.key or Enum.KeyCode.Unknown)
            end
            function toggle:addColorpicker(args)
                if not args.flag and args.text then args.flag = args.text end
                if not args.flag then return warn("⚠️ incorrect arguments ⚠️") end
                local colorpicker = Instance.new("Frame")
                local mid = Instance.new("Frame")
                local front = Instance.new("Frame")
                local button2 = Instance.new("TextButton")
                local colorFrame = Instance.new("Frame")
                local colorFrame_2 = Instance.new("Frame")
                local hueframe = Instance.new("Frame")
                local main = Instance.new("Frame")
                local hue = Instance.new("ImageLabel")
                local pickerframe = Instance.new("Frame")
                local main_2 = Instance.new("Frame")
                local picker = Instance.new("ImageLabel")
                local clr = Instance.new("Frame")
                local copy = Instance.new("TextButton")

                library.multiZindex -= 1
                jigCount -= 1
                topStuff -= 1 --args.second

                colorpicker.Parent = toggleframe
                colorpicker.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                colorpicker.BorderColor3 = Color3.fromRGB(0, 0, 0)
                colorpicker.BorderSizePixel = 3
                colorpicker.Position = args.second and UDim2.new(0.720000029, 4, 0.272000015, 0) or UDim2.new(0.860000014, 4, 0.272000015, 0)
                colorpicker.Size = UDim2.new(0, 20, 0, 10)
                
                mid.Name = "mid"
                mid.Parent = colorpicker
                mid.BackgroundColor3 = Color3.fromRGB(69, 23, 255)
                mid.BorderColor3 = Color3.fromRGB(30,30,30)
                mid.BorderSizePixel = 2
                mid.Size = UDim2.new(1, 0, 1, 0)
                
                front.Name = "front"
                front.Parent = mid
                front.BackgroundColor3 = Color3.fromRGB(240, 142, 214)
                front.BorderColor3 = Color3.fromRGB(0, 0, 0)
                front.Size = UDim2.new(1, 0, 1, 0)
                
                button2.Name = "button2"
                button2.Parent = front
                button2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                button2.BackgroundTransparency = 1.000
                button2.Size = UDim2.new(1, 0, 1, 0)
                button2.Text = ""
                button2.Font = Enum.Font.SourceSans
                button2.TextColor3 = Color3.fromRGB(0, 0, 0)
                button2.TextSize = 14.000

				colorFrame.Name = "colorFrame"
				colorFrame.Parent = toggleframe
				colorFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
				colorFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
				colorFrame.BorderSizePixel = 2
				colorFrame.Position = UDim2.new(0.101092957, 0, 0.75, 0)
				colorFrame.Size = UDim2.new(0, 137, 0, 128)

				colorFrame_2.Name = "colorFrame"
				colorFrame_2.Parent = colorFrame
				colorFrame_2.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
				colorFrame_2.BorderColor3 = Color3.fromRGB(60, 60, 60)
				colorFrame_2.Size = UDim2.new(1, 0, 1, 0)

				hueframe.Name = "hueframe"
				hueframe.Parent = colorFrame_2
				hueframe.Parent = colorFrame_2
                hueframe.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
                hueframe.BorderColor3 = Color3.fromRGB(60, 60, 60)
                hueframe.BorderSizePixel = 2
                hueframe.Position = UDim2.new(-0.0930000022, 18, -0.0599999987, 30)
                hueframe.Size = UDim2.new(0, 100, 0, 100)
    
                main.Name = "main"
                main.Parent = hueframe
                main.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
                main.BorderColor3 = Color3.fromRGB(0, 0, 0)
                main.Size = UDim2.new(0, 100, 0, 100)
                main.ZIndex = 6
    
                picker.Name = "picker"
                picker.Parent = main
                picker.BackgroundColor3 = Color3.fromRGB(232, 0, 255)
                picker.BorderColor3 = Color3.fromRGB(0, 0, 0)
                picker.BorderSizePixel = 0
                picker.Size = UDim2.new(0, 100, 0, 100)
                picker.ZIndex = 104
                picker.Image = "rbxassetid://2615689005"
    
                pickerframe.Name = "pickerframe"
                pickerframe.Parent = colorFrame
                pickerframe.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
                pickerframe.BorderColor3 = Color3.fromRGB(60, 60, 60)
                pickerframe.BorderSizePixel = 2
                pickerframe.Position = UDim2.new(0.711000025, 14, -0.0599999987, 30)
                pickerframe.Size = UDim2.new(0, 20, 0, 100)
    
                main_2.Name = "main"
                main_2.Parent = pickerframe
                main_2.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
                main_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
                main_2.Size = UDim2.new(0, 20, 0, 100)
                main_2.ZIndex = 6
    
                hue.Name = "hue"
                hue.Parent = main_2
                hue.BackgroundColor3 = Color3.fromRGB(255, 0, 178)
                hue.BorderColor3 = Color3.fromRGB(0, 0, 0)
                hue.BorderSizePixel = 0
                hue.Size = UDim2.new(0, 20, 0, 100)
                hue.ZIndex = 104
                hue.Image = "rbxassetid://2615692420"
    
                clr.Name = "clr"
                clr.Parent = colorFrame
                clr.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
                clr.BackgroundTransparency = 1.000
                clr.BorderColor3 = Color3.fromRGB(60, 60, 60)
                clr.BorderSizePixel = 2
                clr.Position = UDim2.new(0.0280000009, 0, 0, 2)
                clr.Size = UDim2.new(0, 129, 0, 14)
                clr.ZIndex = 5
    
                copy.Name = "copy"
                copy.Parent = clr
                copy.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
                copy.BackgroundTransparency = 1.000
                copy.BorderSizePixel = 0
                copy.Size = UDim2.new(0, 129, 0, 14)
                copy.ZIndex = 5
                copy.Font = Enum.Font.SourceSans
                copy.Text = args.text or args.flag
                copy.TextColor3 = Color3.fromRGB(100, 100, 100)
                copy.TextSize = 14.000
                copy.TextStrokeTransparency = 0.000

                copy.MouseButton1Click:Connect(function() -- "  "..args.text or "  "..args.flag
                    colorFrame.Visible = false
                end)

                button2.MouseButton1Click:Connect(function()
                    colorFrame.Visible = not colorFrame.Visible
                    mid.BorderColor3 = Color3.fromRGB(30,30,30)
                end)

                button2.MouseEnter:connect(function()
                    mid.BorderColor3 = library.libColor
                end)
                button2.MouseLeave:connect(function()
                    mid.BorderColor3 = Color3.fromRGB(30,30,30)
                end)

                local function updateValue(value,fakevalue)
                    if typeof(value) == "table" then value = fakevalue end
                    library.flags[args.flag] = value
                    front.BackgroundColor3 = value
                    if args.callback then
                        args.callback(value)
                    end
                end

                local white, black = Color3.new(1,1,1), Color3.new(0,0,0)
                local colors = {Color3.new(1,0,0),Color3.new(1,1,0),Color3.new(0,1,0),Color3.new(0,1,1),Color3.new(0,0,1),Color3.new(1,0,1),Color3.new(1,0,0)}
                local heartbeat = game:GetService("RunService").Heartbeat

                local pickerX,pickerY,hueY = 0,0,0
                local oldpercentX,oldpercentY = 0,0

                hue.MouseEnter:Connect(function()
                    local input = hue.InputBegan:connect(function(key)
                        if key.UserInputType == Enum.UserInputType.MouseButton1 then
                            while heartbeat:wait() and inputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                                library.colorpicking = true
                                local percent = (hueY-hue.AbsolutePosition.Y-36)/hue.AbsoluteSize.Y
                                local num = math.max(1, math.min(7,math.floor(((percent*7+0.5)*100))/100))
                                local startC = colors[math.floor(num)]
                                local endC = colors[math.ceil(num)]
                                local color = white:lerp(picker.BackgroundColor3, oldpercentX):lerp(black, oldpercentY)
                                picker.BackgroundColor3 = startC:lerp(endC, num-math.floor(num)) or Color3.new(0, 0, 0)
                                updateValue(color)
                            end
                            library.colorpicking = false
                        end
                    end)
                    local leave
                    leave = hue.MouseLeave:connect(function()
                        input:disconnect()
                        leave:disconnect()
                    end)
                end)

                picker.MouseEnter:Connect(function()
                    local input = picker.InputBegan:connect(function(key)
                        if key.UserInputType == Enum.UserInputType.MouseButton1 then
                            while heartbeat:wait() and inputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                                library.colorpicking = true
                                local xPercent = (pickerX-picker.AbsolutePosition.X)/picker.AbsoluteSize.X
                                local yPercent = (pickerY-picker.AbsolutePosition.Y-36)/picker.AbsoluteSize.Y
                                local color = white:lerp(picker.BackgroundColor3, xPercent):lerp(black, yPercent)
                                updateValue(color)
                                oldpercentX,oldpercentY = xPercent,yPercent
                            end
                            library.colorpicking = false
                        end
                    end)
                    local leave
                    leave = picker.MouseLeave:connect(function()
                        input:disconnect()
                        leave:disconnect()
                    end)
                end)

                hue.MouseMoved:connect(function(_, y)
                    hueY = y
                end)

                picker.MouseMoved:connect(function(x, y)
                    pickerX,pickerY = x,y
                end)

                table.insert(library.toInvis,colorFrame)
                library.flags[args.flag] = Color3.new(1,1,1)
                library.options[args.flag] = {type = "colorpicker",changeState = updateValue,skipflag = args.skipflag,oldargs = args}

                updateValue(args.color or Color3.new(1,1,1))
            end
            return toggle
        end
        function group:addButton(args)
            if not args.callback or not args.text then return warn("⚠️ incorrect arguments ⚠️") end
            groupbox.Size += UDim2.new(0, 0, 0, 22)

            local buttonframe = Instance.new("Frame")
            local bg = Instance.new("Frame")
            local main = Instance.new("Frame")
            local button = Instance.new("TextButton")
            local gradient = Instance.new("UIGradient")

            buttonframe.Name = "buttonframe"
            buttonframe.Parent = grouper
            buttonframe.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            buttonframe.BackgroundTransparency = 1.000
            buttonframe.BorderSizePixel = 0
            buttonframe.Size = UDim2.new(1, 0, 0, 21)
            
            bg.Name = "bg"
            bg.Parent = buttonframe
            bg.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            bg.BorderColor3 = Color3.fromRGB(0, 0, 0)
            bg.BorderSizePixel = 2
            bg.Position = UDim2.new(0.02, -1, 0, 0)
            bg.Size = UDim2.new(0, 205, 0, 15)
            
            main.Name = "main"
            main.Parent = bg
            main.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            main.BorderColor3 = Color3.fromRGB(60, 60, 60)
            main.Size = UDim2.new(1, 0, 1, 0)
            
            button.Name = "button"
            button.Parent = main
            button.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            button.BackgroundTransparency = 1.000
            button.BorderSizePixel = 0
            button.Size = UDim2.new(1, 0, 1, 0)
            button.Font = Enum.Font.Code
            button.Text = args.text or args.flag
            button.TextColor3 = Color3.fromRGB(255, 255, 255)
            button.TextSize = 13.000
            button.TextStrokeTransparency = 0.000
            
            gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(105, 105, 105)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(121, 121, 121))}
            gradient.Rotation = 90
            gradient.Name = "gradient"
            gradient.Parent = main

            button.MouseButton1Click:Connect(function()
                if not library.colorpicking then
                    args.callback()
                end
            end)
            button.MouseEnter:connect(function()
                main.BorderColor3 = library.libColor
			end)
			button.MouseLeave:connect(function()
                main.BorderColor3 = Color3.fromRGB(60, 60, 60)
			end)
        end
        function group:addSlider(args,sub)
            if not args.flag or not args.max then return warn("⚠️ incorrect arguments ⚠️") end
            groupbox.Size += UDim2.new(0, 0, 0, 30)

            local slider = Instance.new("Frame")
            local bg = Instance.new("Frame")
            local main = Instance.new("Frame")
            local fill = Instance.new("Frame")
            local button = Instance.new("TextButton")
            local valuetext = Instance.new("TextLabel")
            local UIGradient = Instance.new("UIGradient")
            local text = Instance.new("TextLabel")

            slider.Name = "slider"
            slider.Parent = grouper
            slider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            slider.BackgroundTransparency = 1.000
            slider.BorderSizePixel = 0
            slider.Size = UDim2.new(1, 0, 0, 30)
            
            bg.Name = "bg"
            bg.Parent = slider
            bg.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            bg.BorderColor3 = Color3.fromRGB(0, 0, 0)
            bg.BorderSizePixel = 2
            bg.Position = UDim2.new(0.02, -1, 0, 16)
            bg.Size = UDim2.new(0, 205, 0, 10)
            
            main.Name = "main"
            main.Parent = bg
            main.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            main.BorderColor3 = Color3.fromRGB(50, 50, 50)
            main.Size = UDim2.new(1, 0, 1, 0)
            
            fill.Name = "fill"
            fill.Parent = main
            fill.BackgroundColor3 = library.libColor
            fill.BackgroundTransparency = 0.200
            fill.BorderColor3 = Color3.fromRGB(60, 60, 60)
            fill.BorderSizePixel = 0
            fill.Size = UDim2.new(0.617238641, 13, 1, 0)
            
            button.Name = "button"
            button.Parent = main
            button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            button.BackgroundTransparency = 1.000
            button.Size = UDim2.new(0, 191, 1, 0)
            button.Font = Enum.Font.SourceSans
            button.Text = ""
            button.TextColor3 = Color3.fromRGB(0, 0, 0)
            button.TextSize = 14.000
            
            valuetext.Parent = main
            valuetext.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            valuetext.BackgroundTransparency = 1.000
            valuetext.Position = UDim2.new(0.5, 0, 0.5, 0)
            valuetext.Font = Enum.Font.Code
            valuetext.Text = "0.9172/10"
            valuetext.TextColor3 = Color3.fromRGB(255, 255, 255)
            valuetext.TextSize = 14.000
            valuetext.TextStrokeTransparency = 0.000
            
            UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(105, 105, 105)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(121, 121, 121))}
            UIGradient.Rotation = 90
            UIGradient.Parent = main
            
            text.Name = "text"
            text.Parent = slider
            text.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            text.BackgroundTransparency = 1.000
            text.Position = UDim2.new(0.0299999993, -1, 0, 7)
            text.ZIndex = 2
            text.Font = Enum.Font.Code
            text.Text = args.text or args.flag
            text.TextColor3 = Color3.fromRGB(244, 244, 244)
            text.TextSize = 13.000
            text.TextStrokeTransparency = 0.000
            text.TextXAlignment = Enum.TextXAlignment.Left

            local entered = false
			local scrolling = false
			local amount = 0

            local function updateValue(value)
                if library.colorpicking then return end
				if value ~= 0 then
					fill:TweenSize(UDim2.new(value/args.max,0,1,0),Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.01)
				else
					fill:TweenSize(UDim2.new(0,1,1,0),Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.01)
                end
                valuetext.Text = value..sub
                library.flags[args.flag] = value
                if args.callback then
                    args.callback(value)
                end
			end
			local function updateScroll()
                if scrolling or library.scrolling or not newTab.Visible or library.colorpicking then return end
                while inputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) and menu.Enabled do runService.RenderStepped:Wait()
                    library.scrolling = true
                    valuetext.TextColor3 = Color3.fromRGB(255,255,255)
					scrolling = true
					local value = args.min + ((mouse.X - button.AbsolutePosition.X) / button.AbsoluteSize.X) * (args.max - args.min)
					if value < 0 then value = 0 end
					if value > args.max then value = args.max end
                    if value < args.min then value = args.min end
					updateValue(math.floor(value))
                end
                if scrolling and not entered then
                    valuetext.TextColor3 = Color3.fromRGB(255,255,255)
                end
                if not menu.Enabled then
                    entered = false
                end
                scrolling = false
                library.scrolling = false
			end
			button.MouseEnter:connect(function()
                if library.colorpicking then return end
				if scrolling or entered then return end
                entered = true
                main.BorderColor3 = library.libColor
				while entered do wait()
					updateScroll()
				end
			end)
			button.MouseLeave:connect(function()
                entered = false
                main.BorderColor3 = Color3.fromRGB(60, 60, 60)
			end)
            if args.value then
                updateValue(args.value)
            end
            library.flags[args.flag] = 0
            library.options[args.flag] = {type = "slider",changeState = updateValue,skipflag = args.skipflag,oldargs = args}
            updateValue(args.value or 0)
        end
        function group:addTextbox(args)
            if not args.flag then return warn("⚠️ incorrect arguments ⚠️") end
            groupbox.Size += UDim2.new(0, 0, 0, 35)

            local textbox = Instance.new("Frame")
            local bg = Instance.new("Frame")
            local main = Instance.new("ScrollingFrame")
            local box = Instance.new("TextBox")
            local gradient = Instance.new("UIGradient")
            local text = Instance.new("TextLabel")

            box:GetPropertyChangedSignal('Text'):Connect(function(val)
                if library.colorpicking then return end
                library.flags[args.flag] = box.Text
                args.value = box.Text
                if args.callback then
                    args.callback()
                end
            end)
            textbox.Name = "textbox"
            textbox.Parent = grouper
            textbox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            textbox.BackgroundTransparency = 1.000
            textbox.BorderSizePixel = 0
            textbox.Size = UDim2.new(1, 0, 0, 35)
            textbox.ZIndex = 10

            bg.Name = "bg"
            bg.Parent = textbox
            bg.BackgroundColor3 = Color3.fromRGB(15,15,15)
            bg.BorderColor3 = Color3.fromRGB(0, 0, 0)
            bg.BorderSizePixel = 2
            bg.Position = UDim2.new(0.02, -1, 0, 16)
            bg.Size = UDim2.new(0, 205, 0, 15)

            main.Name = "main"
            main.Parent = bg
            main.Active = true
            main.BackgroundColor3 = Color3.fromRGB(15,15,15)
            main.BorderColor3 = Color3.fromRGB(30, 30, 30)
            main.Size = UDim2.new(1, 0, 1, 0)
            main.CanvasSize = UDim2.new(0, 0, 0, 0)
            main.ScrollBarThickness = 0

            box.Name = "box"
            box.Parent = main
            box.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            box.BackgroundTransparency = 1.000
            box.Selectable = false
            box.Size = UDim2.new(1, 0, 1, 0)
            box.Font = Enum.Font.Code
            box.Text = args.value or ""
            box.TextColor3 = Color3.fromRGB(255, 255, 255)
            box.TextSize = 13.000
            box.TextStrokeTransparency = 0.000
            box.TextXAlignment = Enum.TextXAlignment.Left

            gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(105, 105, 105)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(121, 121, 121))}
            gradient.Rotation = 90
            gradient.Name = "gradient"
            gradient.Parent = main

            text.Name = "text"
            text.Parent = textbox
            text.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            text.BackgroundTransparency = 1.000
            text.Position = UDim2.new(0.0299999993, -1, 0, 7)
            text.ZIndex = 2
            text.Font = Enum.Font.Code
            text.Text = args.text or args.flag
            text.TextColor3 = Color3.fromRGB(244, 244, 244)
            text.TextSize = 13.000
            text.TextStrokeTransparency = 0.000
            text.TextXAlignment = Enum.TextXAlignment.Left


            library.flags[args.flag] = args.value or ""
            library.options[args.flag] = {type = "textbox",changeState = function(text) box.Text = text end,skipflag = args.skipflag,oldargs = args}
        end
        function group:addDivider(args)
            groupbox.Size += UDim2.new(0, 0, 0, 10)
            
            local div = Instance.new("Frame")
            local bg = Instance.new("Frame")
            local main = Instance.new("Frame")

            div.Name = "div"
            div.Parent = grouper
            div.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            div.BackgroundTransparency = 1.000
            div.BorderSizePixel = 0
            div.Position = UDim2.new(0, 0, 0.743662, 0)
            div.Size = UDim2.new(0, 202, 0, 10)
            
            bg.Name = "bg"
            bg.Parent = div
            bg.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            bg.BorderColor3 = Color3.fromRGB(0, 0, 0)
            bg.BorderSizePixel = 2
            bg.Position = UDim2.new(0.02, 0, 0, 4)
            bg.Size = UDim2.new(0, 191, 0, 1)
            
            main.Name = "main"
            main.Parent = bg
            main.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            main.BorderColor3 = Color3.fromRGB(60, 60, 60)
            main.Size = UDim2.new(0, 191, 0, 1)
        end
        function group:addList(args)
            if not args.flag or not args.values then return warn("⚠️ incorrect arguments ⚠️") end
            groupbox.Size += UDim2.new(0, 0, 0, 35)
            
--args.multiselect and "..." or ""
            library.multiZindex -= 1

            local list = Instance.new("Frame")
            local bg = Instance.new("Frame")
            local main = Instance.new("ScrollingFrame")
            local button = Instance.new("TextButton")
            local dumbtriangle = Instance.new("ImageLabel")
            local valuetext = Instance.new("TextLabel")
            local gradient = Instance.new("UIGradient")
            local text = Instance.new("TextLabel")

            local frame = Instance.new("Frame")
            local holder = Instance.new("Frame")
            local UIListLayout = Instance.new("UIListLayout")
            
            list.Name = "list"
            list.Parent = grouper
            list.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            list.BackgroundTransparency = 1.000
            list.BorderSizePixel = 0
            list.Size = UDim2.new(1, 0, 0, 35)
            list.ZIndex = library.multiZindex

            bg.Name = "bg"
            bg.Parent = list
            bg.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            bg.BorderColor3 = Color3.fromRGB(0, 0, 0)
            bg.BorderSizePixel = 2
            bg.Position = UDim2.new(0.02, -1, 0, 16)
            bg.Size = UDim2.new(0, 205, 0, 15)

            main.Name = "main"
            main.Parent = bg
            main.Active = true
            main.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            main.BorderColor3 = Color3.fromRGB(60, 60, 60)
            main.Size = UDim2.new(1, 0, 1, 0)
            main.CanvasSize = UDim2.new(0, 0, 0, 0)
            main.ScrollBarThickness = 0

            button.Name = "button"
            button.Parent = main
            button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            button.BackgroundTransparency = 1.000
            button.Size = UDim2.new(0, 191, 1, 0)
            button.Font = Enum.Font.SourceSans
            button.Text = ""
            button.TextColor3 = Color3.fromRGB(0, 0, 0)
            button.TextSize = 14.000

            dumbtriangle.Name = "dumbtriangle"
            dumbtriangle.Parent = main
            dumbtriangle.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            dumbtriangle.BackgroundTransparency = 1.000
            dumbtriangle.BorderColor3 = Color3.fromRGB(0, 0, 0)
            dumbtriangle.BorderSizePixel = 0
            dumbtriangle.Position = UDim2.new(1, -11, 0.5, -3)
            dumbtriangle.Size = UDim2.new(0, 7, 0, 6)
            dumbtriangle.ZIndex = 3
            dumbtriangle.Image = "rbxassetid://8532000591"

            valuetext.Name = "valuetext"
            valuetext.Parent = main
            valuetext.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            valuetext.BackgroundTransparency = 1.000
            valuetext.Position = UDim2.new(0.00200000009, 2, 0, 7)
            valuetext.ZIndex = 2
            valuetext.Font = Enum.Font.Code
            valuetext.Text = ""
            valuetext.TextColor3 = Color3.fromRGB(244, 244, 244)
            valuetext.TextSize = 13.000
            valuetext.TextStrokeTransparency = 0.000
            valuetext.TextXAlignment = Enum.TextXAlignment.Left

            gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(105, 105, 105)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(121, 121, 121))}
            gradient.Rotation = 90
            gradient.Name = "gradient"
            gradient.Parent = main

            text.Name = "text"
            text.Parent = list
            text.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            text.BackgroundTransparency = 1.000
            text.Position = UDim2.new(0.0299999993, -1, 0, 7)
            text.ZIndex = 2
            text.Font = Enum.Font.Code
            text.Text = args.text or args.flag
            text.TextColor3 = Color3.fromRGB(244, 244, 244)
            text.TextSize = 13.000
            text.TextStrokeTransparency = 0.000
            text.TextXAlignment = Enum.TextXAlignment.Left

            frame.Name = "frame"
            frame.Parent = list
            frame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
            frame.BorderSizePixel = 2
            frame.Position = UDim2.new(0.0299999993, -1, 0.605000019, 15)
            frame.Size = UDim2.new(0, 203, 0, 0)
            frame.Visible = false
            frame.ZIndex = library.multiZindex
            
            holder.Name = "holder"
            holder.Parent = frame
            holder.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            holder.BorderColor3 = Color3.fromRGB(60, 60, 60)
            holder.Size = UDim2.new(1, 0, 1, 0)
            
            UIListLayout.Parent = holder
            UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

			local function updateValue(value)
                if value == nil then valuetext.Text = "nil" return end
				if args.multiselect then
                    if type(value) == "string" then
                        if not table.find(library.options[args.flag].values,value) then return end
                        if table.find(library.flags[args.flag],value) then
                            for i,v in pairs(library.flags[args.flag]) do
                                if v == value then
                                    table.remove(library.flags[args.flag],i)
                                end
                            end
                        else
                            table.insert(library.flags[args.flag],value)
                        end
                    else
                        library.flags[args.flag] = value
                    end
					local buttonText = ""
					for i,v in pairs(library.flags[args.flag]) do
						local jig = i ~= #library.flags[args.flag] and "," or ""
						buttonText = buttonText..v..jig
					end
                    if buttonText == "" then buttonText = "..." end
					for i,v in next, holder:GetChildren() do
						if v.ClassName ~= "Frame" then continue end
						v.off.TextColor3 = Color3.new(0.65,0.65,0.65)
						for _i,_v in next, library.flags[args.flag] do
							if v.Name == _v then
								v.off.TextColor3 = Color3.new(1,1,1)
							end
						end
					end
					valuetext.Text = buttonText
					if args.callback then
						args.callback(library.flags[args.flag])
					end
				else
                    if not table.find(library.options[args.flag].values,value) then value = library.options[args.flag].values[1] end
                    library.flags[args.flag] = value
					for i,v in next, holder:GetChildren() do
						if v.ClassName ~= "Frame" then continue end
						v.off.TextColor3 = Color3.new(0.65,0.65,0.65)
                        if v.Name == library.flags[args.flag] then
                            v.off.TextColor3 = Color3.new(1,1,1)
                        end
					end
					frame.Visible = false
                    if library.flags[args.flag] then
                        valuetext.Text = library.flags[args.flag]
                        if args.callback then
                            args.callback(library.flags[args.flag])
                        end
                    end
				end
			end

            function refresh(tbl)
                for i,v in next, holder:GetChildren() do
                    if v.ClassName == "Frame" then
                        v:Destroy()
                    end
					frame.Size = UDim2.new(0, 203, 0, 0)
                end
                for i,v in pairs(tbl) do
                    frame.Size += UDim2.new(0, 0, 0, 20)

                    local option = Instance.new("Frame")
                    local button_2 = Instance.new("TextButton")
                    local text_2 = Instance.new("TextLabel")

                    option.Name = v
                    option.Parent = holder
                    option.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    option.BackgroundTransparency = 1.000
                    option.Size = UDim2.new(1, 0, 0, 20)

                    button_2.Name = "button"
                    button_2.Parent = option
                    button_2.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
                    button_2.BackgroundTransparency = 0.850
                    button_2.BorderSizePixel = 0
                    button_2.Size = UDim2.new(1, 0, 1, 0)
                    button_2.Font = Enum.Font.SourceSans
                    button_2.Text = ""
                    button_2.TextColor3 = Color3.fromRGB(0, 0, 0)
                    button_2.TextSize = 14.000

                    text_2.Name = "off"
                    text_2.Parent = option
                    text_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    text_2.BackgroundTransparency = 1.000
                    text_2.Position = UDim2.new(0, 4, 0, 0)
                    text_2.Size = UDim2.new(0, 0, 1, 0)
                    text_2.Font = Enum.Font.Code
                    text_2.Text = v
                    text_2.TextColor3 = args.multiselect and Color3.new(0.65,0.65,0.65) or Color3.new(1,1,1)
                    text_2.TextSize = 14.000
                    text_2.TextStrokeTransparency = 0.000
                    text_2.TextXAlignment = Enum.TextXAlignment.Left
    
                    button_2.MouseButton1Click:Connect(function()
                        updateValue(v)
                    end)
                end
                library.options[args.flag].values = tbl
                updateValue(table.find(library.options[args.flag].values,library.flags[args.flag]) and library.flags[args.flag] or library.options[args.flag].values[1])
            end

            button.MouseButton1Click:Connect(function()
                if not library.colorpicking then
                    frame.Visible = not frame.Visible
                end
            end)
            button.MouseEnter:connect(function()
                main.BorderColor3 = library.libColor
			end)
			button.MouseLeave:connect(function()
                main.BorderColor3 = Color3.fromRGB(60, 60, 60)
			end)
            
            table.insert(library.toInvis,frame)
            library.flags[args.flag] = args.multiselect and {} or ""
            library.options[args.flag] = {type = "list",changeState = updateValue,values = args.values,refresh = refresh,skipflag = args.skipflag,oldargs = args}

            refresh(args.values)
            updateValue(args.value or not args.multiselect and args.values[1] or "abcdefghijklmnopqrstuwvxyz")
        end
        function group:addConfigbox(args)
            if not args.flag or not args.values then return warn("⚠️ incorrect arguments ⚠️") end
            groupbox.Size += UDim2.new(0, 0, 0, 138)
            library.multiZindex -= 1
            
            local list2 = Instance.new("Frame")
            local frame = Instance.new("Frame")
            local main = Instance.new("Frame")
            local holder = Instance.new("ScrollingFrame")
            local UIListLayout = Instance.new("UIListLayout")
            local dwn = Instance.new("ImageLabel")
            local up = Instance.new("ImageLabel")
        
            list2.Name = "list2"
            list2.Parent = grouper
            list2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            list2.BackgroundTransparency = 1.000
            list2.BorderSizePixel = 0
            list2.Position = UDim2.new(0, 0, 0.108108111, 0)
            list2.Size = UDim2.new(1, 0, 0, 138)
            
            frame.Name = "frame"
            frame.Parent = list2
            frame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
            frame.BorderSizePixel = 2
            frame.Position = UDim2.new(0.02, -1, 0.0439999998, 0)
            frame.Size = UDim2.new(0, 205, 0, 128)
            
            main.Name = "main"
            main.Parent = frame
            main.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
            main.BorderColor3 = Color3.fromRGB(30,30,30)
            main.Size = UDim2.new(1, 0, 1, 0)
            
            holder.Name = "holder"
            holder.Parent = main
            holder.Active = true
            holder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            holder.BackgroundTransparency = 1.000
            holder.BorderSizePixel = 0
            holder.Position = UDim2.new(0, 0, 0.00571428565, 0)
            holder.Size = UDim2.new(1, 0, 1, 0)
            holder.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
            holder.CanvasSize = UDim2.new(0, 0, 0, 0)
            holder.ScrollBarThickness = 0
            holder.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
            holder.AutomaticCanvasSize = Enum.AutomaticSize.Y
            holder.ScrollingEnabled = true
            holder.ScrollBarImageTransparency = 0
            
            UIListLayout.Parent = holder
            
            dwn.Name = "dwn"
            dwn.Parent = frame
            dwn.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            dwn.BackgroundTransparency = 1.000
            dwn.BorderColor3 = Color3.fromRGB(0, 0, 0)
            dwn.BorderSizePixel = 0
            dwn.Position = UDim2.new(0.930000007, 4, 1, -9)
            dwn.Size = UDim2.new(0, 7, 0, 6)
            dwn.ZIndex = 3
            dwn.Image = "rbxassetid://8548723563"
            dwn.Visible = false
            
            up.Name = "up"
            up.Parent = frame
            up.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            up.BackgroundTransparency = 1.000
            up.BorderColor3 = Color3.fromRGB(0, 0, 0)
            up.BorderSizePixel = 0
            up.Position = UDim2.new(0, 3, 0, 3)
            up.Size = UDim2.new(0, 7, 0, 6)
            up.ZIndex = 3
            up.Image = "rbxassetid://8548757311"
            up.Visible = false

            local function updateValue(value)
                if value == nil then return end
                if not table.find(library.options[args.flag].values,value) then value = library.options[args.flag].values[1] end
                library.flags[args.flag] = value
        
                for i,v in next, holder:GetChildren() do
                    if v.ClassName ~= "Frame" then continue end
                    if v.text.Text == library.flags[args.flag] then
                        v.text.TextColor3 = library.libColor
                    else
                        v.text.TextColor3 = Color3.fromRGB(255,255,255)
                    end
                end
                if library.flags[args.flag] then
                    if args.callback then
                        args.callback(library.flags[args.flag])
                    end
                end
                holder.Visible = true
            end
            holder:GetPropertyChangedSignal("CanvasPosition"):Connect(function()
                up.Visible = (holder.CanvasPosition.Y > 1)
                dwn.Visible = (holder.CanvasPosition.Y + 1 < (holder.AbsoluteCanvasSize.Y - holder.AbsoluteSize.Y))
            end)
        
        
            function refresh(tbl)
                for i,v in next, holder:GetChildren() do
                    if v.ClassName == "Frame" then
                        v:Destroy()
                    end
                end
                for i,v in pairs(tbl) do
                    local item = Instance.new("Frame")
                    local button = Instance.new("TextButton")
                    local text = Instance.new("TextLabel")
        
                    item.Name = v
                    item.Parent = holder
                    item.Active = true
                    item.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                    item.BackgroundTransparency = 1.000
                    item.BorderColor3 = Color3.fromRGB(0, 0, 0)
                    item.BorderSizePixel = 0
                    item.Size = UDim2.new(1, 0, 0, 18)
                    
                    button.Parent = item
                    button.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
                    button.BackgroundTransparency = 1
                    button.BorderColor3 = Color3.fromRGB(0, 0, 0)
                    button.BorderSizePixel = 0
                    button.Size = UDim2.new(1, 0, 1, 0)
                    button.Text = ""
                    button.TextTransparency = 1.000
                    
                    text.Name = 'text'
                    text.Parent = item
                    text.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    text.BackgroundTransparency = 1.000
                    text.Size = UDim2.new(1, 0, 0, 18)
                    text.Font = Enum.Font.Code
                    text.Text = v
                    text.TextColor3 = Color3.fromRGB(255, 255, 255)
                    text.TextSize = 14.000
                    text.TextStrokeTransparency = 0.000
        
                    button.MouseButton1Click:Connect(function()
                        updateValue(v)
                    end)
                end
        
                holder.Visible = true
                library.options[args.flag].values = tbl
                updateValue(table.find(library.options[args.flag].values,library.flags[args.flag]) and library.flags[args.flag] or library.options[args.flag].values[1])
            end
        
        
            library.flags[args.flag] = ""
            library.options[args.flag] = {type = "cfg",changeState = updateValue,values = args.values,refresh = refresh,skipflag = args.skipflag,oldargs = args}
        
            refresh(args.values)
            updateValue(args.value or not args.multiselect and args.values[1] or "abcdefghijklmnopqrstuwvxyz")
        end
        function group:addColorpicker(args)
            if not args.flag then return warn("⚠️ incorrect arguments ⚠️") end
            groupbox.Size += UDim2.new(0, 0, 0, 20)
        
            library.multiZindex -= 1
            jigCount -= 1
            topStuff -= 1

            local colorpicker = Instance.new("Frame")
            local back = Instance.new("Frame")
            local mid = Instance.new("Frame")
            local front = Instance.new("Frame")
            local text = Instance.new("TextLabel")
            local colorpicker_2 = Instance.new("Frame")
            local button = Instance.new("TextButton")

            local colorFrame = Instance.new("Frame")
			local colorFrame_2 = Instance.new("Frame")
			local hueframe = Instance.new("Frame")
			local main = Instance.new("Frame")
			local hue = Instance.new("ImageLabel")
			local pickerframe = Instance.new("Frame")
			local main_2 = Instance.new("Frame")
			local picker = Instance.new("ImageLabel")
			local clr = Instance.new("Frame")
			local copy = Instance.new("TextButton")

            colorpicker.Name = "colorpicker"
            colorpicker.Parent = grouper
            colorpicker.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            colorpicker.BackgroundTransparency = 1.000
            colorpicker.BorderSizePixel = 0
            colorpicker.Size = UDim2.new(1, 0, 0, 20)
            colorpicker.ZIndex = topStuff

            text.Name = "text"
            text.Parent = colorpicker
            text.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            text.BackgroundTransparency = 1.000
            text.Position = UDim2.new(0.02, -1, 0, 10)
            text.Font = Enum.Font.Code
            text.Text = args.text or args.flag
            text.TextColor3 = Color3.fromRGB(244, 244, 244)
            text.TextSize = 13.000
            text.TextStrokeTransparency = 0.000
            text.TextXAlignment = Enum.TextXAlignment.Left

            button.Name = "button"
            button.Parent = colorpicker
            button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            button.BackgroundTransparency = 1.000
            button.BorderSizePixel = 0
            button.Size = UDim2.new(1, 0, 1, 0)
            button.Font = Enum.Font.SourceSans
            button.Text = ""
            button.TextColor3 = Color3.fromRGB(0, 0, 0)
            button.TextSize = 14.000

            colorpicker_2.Name = "colorpicker"
            colorpicker_2.Parent = colorpicker
            colorpicker_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            colorpicker_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
            colorpicker_2.BorderSizePixel = 3
            colorpicker_2.Position = UDim2.new(0.860000014, 4, 0.272000015, 0)
            colorpicker_2.Size = UDim2.new(0, 20, 0, 10)

            mid.Name = "mid"
            mid.Parent = colorpicker_2
            mid.BackgroundColor3 = Color3.fromRGB(69, 23, 255)
            mid.BorderColor3 = Color3.fromRGB(30,30,30)
            mid.BorderSizePixel = 2
            mid.Size = UDim2.new(1, 0, 1, 0)

            front.Name = "front"
            front.Parent = mid
            front.BackgroundColor3 = Color3.fromRGB(240, 142, 214)
            front.BorderColor3 = Color3.fromRGB(0, 0, 0)
            front.Size = UDim2.new(1, 0, 1, 0)

            button.Name = "button"
            button.Parent = colorpicker
            button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            button.BackgroundTransparency = 1.000
            button.Size = UDim2.new(0, 202, 0, 22)
            button.Font = Enum.Font.SourceSans
            button.Text = ""
			button.ZIndex = args.ontop and topStuff or jigCount
            button.TextColor3 = Color3.fromRGB(0, 0, 0)
            button.TextSize = 14.000

			colorFrame.Name = "colorFrame"
			colorFrame.Parent = colorpicker
			colorFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
			colorFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
			colorFrame.BorderSizePixel = 2
			colorFrame.Position = UDim2.new(0.101092957, 0, 0.75, 0)
			colorFrame.Size = UDim2.new(0, 137, 0, 128)

			colorFrame_2.Name = "colorFrame"
			colorFrame_2.Parent = colorFrame
			colorFrame_2.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
			colorFrame_2.BorderColor3 = Color3.fromRGB(60, 60, 60)
			colorFrame_2.Size = UDim2.new(1, 0, 1, 0)

			hueframe.Name = "hueframe"
			hueframe.Parent = colorFrame_2
            hueframe.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
            hueframe.BorderColor3 = Color3.fromRGB(60, 60, 60)
            hueframe.BorderSizePixel = 2
            hueframe.Position = UDim2.new(-0.0930000022, 18, -0.0599999987, 30)
            hueframe.Size = UDim2.new(0, 100, 0, 100)

            main.Name = "main"
            main.Parent = hueframe
            main.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
            main.BorderColor3 = Color3.fromRGB(0, 0, 0)
            main.Size = UDim2.new(0, 100, 0, 100)
            main.ZIndex = 6

            picker.Name = "picker"
            picker.Parent = main
            picker.BackgroundColor3 = Color3.fromRGB(232, 0, 255)
            picker.BorderColor3 = Color3.fromRGB(0, 0, 0)
            picker.BorderSizePixel = 0
            picker.Size = UDim2.new(0, 100, 0, 100)
            picker.ZIndex = 104
            picker.Image = "rbxassetid://2615689005"

            pickerframe.Name = "pickerframe"
            pickerframe.Parent = colorFrame
            pickerframe.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
            pickerframe.BorderColor3 = Color3.fromRGB(60, 60, 60)
            pickerframe.BorderSizePixel = 2
            pickerframe.Position = UDim2.new(0.711000025, 14, -0.0599999987, 30)
            pickerframe.Size = UDim2.new(0, 20, 0, 100)

            main_2.Name = "main"
            main_2.Parent = pickerframe
            main_2.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
            main_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
            main_2.Size = UDim2.new(0, 20, 0, 100)
            main_2.ZIndex = 6

            hue.Name = "hue"
            hue.Parent = main_2
            hue.BackgroundColor3 = Color3.fromRGB(255, 0, 178)
            hue.BorderColor3 = Color3.fromRGB(0, 0, 0)
            hue.BorderSizePixel = 0
            hue.Size = UDim2.new(0, 20, 0, 100)
            hue.ZIndex = 104
            hue.Image = "rbxassetid://2615692420"

            clr.Name = "clr"
            clr.Parent = colorFrame
            clr.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
            clr.BackgroundTransparency = 1.000
            clr.BorderColor3 = Color3.fromRGB(60, 60, 60)
            clr.BorderSizePixel = 2
            clr.Position = UDim2.new(0.0280000009, 0, 0, 2)
            clr.Size = UDim2.new(0, 129, 0, 14)
            clr.ZIndex = 5

            copy.Name = "copy"
            copy.Parent = clr
            copy.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
            copy.BackgroundTransparency = 1.000
            copy.BorderSizePixel = 0
            copy.Size = UDim2.new(0, 129, 0, 14)
            copy.ZIndex = 5
            copy.Font = Enum.Font.Code
            copy.Text = args.text or args.flag
            copy.TextColor3 = Color3.fromRGB(100, 100, 100)
            copy.TextSize = 14.000
            copy.TextStrokeTransparency = 0.000
            
            copy.MouseButton1Click:Connect(function()
                colorFrame.Visible = false
            end)

            button.MouseButton1Click:Connect(function()
				colorFrame.Visible = not colorFrame.Visible
                mid.BorderColor3 = Color3.fromRGB(30,30,30)
            end)

            button.MouseEnter:connect(function()
                mid.BorderColor3 = library.libColor
            end)
            button.MouseLeave:connect(function()
                mid.BorderColor3 = Color3.fromRGB(30,30,30)
            end)

            local function updateValue(value,fakevalue)
                if typeof(value) == "table" then value = fakevalue end
                library.flags[args.flag] = value
                front.BackgroundColor3 = value
                if args.callback then
                    args.callback(value)
                end
			end

            local white, black = Color3.new(1,1,1), Color3.new(0,0,0)
            local colors = {Color3.new(1,0,0),Color3.new(1,1,0),Color3.new(0,1,0),Color3.new(0,1,1),Color3.new(0,0,1),Color3.new(1,0,1),Color3.new(1,0,0)}
            local heartbeat = game:GetService("RunService").Heartbeat

            local pickerX,pickerY,hueY = 0,0,0
            local oldpercentX,oldpercentY = 0,0

            hue.MouseEnter:Connect(function()
                local input = hue.InputBegan:connect(function(key)
                    if key.UserInputType == Enum.UserInputType.MouseButton1 then
                        while heartbeat:wait() and inputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                            library.colorpicking = true
                            local percent = (hueY-hue.AbsolutePosition.Y-36)/hue.AbsoluteSize.Y
                            local num = math.max(1, math.min(7,math.floor(((percent*7+0.5)*100))/100))
                            local startC = colors[math.floor(num)]
                            local endC = colors[math.ceil(num)]
                            local color = white:lerp(picker.BackgroundColor3, oldpercentX):lerp(black, oldpercentY)
                            picker.BackgroundColor3 = startC:lerp(endC, num-math.floor(num)) or Color3.new(0, 0, 0)
                            updateValue(color)
                        end
                        library.colorpicking = false
                    end
                end)
                local leave
                leave = hue.MouseLeave:connect(function()
                    input:disconnect()
                    leave:disconnect()
                end)
            end)

            picker.MouseEnter:Connect(function()
                local input = picker.InputBegan:connect(function(key)
                    if key.UserInputType == Enum.UserInputType.MouseButton1 then
                        while heartbeat:wait() and inputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                            library.colorpicking = true
                            local xPercent = (pickerX-picker.AbsolutePosition.X)/picker.AbsoluteSize.X
                            local yPercent = (pickerY-picker.AbsolutePosition.Y-36)/picker.AbsoluteSize.Y
                            local color = white:lerp(picker.BackgroundColor3, xPercent):lerp(black, yPercent)
                            updateValue(color)
                            oldpercentX,oldpercentY = xPercent,yPercent
                        end
                        library.colorpicking = false
                    end
                end)
                local leave
                leave = picker.MouseLeave:connect(function()
                    input:disconnect()
                    leave:disconnect()
                end)
            end)

            hue.MouseMoved:connect(function(_, y)
                hueY = y
            end)

            picker.MouseMoved:connect(function(x, y)
                pickerX,pickerY = x,y
            end)

            table.insert(library.toInvis,colorFrame)
            library.flags[args.flag] = Color3.new(1,1,1)
            library.options[args.flag] = {type = "colorpicker",changeState = updateValue,skipflag = args.skipflag,oldargs = args}

            updateValue(args.color or Color3.new(1,1,1))
        end
        function group:addKeybind(args)
            if not args.flag then return warn("⚠️ incorrect arguments ⚠️ - missing args on toggle:keybind") end
            groupbox.Size += UDim2.new(0, 0, 0, 20)
            local next = false
            
            local keybind = Instance.new("Frame")
            local text = Instance.new("TextLabel")
            local button = Instance.new("TextButton")

            keybind.Parent = grouper
            keybind.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            keybind.BackgroundTransparency = 1.000
            keybind.BorderSizePixel = 0
            keybind.Size = UDim2.new(1, 0, 0, 20)
            
            text.Parent = keybind
            text.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            text.BackgroundTransparency = 1.000
            text.Position = UDim2.new(0.02, -1, 0, 10)
            text.Font = Enum.Font.Code
            text.Text = args.text or args.flag
            text.TextColor3 = Color3.fromRGB(244, 244, 244)
            text.TextSize = 13.000
            text.TextStrokeTransparency = 0.000
            text.TextXAlignment = Enum.TextXAlignment.Left
            
            button.Parent = keybind
            button.BackgroundColor3 = Color3.fromRGB(187, 131, 255)
            button.BackgroundTransparency = 1.000
            button.BorderSizePixel = 0
            button.Position = UDim2.new(7.09711117e-08, 0, 0, 0)
            button.Size = UDim2.new(0.02, 0, 1, 0)
            button.Font = Enum.Font.Code
            button.Text = "--"
            button.TextColor3 = Color3.fromRGB(155, 155, 155)
            button.TextSize = 13.000
            button.TextStrokeTransparency = 0.000
            button.TextXAlignment = Enum.TextXAlignment.Right

            function updateValue(val)
                if library.colorpicking then return end
                library.flags[args.flag] = val
                button.Text = keyNames[val] or val.Name
            end
            inputService.InputBegan:Connect(function(key)
                local key = key.KeyCode == Enum.KeyCode.Unknown and key.UserInputType or key.KeyCode
                if next then
                    if not table.find(library.blacklisted,key) then
                        next = false
                        library.flags[args.flag] = key
                        button.Text = keyNames[key] or key.Name
                        button.TextColor3 = Color3.fromRGB(155, 155, 155)
                    end
                end
                if not next and key == library.flags[args.flag] and args.callback then
                    args.callback()
                end
            end)

            button.MouseButton1Click:Connect(function()
                if library.colorpicking then return end
                library.flags[args.flag] = Enum.KeyCode.Unknown
                button.Text = "..."
                button.TextColor3 = Color3.new(0.2,0.2,0.2)
                next = true
            end)

            library.flags[args.flag] = Enum.KeyCode.Unknown
            library.options[args.flag] = {type = "keybind",changeState = updateValue,skipflag = args.skipflag,oldargs = args}

            updateValue(args.key or Enum.KeyCode.Unknown)
        end
        return group, groupbox
    end
    return tab
end

function contains(list, x)
	for _, v in pairs(list) do
		if v == x then return true end
	end
	return false
end

function library:createConfig()
    local name = library.flags["config_name"]
    if contains(library.options["selected_config"].values, name) then return library:notify(name..".cfg already exists!") end
    if name == "" then return library:notify("Put a name retard") end
    local jig = {}
    for i,v in next, library.flags do
        if library.options[i].skipflag then continue end
        if typeof(v) == "Color3" then
            jig[i] = {v.R,v.G,v.B}
        elseif typeof(v) == "EnumItem" then
            jig[i] = {string.split(tostring(v),".")[2],string.split(tostring(v),".")[3]}
        else
            jig[i] = v
        end
    end
    writefile("chaos.win/"..name..".cfg",game:GetService("HttpService"):JSONEncode(jig))
    library:notify("Succesfully created config "..name..".cfg!")
    library:refreshConfigs()
end

function library:saveConfig()
    local name = library.flags["selected_config"]
    local jig = {}
    for i,v in next, library.flags do
        if library.options[i].skipflag then continue end
        if typeof(v) == "Color3" then
            jig[i] = {v.R,v.G,v.B}
        elseif typeof(v) == "EnumItem" then
            jig[i] = {string.split(tostring(v),".")[2],string.split(tostring(v),".")[3]}
        else
            jig[i] = v
        end
    end
    writefile(library.flags["selected_config"],game:GetService("HttpService"):JSONEncode(jig))
    library:notify("Succesfully updated config "..name..".cfg!")
    library:refreshConfigs()
end

function library:loadConfig()
    local name = library.flags["selected_config"]
    if not isfile(name) then
        library:notify("Config file not found!")
        return
    end
    local config = game:GetService("HttpService"):JSONDecode(readfile("chaos.win/"..name..".cfg"))
    for i,v in next, library.options do
        spawn(function()pcall(function()
            if config[i] then
                if v.type == "colorpicker" then
                    v.changeState(Color3.new(config[i][1],config[i][2],config[i][3]))
                elseif v.type == "keybind" then
                    v.changeState(Enum[config[i][1]][config[i][2]])
                else
                    if config[i] ~= library.flags[i] then
                        v.changeState(config[i])
                    end
                end
            else
                if v.type == "toggle" then
                    v.changeState(false)
                elseif v.type == "slider" then
                    v.changeState(v.args.value or 0)
                elseif v.type == "textbox" or v.type == "list" or v.type == "cfg" then
                    v.changeState(v.args.value or v.args.text or "")
                elseif v.type == "colorpicker" then
                    v.changeState(v.args.color or Color3.new(1,1,1))
                elseif option.type == "list" then
                    v.changeState("")
                elseif option.type == "keybind" then
                    v.changeState(v.args.key or Enum.KeyCode.Unknown)
                end
            end
        end)end)
    end
    library:notify("Succesfully loaded config "..name..".cfg!")
end

function library:refreshConfigs()
    local tbl = {}
    for i,v in next, listfiles("chaos.win") do
        table.insert(tbl,v)
    end
    library.options["selected_config"].refresh(tbl)
end

function library:deleteConfig()
    if library.flags["selected_config"] then
        delfile(library.flags["selected_config"])
        library:refreshConfigs()
    end
end

local kysTab = library:addTab("")
local aimbotTab = library:addTab("COMBAT")
local espTab = library:addTab("ESP")
local miscTab = library:addTab("Misc")
local movementTab = library:addTab("PLAYER")
local configTab = library:addTab("SETTINGS")




--PLAYER SECTION SHIT

local movementsection = movementTab:createGroup('left', 'MOVEMENT')
local skibidisection = movementTab:createGroup('center', 'SCREEN EFFECTS')

skibidisection:addButton({
    text = "LSD Mode",
    callback = function(value)
        Frame.Visible = value -- The frame's visibility is controlled by the toggle
        colorCorrection.Enabled = value -- Enable or disable the color correction
        blur.Enabled = value -- Enable or disable the blur
        if value then
            colorCorrection.Saturation = -1 -- Make everything black and white
            blur.Size = 30 -- Increase this value for more blur
            while Frame.Visible do
                for i, color in ipairs(colors) do
                    if not Frame.Visible then break end
                    Frame.BackgroundColor3 = color
                    wait(0.01) -- Adjust this value to change the speed of the flashing
                end
            end
        else
            colorCorrection.Saturation = 0 -- Reset saturation
            blur.Size = 0 -- Reset blur
        end
    
    
    end})


skibidisection:addButton({
    text = "120 FOV",
    callback = function(value)
        local A_1 = 
        {
            ["VisualSettings"] = 
        {
            ["ToggleDof"] = false, 
            ["GlassShatter"] = true, 
            ["ToggleADSDof"] = false, 
            ["Sparks"] = true, 
            ["Blood"] = true
        }, 
            ["GameplaySettings"] = 
        {
            ["ToggleInteractionHighlight"] = true, 
            ["ToggleCrouch"] = false, 
            ["ToggleKeybindHints"] = true, 
            ["ToggleSprint"] = false, 
            ["FilmMakerMode"] = false, 
            ["DefaultFOV"] = 120
        }, 
        }
        local Event = game:GetService("ReplicatedStorage").Remotes.UpdateSettings
        Event:FireServer(A_1)
    end
})


skibidisection:addToggle({
    name = "Skinchanger",
    flag = "Skinchanger",
    callback = function(value)
        if rp:FindFirstChild("Players") and rp.Players:FindFirstChild(LC.Name) then
            local plr = rp.Players:FindFirstChild(LC.Name)
            for i,v in plr:GetDescendants() do
                if v:FindFirstChild("ItemProperties") and skins[v.Name] then
                    v.ItemProperties:SetAttribute("Skin", skins[v.Name])
                end
            end
        end
    end
}) 


skibidisection:addToggle({
    name = "No Screen Effects",
    flag = "No Screen Effects",
    callback = function(value)
        values.enabled["noScreenEffects"] = value
		while values.enabled["noScreenEffects"] do task.wait(0.1)
		local pg = LC.PlayerGui
			if pg and pg:FindFirstChild("MainGui") and pg.MainGui:FindFirstChild("MainFrame") and pg.MainGui.MainFrame:FindFirstChild("ScreenEffects") then
				for i,v in ipairs(LC.PlayerGui.MainGui.MainFrame.ScreenEffects:GetChildren()) do
					if v:IsA("Frame") then
						v.Visible = false
					end
				end
			end
		end
    end
}) 

skibidisection:addToggle({
    name = "Third Person (Mouse Wheel)",
    flag = "Third Person (Mouse Wheel)",
    callback = function(value)
        game.Players.LocalPlayer.CameraMode = Enum.CameraMode.Classic game.Players.LocalPlayer.CameraMaxZoomDistance = 128 game.Players.LocalPlayer.CameraMinZoomDistance = 0.5
    end})





skibidisection:addToggle({
    name = "Zoom",
    flag = "Zoom",
    callback = function(value)
        local oldZoom = game.Workspace.CurrentCamera.FieldOfView

        local Settings = {
            ZoomTime = 0.2,
            ZoomedAmount = 7
        }
        
        local function createZoom(time, amount)
            local Tween_Info = TweenInfo.new(time, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut) 
            local Tween = game:GetService("TweenService"):Create(game.Workspace.CurrentCamera, Tween_Info, {FieldOfView = amount})
            return Tween
        end
        
        game:GetService("UserInputService").InputBegan:Connect(function(input)
            if input.KeyCode == Enum.KeyCode.C then
                createZoom(Settings.ZoomTime, Settings.ZoomedAmount):Play()
            end
        end)
        
        game:GetService("UserInputService").InputEnded:Connect(function(input)
            if input.KeyCode == Enum.KeyCode.C then
                createZoom(Settings.ZoomTime, oldZoom):Play()
            end
        end)                                                                                        
    end
})



skibidisection:addToggle({
    name = "Freecam (Shift + P)",
    flag = "Freecam (Shift + P)",
    callback = function(value)
        -----------------------------------------------------------------------
-- Freecam
-- Cinematic free camera for spectating and video production.
-- Shift+P to toggle freecam
-- Q and E to go up and down
-- Have fun!
------------------------------------------------------------------------
 
function sandbox(var,func)
    local env = getfenv(func)
    local newenv = setmetatable({},{
    __index = function(self,k)
    if k=="script" then
    return var
    else
    return env[k]
    end
    end,
    })
    setfenv(func,newenv)
    return func
    end
    cors = {}
    mas = Instance.new("Model",game:GetService("Lighting"))
    LocalScript0 = Instance.new("LocalScript")
    LocalScript0.Name = "FreeCamera"
    LocalScript0.Parent = mas
    table.insert(cors,sandbox(LocalScript0,function()
     
    local pi    = math.pi
    local abs   = math.abs
    local clamp = math.clamp
    local exp   = math.exp
    local rad   = math.rad
    local sign  = math.sign
    local sqrt  = math.sqrt
    local tan   = math.tan
     
    local ContextActionService = game:GetService("ContextActionService")
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local StarterGui = game:GetService("StarterGui")
    local UserInputService = game:GetService("UserInputService")
     
    local LocalPlayer = Players.LocalPlayer
    if not LocalPlayer then
    Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
    LocalPlayer = Players.LocalPlayer
    end
     
    local Camera = workspace.CurrentCamera
    workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
    local newCamera = workspace.CurrentCamera
    if newCamera then
    Camera = newCamera
    end
    end)
     
    ------------------------------------------------------------------------
     
    local TOGGLE_INPUT_PRIORITY = Enum.ContextActionPriority.Low.Value
    local INPUT_PRIORITY = Enum.ContextActionPriority.High.Value
    local FREECAM_MACRO_KB = {Enum.KeyCode.LeftShift, Enum.KeyCode.P}
     
    local NAV_GAIN = Vector3.new(1, 1, 1)*64
    local PAN_GAIN = Vector2.new(0.75, 1)*8
    local FOV_GAIN = 300
     
    local PITCH_LIMIT = rad(90)
     
    local VEL_STIFFNESS = 1.5
    local PAN_STIFFNESS = 1.0
    local FOV_STIFFNESS = 4.0
     
    ------------------------------------------------------------------------
     
    local Spring = {} do
    Spring.__index = Spring
     
    function Spring.new(freq, pos)
    local self = setmetatable({}, Spring)
    self.f = freq
    self.p = pos
    self.v = pos*0
    return self
    end
     
    function Spring:Update(dt, goal)
    local f = self.f*2*pi
    local p0 = self.p
    local v0 = self.v
     
    local offset = goal - p0
    local decay = exp(-f*dt)
     
    local p1 = goal + (v0*dt - offset*(f*dt + 1))*decay
    local v1 = (f*dt*(offset*f - v0) + v0)*decay
     
    self.p = p1
    self.v = v1
     
    return p1
    end
     
    function Spring:Reset(pos)
    self.p = pos
    self.v = pos*0
    end
    end
     
    ------------------------------------------------------------------------
     
    local cameraPos = Vector3.new()
    local cameraRot = Vector2.new()
    local cameraFov = 0
     
    local velSpring = Spring.new(VEL_STIFFNESS, Vector3.new())
    local panSpring = Spring.new(PAN_STIFFNESS, Vector2.new())
    local fovSpring = Spring.new(FOV_STIFFNESS, 0)
     
    ------------------------------------------------------------------------
     
    local Input = {} do
    local thumbstickCurve do
    local K_CURVATURE = 2.0
    local K_DEADZONE = 0.15
     
    local function fCurve(x)
    return (exp(K_CURVATURE*x) - 1)/(exp(K_CURVATURE) - 1)
    end
     
    local function fDeadzone(x)
    return fCurve((x - K_DEADZONE)/(1 - K_DEADZONE))
    end
     
    function thumbstickCurve(x)
    return sign(x)*clamp(fDeadzone(abs(x)), 0, 1)
    end
    end
     
    local gamepad = {
    ButtonX = 0,
    ButtonY = 0,
    DPadDown = 0,
    DPadUp = 0,
    ButtonL2 = 0,
    ButtonR2 = 0,
    Thumbstick1 = Vector2.new(),
    Thumbstick2 = Vector2.new(),
    }
     
    local keyboard = {
    W = 0,
    A = 0,
    S = 0,
    D = 0,
    E = 0,
    Q = 0,
    U = 0,
    H = 0,
    J = 0,
    K = 0,
    I = 0,
    Y = 0,
    Up = 0,
    Down = 0,
    LeftShift = 0,
    RightShift = 0,
    }
     
    local mouse = {
    Delta = Vector2.new(),
    MouseWheel = 0,
    }
     
    local NAV_GAMEPAD_SPEED  = Vector3.new(1, 1, 1)
    local NAV_KEYBOARD_SPEED = Vector3.new(1, 1, 1)
    local PAN_MOUSE_SPEED    = Vector2.new(1, 1)*(pi/64)
    local PAN_GAMEPAD_SPEED  = Vector2.new(1, 1)*(pi/8)
    local FOV_WHEEL_SPEED    = 1.0
    local FOV_GAMEPAD_SPEED  = 0.25
    local NAV_ADJ_SPEED      = 0.75
    local NAV_SHIFT_MUL      = 0.25
     
    local navSpeed = 1
     
    function Input.Vel(dt)
    navSpeed = clamp(navSpeed + dt*(keyboard.Up - keyboard.Down)*NAV_ADJ_SPEED, 0.01, 4)
     
    local kGamepad = Vector3.new(
    thumbstickCurve(gamepad.Thumbstick1.x),
    thumbstickCurve(gamepad.ButtonR2) - thumbstickCurve(gamepad.ButtonL2),
    thumbstickCurve(-gamepad.Thumbstick1.y)
    )*NAV_GAMEPAD_SPEED
     
    local kKeyboard = Vector3.new(
    keyboard.D - keyboard.A + keyboard.K - keyboard.H,
    keyboard.E - keyboard.Q + keyboard.I - keyboard.Y,
    keyboard.S - keyboard.W + keyboard.J - keyboard.U
    )*NAV_KEYBOARD_SPEED
     
    local shift = UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) or UserInputService:IsKeyDown(Enum.KeyCode.RightShift)
     
    return (kGamepad + kKeyboard)*(navSpeed*(shift and NAV_SHIFT_MUL or 1))
    end
     
    function Input.Pan(dt)
    local kGamepad = Vector2.new(
    thumbstickCurve(gamepad.Thumbstick2.y),
    thumbstickCurve(-gamepad.Thumbstick2.x)
    )*PAN_GAMEPAD_SPEED
    local kMouse = mouse.Delta*PAN_MOUSE_SPEED
    mouse.Delta = Vector2.new()
    return kGamepad + kMouse
    end
     
    function Input.Fov(dt)
    local kGamepad = (gamepad.ButtonX - gamepad.ButtonY)*FOV_GAMEPAD_SPEED
    local kMouse = mouse.MouseWheel*FOV_WHEEL_SPEED
    mouse.MouseWheel = 0
    return kGamepad + kMouse
    end
     
    do
    local function Keypress(action, state, input)
    keyboard[input.KeyCode.Name] = state == Enum.UserInputState.Begin and 1 or 0
    return Enum.ContextActionResult.Sink
    end
     
    local function GpButton(action, state, input)
    gamepad[input.KeyCode.Name] = state == Enum.UserInputState.Begin and 1 or 0
    return Enum.ContextActionResult.Sink
    end
     
    local function MousePan(action, state, input)
    local delta = input.Delta
    mouse.Delta = Vector2.new(-delta.y, -delta.x)
    return Enum.ContextActionResult.Sink
    end
     
    local function Thumb(action, state, input)
    gamepad[input.KeyCode.Name] = input.Position
    return Enum.ContextActionResult.Sink
    end
     
    local function Trigger(action, state, input)
    gamepad[input.KeyCode.Name] = input.Position.z
    return Enum.ContextActionResult.Sink
    end
     
    local function MouseWheel(action, state, input)
    mouse[input.UserInputType.Name] = -input.Position.z
    return Enum.ContextActionResult.Sink
    end
     
    local function Zero(t)
    for k, v in pairs(t) do
    t[k] = v*0
    end
    end
     
    function Input.StartCapture()
    ContextActionService:BindActionAtPriority("FreecamKeyboard", Keypress, false, INPUT_PRIORITY,
    Enum.KeyCode.W, Enum.KeyCode.U,
    Enum.KeyCode.A, Enum.KeyCode.H,
    Enum.KeyCode.S, Enum.KeyCode.J,
    Enum.KeyCode.D, Enum.KeyCode.K,
    Enum.KeyCode.E, Enum.KeyCode.I,
    Enum.KeyCode.Q, Enum.KeyCode.Y,
    Enum.KeyCode.Up, Enum.KeyCode.Down
    )
    ContextActionService:BindActionAtPriority("FreecamMousePan",          MousePan,   false, INPUT_PRIORITY, Enum.UserInputType.MouseMovement)
    ContextActionService:BindActionAtPriority("FreecamMouseWheel",        MouseWheel, false, INPUT_PRIORITY, Enum.UserInputType.MouseWheel)
    ContextActionService:BindActionAtPriority("FreecamGamepadButton",     GpButton,   false, INPUT_PRIORITY, Enum.KeyCode.ButtonX, Enum.KeyCode.ButtonY)
    ContextActionService:BindActionAtPriority("FreecamGamepadTrigger",    Trigger,    false, INPUT_PRIORITY, Enum.KeyCode.ButtonR2, Enum.KeyCode.ButtonL2)
    ContextActionService:BindActionAtPriority("FreecamGamepadThumbstick", Thumb,      false, INPUT_PRIORITY, Enum.KeyCode.Thumbstick1, Enum.KeyCode.Thumbstick2)
    end
     
    function Input.StopCapture()
    navSpeed = 1
    Zero(gamepad)
    Zero(keyboard)
    Zero(mouse)
    ContextActionService:UnbindAction("FreecamKeyboard")
    ContextActionService:UnbindAction("FreecamMousePan")
    ContextActionService:UnbindAction("FreecamMouseWheel")
    ContextActionService:UnbindAction("FreecamGamepadButton")
    ContextActionService:UnbindAction("FreecamGamepadTrigger")
    ContextActionService:UnbindAction("FreecamGamepadThumbstick")
    end
    end
    end
     
    local function GetFocusDistance(cameraFrame)
    local znear = 0.1
    local viewport = Camera.ViewportSize
    local projy = 2*tan(cameraFov/2)
    local projx = viewport.x/viewport.y*projy
    local fx = cameraFrame.rightVector
    local fy = cameraFrame.upVector
    local fz = cameraFrame.lookVector
     
    local minVect = Vector3.new()
    local minDist = 512
     
    for x = 0, 1, 0.5 do
    for y = 0, 1, 0.5 do
    local cx = (x - 0.5)*projx
    local cy = (y - 0.5)*projy
    local offset = fx*cx - fy*cy + fz
    local origin = cameraFrame.p + offset*znear
    local part, hit = workspace:FindPartOnRay(Ray.new(origin, offset.unit*minDist))
    local dist = (hit - origin).magnitude
    if minDist > dist then
    minDist = dist
    minVect = offset.unit
    end
    end
    end
     
    return fz:Dot(minVect)*minDist
    end
     
    ------------------------------------------------------------------------
     
    local function StepFreecam(dt)
    local vel = velSpring:Update(dt, Input.Vel(dt))
    local pan = panSpring:Update(dt, Input.Pan(dt))
    local fov = fovSpring:Update(dt, Input.Fov(dt))
     
    local zoomFactor = sqrt(tan(rad(70/2))/tan(rad(cameraFov/2)))
     
    cameraFov = clamp(cameraFov + fov*FOV_GAIN*(dt/zoomFactor), 1, 120)
    cameraRot = cameraRot + pan*PAN_GAIN*(dt/zoomFactor)
    cameraRot = Vector2.new(clamp(cameraRot.x, -PITCH_LIMIT, PITCH_LIMIT), cameraRot.y%(2*pi))
     
    local cameraCFrame = CFrame.new(cameraPos)*CFrame.fromOrientation(cameraRot.x, cameraRot.y, 0)*CFrame.new(vel*NAV_GAIN*dt)
    cameraPos = cameraCFrame.p
     
    Camera.CFrame = cameraCFrame
    Camera.Focus = cameraCFrame*CFrame.new(0, 0, -GetFocusDistance(cameraCFrame))
    Camera.FieldOfView = cameraFov
    end
     
    ------------------------------------------------------------------------
     
    local PlayerState = {} do
    local mouseIconEnabled
    local cameraSubject
    local cameraType
    local cameraFocus
    local cameraCFrame
    local cameraFieldOfView
    local screenGuis = {}
    local coreGuis = {
    Backpack = true,
    Chat = true,
    Health = true,
    PlayerList = true,
    }
    local setCores = {
    BadgesNotificationsActive = true,
    PointsNotificationsActive = true,
    }
     
    -- Save state and set up for freecam
    function PlayerState.Push()
    for name in pairs(coreGuis) do
    coreGuis[name] = StarterGui:GetCoreGuiEnabled(Enum.CoreGuiType[name])
    StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType[name], false)
    end
    for name in pairs(setCores) do
    setCores[name] = StarterGui:GetCore(name)
    StarterGui:SetCore(name, false)
    end
    local playergui = LocalPlayer:FindFirstChildOfClass("PlayerGui")
    if playergui then
    for _, gui in pairs(playergui:GetChildren()) do
    if gui:IsA("ScreenGui") and gui.Enabled then
    screenGuis[#screenGuis + 1] = gui
    gui.Enabled = false
    end
    end
    end
     
    cameraFieldOfView = Camera.FieldOfView
    Camera.FieldOfView = 70
     
    cameraType = Camera.CameraType
    Camera.CameraType = Enum.CameraType.Custom
     
    cameraSubject = Camera.CameraSubject
    Camera.CameraSubject = nil
     
    cameraCFrame = Camera.CFrame
    cameraFocus = Camera.Focus
     
    mouseIconEnabled = UserInputService.MouseIconEnabled
    UserInputService.MouseIconEnabled = false
     
    mouseBehavior = UserInputService.MouseBehavior
    UserInputService.MouseBehavior = Enum.MouseBehavior.Default
    end
     
    -- Restore state
    function PlayerState.Pop()
    for name, isEnabled in pairs(coreGuis) do
    StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType[name], isEnabled)
    end
    for name, isEnabled in pairs(setCores) do
    StarterGui:SetCore(name, isEnabled)
    end
    for _, gui in pairs(screenGuis) do
    if gui.Parent then
    gui.Enabled = true
    end
    end
     
    Camera.FieldOfView = cameraFieldOfView
    cameraFieldOfView = nil
     
    Camera.CameraType = cameraType
    cameraType = nil
     
    Camera.CameraSubject = cameraSubject
    cameraSubject = nil
     
    Camera.CFrame = cameraCFrame
    cameraCFrame = nil
     
    Camera.Focus = cameraFocus
    cameraFocus = nil
     
    UserInputService.MouseIconEnabled = mouseIconEnabled
    mouseIconEnabled = nil
     
    UserInputService.MouseBehavior = mouseBehavior
    mouseBehavior = nil
    end
    end
     
    local function StartFreecam()
    local cameraCFrame = Camera.CFrame
    cameraRot = Vector2.new(cameraCFrame:toEulerAnglesYXZ())
    cameraPos = cameraCFrame.p
    cameraFov = Camera.FieldOfView
     
    velSpring:Reset(Vector3.new())
    panSpring:Reset(Vector2.new())
    fovSpring:Reset(0)
     
    PlayerState.Push()
    RunService:BindToRenderStep("Freecam", Enum.RenderPriority.Camera.Value, StepFreecam)
    Input.StartCapture()
    end
     
    local function StopFreecam()
    Input.StopCapture()
    RunService:UnbindFromRenderStep("Freecam")
    PlayerState.Pop()
    end
     
    ------------------------------------------------------------------------
     
    do
    local enabled = false
     
    local function ToggleFreecam()
    if enabled then
    StopFreecam()
    else
    StartFreecam()
    end
    enabled = not enabled
    end
     
    local function CheckMacro(macro)
    for i = 1, #macro - 1 do
    if not UserInputService:IsKeyDown(macro[i]) then
    return
    end
    end--Made by N3xul
    local runDummyScript = function(f,scri)
    local oldenv = getfenv(f)
    local newenv = setmetatable({}, {
    __index = function(_, k)
    if k:lower() == 'script' then
    return scri
    else
    return oldenv[k]
    end
    end
    })
    setfenv(f, newenv)
    ypcall(function() f() end)
    end
    cors = {}
    mas = Instance.new("Model",game:GetService("Lighting")) 
    mas.Name = "CompiledModel"
    o1 = Instance.new("ScreenGui")
    o2 = Instance.new("Frame")
    o3 = Instance.new("TextButton")
    o4 = Instance.new("TextButton")
    o5 = Instance.new("TextLabel")
    o6 = Instance.new("ImageButton")
    o7 = Instance.new("LocalScript")
    o1.Name = "SpectateGui"
    o1.Parent = mas
    o2.Name = "Bar"
    o2.Parent = o1
    o2.Position = UDim2.new(-1,-100,0.87999999523163,-50)
    o2.Size = UDim2.new(0,200,0,50)
    o2.Position = UDim2.new(-1,-100,0.87999999523163,-50)
    o2.BackgroundColor3 = Color3.new(0, 0, 0)
    o2.BackgroundTransparency = 0.20000000298023
    o2.BorderSizePixel = 5
    o3.Name = "Previous"
    o3.Parent = o2
    o3.Size = UDim2.new(0.25,0,1,0)
    o3.Text = "<"
    o3.BackgroundColor3 = Color3.new(0.52549, 0.52549, 0.52549)
    o3.BorderColor3 = Color3.new(0.509804, 0.796079, 1)
    o3.BorderSizePixel = 0
    o3.Font = Enum.Font.SourceSans
    o3.FontSize = Enum.FontSize.Size48
    o3.TextColor3 = Color3.new(1, 1, 1)
    o4.Name = "Next"
    o4.Parent = o2
    o4.Position = UDim2.new(1,0,0,0)
    o4.Size = UDim2.new(-0.25,0,1,0)
    o4.Text = ">"
    o4.Position = UDim2.new(1,0,0,0)
    o4.BackgroundColor3 = Color3.new(0.52549, 0.52549, 0.52549)
    o4.BorderColor3 = Color3.new(0.509804, 0.796079, 1)
    o4.BorderSizePixel = 0
    o4.Font = Enum.Font.SourceSans
    o4.FontSize = Enum.FontSize.Size48
    o4.TextColor3 = Color3.new(1, 1, 1)
    o5.Name = "Title"
    o5.Parent = o2
    o5.Position = UDim2.new(0.27500000596046,0,0,0)
    o5.Size = UDim2.new(0.44999998807907,0,1,0)
    o5.Text = ""
    o5.Position = UDim2.new(0.27500000596046,0,0,0)
    o5.BackgroundColor3 = Color3.new(1, 1, 1)
    o5.BackgroundTransparency = 1
    o5.Font = Enum.Font.SourceSans
    o5.FontSize = Enum.FontSize.Size14
    o5.TextColor3 = Color3.new(1, 1, 1)
    o5.TextScaled = true
    o5.TextWrapped = true
    o6.Name = "Button"
    o6.Parent = o1
    o6.Position = UDim2.new(0,0,0.5,-25)
    o6.Size = UDim2.new(0,50,0,50)
    o6.Position = UDim2.new(0,0,0.5,-25)
    o6.BackgroundColor3 = Color3.new(1, 1, 1)
    o6.BackgroundTransparency = 0.30000001192093
    o6.BorderSizePixel = 5
    o6.Image = "http://www.roblox.com/asset/?id=176106970"
    o7.Parent = o1
    table.insert(cors,coroutine.create(function()
    wait()
    runDummyScript(function()
    -- By super10099
     
    cam = game.Workspace.CurrentCamera
     
    local bar = script.Parent.Bar
    local title = bar.Title
    local prev = bar.Previous
    local nex = bar.Next
    local button = script.Parent.Button
     
    function get()
        for _,v in pairs(game.Players:GetPlayers())do
            if v.Name == title.Text then
                return(_)
            end
        end
    end
     
     
    local debounce = false
    button.MouseButton1Click:connect(function()
        if debounce == false then debounce = true
            bar:TweenPosition(UDim2.new(.5,-100,0.88,-50),"In","Linear",1,true)
            pcall(function()
                    title.Text = game.Players:GetPlayerFromCharacter(cam.CameraSubject.Parent).Name
            end)
        elseif debounce == true then debounce = false
            pcall(function() cam.CameraSubject = game.Players.LocalPlayer.Character.Humanoid end)
                bar:TweenPosition(UDim2.new(-1,-100,0.88,-50),"In","Linear",1,true)
            end
    end)
     
    prev.MouseButton1Click:connect(function()
        wait(.1)
        local players = game.Players:GetPlayers()
        local num = get()
        if not pcall(function() 
            cam.CameraSubject = players[num-1].Character.Humanoid
            end) then
            cam.CameraSubject = players[#players].Character.Humanoid
        end
    pcall(function()
                    title.Text = game.Players:GetPlayerFromCharacter(cam.CameraSubject.Parent).Name
            end)
    end)
     
    nex.MouseButton1Click:connect(function()
        wait(.1)
        local players = game.Players:GetPlayers()
        local num = get()
        if not pcall(function() 
            cam.CameraSubject = players[num+1].Character.Humanoid
            end) then
            cam.CameraSubject = players[1].Character.Humanoid
        end
    pcall(function()
                    title.Text = game.Players:GetPlayerFromCharacter(cam.CameraSubject.Parent).Name
            end)
    end)
     
     
    end,o7)
    end))
    mas.Parent = workspace
    mas:MakeJoints()
    local mas1 = mas:GetChildren()
    for i=1,#mas1 do
        mas1[i].Parent = game:GetService("Players").LocalPlayer.PlayerGui 
        ypcall(function() mas1[i]:MakeJoints() end)
    end
    mas:Destroy()
    for i=1,#cors do
    coroutine.resume(cors[i])
    end
    ToggleFreecam()
    end
     
    local function HandleActivationInput(action, state, input)
    if state == Enum.UserInputState.Begin then
    if input.KeyCode == FREECAM_MACRO_KB[#FREECAM_MACRO_KB] then
    CheckMacro(FREECAM_MACRO_KB)
    end
    end
    return Enum.ContextActionResult.Pass
    end
     
    ContextActionService:BindActionAtPriority("FreecamToggle", HandleActivationInput, false, TOGGLE_INPUT_PRIORITY, FREECAM_MACRO_KB[#FREECAM_MACRO_KB])
    end
    end))
    for i,v in pairs(mas:GetChildren()) do
    v.Parent = game:GetService("Players").LocalPlayer.PlayerGui
    pcall(function() v:MakeJoints() end)
    end
    mas:Destroy()
    for i,v in pairs(cors) do
    spawn(function()
    pcall(v)
    end)
    end
     
    end})



    movementsection:addToggle({
        name = "jesus",
        flag = "jesusToggleFlag",
        Callback = function(value)
            values.enabled["jesus"] = value
    
            local character = LC.Character or LC.CharacterAdded:Wait()
            local part = character:FindFirstChild("Head")
            local rayparams = RaycastParams.new()
            rayparams.FilterType = Enum.RaycastFilterType.Exclude
    
            rayparams.FilterDescendantsInstances = {character}
    
            if not values.enabled["jesus"] then
                for i,v in pairs(jesusFolder:GetChildren()) do
                    if v then v:Destroy() end
                end
                return
            end
    
            while values.enabled["jesus"] do task.wait(0.1)
                if not values.enabled["jesus"] or not character then continue end
                if camera:FindFirstChild("ViewModel") then
                    rayparams.FilterDescendantsInstances = {character, camera.ViewModel}
                end
                local rayOrigin = part.Position + Vector3.new(0, 150, 0) + camera.CFrame.LookVector * 5
                local rayDirection = Vector3.new(0, -300, 0)
                local rayres = workspace:Raycast(rayOrigin, rayDirection, rayparams)
                if rayres and rayres.Material == Enum.Material.Water then
                    local platform = Instance.new("Part", jesusFolder) platform.Size = Vector3.new(500,1,500); platform.Anchored = true; platform.CanQuery = false; platform.CanTouch = false
                    platform.Position = rayres.Position; platform.Material = Enum.Material.ForceField
                    task.wait(1)
                end
            end
        end
    })



movementsection:addToggle({
    name = "AntiAim (kinda?)",
    flag = "Antiaim (fish :3)",
    callback = function(value)
        values.enabled["helicopter"] = value

        local humanoid = LC.Character:FindFirstChildWhichIsA("Humanoid")
        if not humanoid then  return end

        if value then
            local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
            local anim1 = Instance.new("Animation")
            anim1.AnimationId = "rbxassetid://5918726674"

            local anim2 = Instance.new("Animation")
            anim2.AnimationId = "rbxassetid://15554016057"

            local hum = char:WaitForChild("Humanoid")
            loadedAnim1 = hum:LoadAnimation(anim1)
            loadedAnim2 = hum:LoadAnimation(anim2)
            loadedAnim1:AdjustSpeed(100000)
            loadedAnim2:AdjustSpeed(100000)

            connection = task.spawn(function()
                while values.enabled["helicopter"] do
                    loadedAnim1:Play()
                    task.wait(0.08)
                    loadedAnim1:Stop()

                    loadedAnim2:Play()
                    task.wait(0.08)
                    loadedAnim2:Stop()
                end
            end)
        else
            if connection then
                task.cancel(connection)
            end
            if loadedAnim1 and loadedAnim2 then
                loadedAnim1:Stop()
                loadedAnim2:Stop()
            end
        end
    end
})
       



movementsection:addToggle({
    name = "ClientBring (U)",
    flag = "Clientbring (U)",
    callback = function(value)
        if value then
            pcall(function()
                getgenv().hhhhhhh = nil
            end)

            getgenv().hhhhhhh = {}
            local Environment = getgenv().hhhhhhh

            local inCamera = workspace.CurrentCamera
            local inRunService = game:GetService("RunService")
            local inUIS = game:GetService("UserInputService")
            local inEntities = game:GetService("Players")
            local inLocalPlayer = inEntities.LocalPlayer
            local inMouse = inLocalPlayer:GetMouse()

            local Title = [[chaos client bring]]
            local Desc = [[Fuck Campers]]

            Environment.Settings = {
                Enabled = false,
                TriggerKey = Enum.KeyCode.U,
                Radius = 2000
            }

            inUIS.InputBegan:Connect(function(Input, process)
                if process then return end
            
                if Input.KeyCode == Environment.Settings.TriggerKey then
                    Environment.Settings.Enabled = not Environment.Settings.Enabled
                    print("ClientBring toggled:", Environment.Settings.Enabled)  -- Debug print statement
                    isLockedOn = false  -- Reset the lock when you toggle the script
                    if not Environment.Settings.Enabled then
                        currentTarget = nil  -- Reset the current target when you toggle off the script
                    end
                end
            end)
            

            local function bypassAnticheat(character)
                -- Custom anticheat bypass logic
                -- This is just a placeholder, replace with the actual bypass logic
                pcall(function()
                    character.HumanoidRootPart.Anchored = true
                    wait(0.1)
                    character.HumanoidRootPart.Anchored = false
                end)
            end

            local function LOADINSHIT()
                inRunService.RenderStepped:Connect(function()
                    local dist = 500
                    local closest_character = nil
                
                    if Environment.Settings.Enabled then
                        for _, v in next, inEntities:GetPlayers() do
                            pcall(function()
                                if v ~= inLocalPlayer and v.Character and v.Character:FindFirstChild('HumanoidRootPart') and v.Character:FindFirstChild('Humanoid') and v.Character.Humanoid.Health > 0 then
                                    local char = v.Character
                                    local char_part_pos, onscreen = inCamera:WorldToViewportPoint(char.HumanoidRootPart.Position)
                    
                                    if onscreen then
                                        local magnitude = (Vector2.new(inMouse.X, inMouse.Y) - Vector2.new(char_part_pos.X, char_part_pos.Y)).Magnitude
                    
                                        if magnitude < dist and magnitude < Environment.Settings.Radius then
                                            dist = magnitude
                                            closest_character = char
                                        end
                                    end
                                end
                            end)
                        end

                        if closest_character and closest_character.Parent and closest_character:FindFirstChild('HumanoidRootPart') and closest_character:FindFirstChild('Humanoid') and closest_character.Humanoid.Health > 0 then
                            if currentTarget == nil or currentTarget == closest_character then
                                local targetPosition = closest_character.HumanoidRootPart.CFrame.Position
                                local targetOrientation = closest_character.HumanoidRootPart.CFrame.LookVector
                                local behindOffset = targetOrientation * -3 -- Adjust the offset value to set the distance behind the target
                                local newPosition = targetPosition + behindOffset
                                inLocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(newPosition, targetPosition) -- Face the target
                                bypassAnticheat(inLocalPlayer.Character)
                                isLockedOn = true  -- Lock onto the target after teleporting
                                currentTarget = closest_character  -- Store the current target
                            end
                        end
                    end
                end)
            end

            LOADINSHIT()
            print('TP TO PLAYER LOADED', Title, Desc)
        end
    end
})




movementsection:addToggle({
    name = "Omnisprint",
    flag = "Omnisprint",
    callback = function(value)
        local Workspace, RunService, Players, CoreGui, Lighting = cloneref(game:GetService("Workspace")), cloneref(game:GetService("RunService")), cloneref(game:GetService("Players")), game:GetService("CoreGui"), cloneref(game:GetService("Lighting"))
local Skybox = loadstring(game:HttpGet("https://raw.githubusercontent.com/BurnHubz/eclipse/main/Skyboxes.lua", true))();

local utilities = {
aimbot = {
    target = nil
},
functions = {}
};

local aimbot = {
enabled = false,
randomisation = 0,
distance = 200,
speed = 0.5,
autoprediction = true,
teamcheck = false,
bone = "Head",
--
fov_circle = false,
dynamic = true,
radius = 120,
position = "Mouse",
--
snapline = false,
snapline_color = Color3.fromRGB(255, 255, 255),
snapline_bone = "HumanoidRootPart",
snapline_from = "Mouse",
};

local Player_Modifications = {
Omni_Sprint = {
    Enabled = true,
    Speed = 25,
},
};

local ESP = {
Enabled = false,
TeamCheck = true,
MaxDistance = 200,
FontSize = 11,
FadeOut = {
    OnDistance = true,
    OnDeath = false,
    OnLeave = false,
},
Options = { 
    Teamcheck = false, TeamcheckRGB = Color3.fromRGB(0, 255, 0),
    Friendcheck = false, FriendcheckRGB = Color3.fromRGB(0, 255, 0),
    Highlight = false, HighlightRGB = Color3.fromRGB(255, 0, 0),
},
Drawing = {
    Chams = {
        Enabled  = false,
        Thermal = true,
        FillRGB = Color3.fromRGB(119, 120, 255),
        Fill_Transparency = 100,
        OutlineRGB = Color3.fromRGB(119, 120, 255),
        Outline_Transparency = 100,
        VisibleCheck = true,
    },
    Names = {
        Enabled = false,
        RGB = Color3.fromRGB(255, 255, 255),
    },
    Flags = {
        Enabled = true,
    },
    Distances = {
        Enabled = false, 
        Position = "Text",
        RGB = Color3.fromRGB(255, 255, 255),
    },
    Weapons = {
        Enabled = false, WeaponTextRGB = Color3.fromRGB(119, 120, 255),
        Outlined = false,
        Icons = true, RGB = Color3.fromRGB(255, 255, 255),
        Gradient = false,
        GradientRGB1 = Color3.fromRGB(255, 255, 255), GradientRGB2 = Color3.fromRGB(119, 120, 255),
    },
    Healthbar = {
        Enabled = false,  
        HealthText = true, Lerp = false, HealthTextRGB = Color3.fromRGB(119, 120, 255),
        Width = 2.5,
        Gradient = true, GradientRGB1 = Color3.fromRGB(200, 0, 0), GradientRGB2 = Color3.fromRGB(60, 60, 125), GradientRGB3 = Color3.fromRGB(119, 120, 255), 
    },
    Boxes = {
        Animate = false,
        RotationSpeed = 300,
        Gradient = false, GradientRGB1 = Color3.fromRGB(119, 120, 255), GradientRGB2 = Color3.fromRGB(0, 0, 0), 
        GradientFill = false, GradientFillRGB1 = Color3.fromRGB(119, 120, 255), GradientFillRGB2 = Color3.fromRGB(0, 0, 0), 
        Filled = {
            Enabled = false,
            Transparency = 0.75,
            RGB = Color3.fromRGB(0, 0, 0),
        },
        Full = {
            Enabled = false,
            RGB = Color3.fromRGB(255, 255, 255),
        },
        Corner = {
            Enabled = false,
            RGB = Color3.fromRGB(255, 255, 255),
        },
    };
};
Items = {
    Enabled = false,
    Icons = false,
    RGB = Color3.fromRGB(255, 255, 255)
},
Connections = {
    RunService = RunService;
};
Fovcircle = {};
Fonts = {};
}

-- Def & Vars
local Euphoria = ESP.Connections;
local lplayer = Players.LocalPlayer;
local camera = game.Workspace.CurrentCamera;
local Cam = Workspace.CurrentCamera;
local RotationAngle, Tick = -45, tick();

-- Weapon Images
local Weapon_Icons = {
["Wooden Bow"] = "http://www.roblox.com/asset/?id=17677465400",
["Crossbow"] = "http://www.roblox.com/asset/?id=17677473017",
["Salvaged SMG"] = "http://www.roblox.com/asset/?id=17677463033",
["Salvaged AK47"] = "http://www.roblox.com/asset/?id=17677455113",
["Salvaged AK74u"] = "http://www.roblox.com/asset/?id=17677442346",
["Salvaged M14"] = "http://www.roblox.com/asset/?id=17677444642",
["Salvaged Python"] = "http://www.roblox.com/asset/?id=17677451737",
["Military PKM"] = "http://www.roblox.com/asset/?id=17677449448",
["Military M4A1"] = "http://www.roblox.com/asset/?id=17677479536",
["Bruno's M4A1"] = "http://www.roblox.com/asset/?id=17677471185",
["Military Barrett"] = "http://www.roblox.com/asset/?id=17677482998",
["Salvaged Skorpion"] = "http://www.roblox.com/asset/?id=17677459658",
["Salvaged Pump Action"] = "http://www.roblox.com/asset/?id=17677457186",
["Military AA12"] = "http://www.roblox.com/asset/?id=17677475227",
["Salvaged Break Action"] = "http://www.roblox.com/asset/?id=17677468751",
["Salvaged Pipe Rifle"] = "http://www.roblox.com/asset/?id=17677468751",
["Salvaged P250"] = "http://www.roblox.com/asset/?id=17677447257",
["Nail Gun"] = "http://www.roblox.com/asset/?id=17677484756"
};

-- Functions
local Functions = {}
do
function Functions:Create(Class, Properties)
    local _Instance = typeof(Class) == 'string' and Instance.new(Class) or Class
    for Property, Value in pairs(Properties) do
        _Instance[Property] = Value
    end
    return _Instance;
end
--
function Functions:GetPlayerTool(Character)
    for _, value in pairs(Character:GetChildren()) do
        if value.Name ~= "HolsterModel" and value:IsA("Model") and value.Name ~= "Hair" and (value:FindFirstChild("Detail") or value:FindFirstChild("Main") or value:FindFirstChild("Handle") or value:FindFirstChild("Attachments") or value:FindFirstChild("ArrowAttach") or value:FindFirstChild("Attach")) and value.PrimaryPart then
            return value.Name;
        end
    end
    return "none"
end    
function Functions:GetPlayerToolImg(Character)
    for _, value in pairs(Character:GetChildren()) do
        if value.Name ~= "HolsterModel" and value:IsA("Model") and value.Name ~= "Hair" and (value:FindFirstChild("Detail") or value:FindFirstChild("Main") or value:FindFirstChild("Handle") or value:FindFirstChild("Attachments") or value:FindFirstChild("ArrowAttach") or value:FindFirstChild("Attach")) and value.PrimaryPart then
            return Weapon_Icons[value.Name] ;
        end
    end
    return nil
end     
--
function Functions:FadeOutOnDist(element, distance)
    local transparency = math.max(0.1, 1 - (distance / ESP.MaxDistance))
    if element:IsA("TextLabel") then
        element.TextTransparency = 1 - transparency
    elseif element:IsA("ImageLabel") then
        element.ImageTransparency = 1 - transparency
    elseif element:IsA("UIStroke") then
        element.Transparency = 1 - transparency
    elseif element:IsA("Frame") and (element == Healthbar or element == BehindHealthbar) then
        element.BackgroundTransparency = 1 - transparency
    elseif element:IsA("Frame") then
        element.BackgroundTransparency = 1 - transparency
    elseif element:IsA("Highlight") then
        element.FillTransparency = 1 - transparency
        element.OutlineTransparency = 1 - transparency
    end;
end;  
end;

do -- Initalize
local ScreenGui = Functions:Create("ScreenGui", {
    Parent = CoreGui,
    Name = "ESPHolder",
});

local DupeCheck = function(plr)
    if ScreenGui:FindFirstChild(plr.Name) then
        ScreenGui[plr.Name]:Destroy()
    end
end

local ESP = function(plr)
    coroutine.wrap(DupeCheck)(plr) -- Dupecheck
    local Name = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, -11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
    local Distance = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
    local Weapon = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
    local Box = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0.75, BorderSizePixel = 0})
    local Gradient1 = Functions:Create("UIGradient", {Parent = Box, Enabled = ESP.Drawing.Boxes.GradientFill, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientFillRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientFillRGB2)}})
    local Outline = Functions:Create("UIStroke", {Parent = Box, Enabled = ESP.Drawing.Boxes.Gradient, Transparency = 0, Color = Color3.fromRGB(255, 255, 255), LineJoinMode = Enum.LineJoinMode.Miter})
    local Gradient2 = Functions:Create("UIGradient", {Parent = Outline, Enabled = ESP.Drawing.Boxes.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientRGB2)}})
    local Healthbar = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 0})
    local BehindHealthbar = Functions:Create("Frame", {Parent = ScreenGui, ZIndex = -1, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0})
    local HealthbarGradient = Functions:Create("UIGradient", {Parent = Healthbar, Enabled = ESP.Drawing.Healthbar.Gradient, Rotation = -90, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Healthbar.GradientRGB1), ColorSequenceKeypoint.new(0.5, ESP.Drawing.Healthbar.GradientRGB2), ColorSequenceKeypoint.new(1, ESP.Drawing.Healthbar.GradientRGB3)}})
    local HealthText = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
    local Chams = Functions:Create("Highlight", {Parent = ScreenGui, FillTransparency = 1, OutlineTransparency = 0, OutlineColor = Color3.fromRGB(119, 120, 255), DepthMode = "AlwaysOnTop"})
    local WeaponIcon = Functions:Create("ImageLabel", {Parent = ScreenGui, BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(0, 40, 0, 40)})
    local Gradient3 = Functions:Create("UIGradient", {Parent = WeaponIcon, Rotation = -90, Enabled = ESP.Drawing.Weapons.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Weapons.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Weapons.GradientRGB2)}})
    local LeftTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local LeftSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local RightTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local RightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local BottomSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local BottomDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local BottomRightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local BottomRightDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local Flag1 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
    local Flag2 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
    --local DroppedItems = Functions:Create("TextLabel", {Parent = ScreenGui, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
    --
    local Updater = function()
        local Connection;
        local function HideESP()
            Box.Visible = false;
            Name.Visible = false;
            Distance.Visible = false;
            Weapon.Visible = false;
            Healthbar.Visible = false;
            BehindHealthbar.Visible = false;
            HealthText.Visible = false;
            WeaponIcon.Visible = false;
            LeftTop.Visible = false;
            LeftSide.Visible = false;
            BottomSide.Visible = false;
            BottomDown.Visible = false;
            RightTop.Visible = false;
            RightSide.Visible = false;
            BottomRightSide.Visible = false;
            BottomRightDown.Visible = false;
            Flag1.Visible = false;
            Chams.Enabled = false;
            Flag2.Visible = false;
            if not plr then
                ScreenGui:Destroy();
                Connection:Disconnect();
            end
        end
        --
        Connection = Euphoria.RunService.RenderStepped:Connect(function()
            --[[ do -- Item ESP
                if ESP.Items.Enabled then
                    for _, debrisPart in pairs(workspace.Debris:GetChildren()) do
                        if debrisPart:IsA("BasePart") then
                            local item_pos = debrisPart.Position
                            local screen_pos, onScreen = Cam:WorldToScreenPoint(item_pos)
                            DroppedItems.Text = debrisPart.Name
                            DroppedItems.Position = UDim2.new(0, screen_pos.X, 0, screen_pos.Y)
                            DroppedItems.Visible = onScreen
                        end
                    end
                else
                    DroppedItems.Visible = false
                end         
            end]]
            --
            if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                local HRP = plr.Character.HumanoidRootPart
                local Humanoid = plr.Character:WaitForChild("Humanoid");
                local Pos, OnScreen = Cam:WorldToScreenPoint(HRP.Position)
                local Dist = (Cam.CFrame.Position - HRP.Position).Magnitude / 3.5714285714
                
                if OnScreen and Dist <= ESP.MaxDistance then
                    local Size = HRP.Size.Y
                    local scaleFactor = (Size * Cam.ViewportSize.Y) / (Pos.Z * 2)
                    local w, h = 3 * scaleFactor, 4.5 * scaleFactor

                    -- Fade-out effect --
                    if ESP.FadeOut.OnDistance then
                        Functions:FadeOutOnDist(Box, Dist)
                        Functions:FadeOutOnDist(Outline, Dist)
                        Functions:FadeOutOnDist(Name, Dist)
                        Functions:FadeOutOnDist(Distance, Dist)
                        Functions:FadeOutOnDist(Weapon, Dist)
                        Functions:FadeOutOnDist(Healthbar, Dist)
                        Functions:FadeOutOnDist(BehindHealthbar, Dist)
                        Functions:FadeOutOnDist(HealthText, Dist)
                        Functions:FadeOutOnDist(WeaponIcon, Dist)
                        Functions:FadeOutOnDist(LeftTop, Dist)
                        Functions:FadeOutOnDist(LeftSide, Dist)
                        Functions:FadeOutOnDist(BottomSide, Dist)
                        Functions:FadeOutOnDist(BottomDown, Dist)
                        Functions:FadeOutOnDist(RightTop, Dist)
                        Functions:FadeOutOnDist(RightSide, Dist)
                        Functions:FadeOutOnDist(BottomRightSide, Dist)
                        Functions:FadeOutOnDist(BottomRightDown, Dist)
                        Functions:FadeOutOnDist(Chams, Dist)
                        Functions:FadeOutOnDist(Flag1, Dist)
                        Functions:FadeOutOnDist(Flag2, Dist)
                    end

                    -- Teamcheck
                    if ESP.TeamCheck and plr ~= lplayer and ((lplayer.Team ~= plr.Team and plr.Team) or (not lplayer.Team and not plr.Team)) and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Humanoid") then

                        do -- Chams
                            Chams.Adornee = plr.Character
                            Chams.Enabled = ESP.Drawing.Chams.Enabled
                            Chams.FillColor = ESP.Drawing.Chams.FillRGB
                            Chams.OutlineColor = ESP.Drawing.Chams.OutlineRGB
                            do -- Breathe
                                if ESP.Drawing.Chams.Thermal then
                                    local breathe_effect = math.atan(math.sin(tick() * 2)) * 2 / math.pi
                                    Chams.FillTransparency = ESP.Drawing.Chams.Fill_Transparency * breathe_effect * 0.01
                                    Chams.OutlineTransparency = ESP.Drawing.Chams.Outline_Transparency * breathe_effect * 0.01
                                end
                            end
                            if ESP.Drawing.Chams.VisibleCheck then
                                Chams.DepthMode = "Occluded"
                            else
                                Chams.DepthMode = "AlwaysOnTop"
                            end
                        end;

                        do -- Corner Boxes
                            LeftTop.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            LeftTop.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                            LeftTop.Size = UDim2.new(0, w / 5, 0, 1)
                            
                            LeftSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            LeftSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                            LeftSide.Size = UDim2.new(0, 1, 0, h / 5)
                            
                            BottomSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            BottomSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                            BottomSide.Size = UDim2.new(0, 1, 0, h / 5)
                            BottomSide.AnchorPoint = Vector2.new(0, 5)
                            
                            BottomDown.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            BottomDown.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                            BottomDown.Size = UDim2.new(0, w / 5, 0, 1)
                            BottomDown.AnchorPoint = Vector2.new(0, 1)
                            
                            RightTop.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            RightTop.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y - h / 2)
                            RightTop.Size = UDim2.new(0, w / 5, 0, 1)
                            RightTop.AnchorPoint = Vector2.new(1, 0)
                            
                            RightSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            RightSide.Position = UDim2.new(0, Pos.X + w / 2 - 1, 0, Pos.Y - h / 2)
                            RightSide.Size = UDim2.new(0, 1, 0, h / 5)
                            RightSide.AnchorPoint = Vector2.new(0, 0)
                            
                            BottomRightSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            BottomRightSide.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                            BottomRightSide.Size = UDim2.new(0, 1, 0, h / 5)
                            BottomRightSide.AnchorPoint = Vector2.new(1, 1)
                            
                            BottomRightDown.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            BottomRightDown.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                            BottomRightDown.Size = UDim2.new(0, w / 5, 0, 1)
                            BottomRightDown.AnchorPoint = Vector2.new(1, 1)                                                            
                        end

                        do -- Boxes
                            Box.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                            Box.Size = UDim2.new(0, w, 0, h)
                            Box.Visible = ESP.Drawing.Boxes.Full.Enabled;

                            -- Gradient
                            if ESP.Drawing.Boxes.Filled.Enabled then
                                Box.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                if ESP.Drawing.Boxes.GradientFill then
                                    Box.BackgroundTransparency = ESP.Drawing.Boxes.Filled.Transparency;
                                else
                                    Box.BackgroundTransparency = 1
                                end
                                Box.BorderSizePixel = 1
                            else
                                Box.BackgroundTransparency = 1
                            end
                            -- Animation
                            RotationAngle = RotationAngle + (tick() - Tick) * ESP.Drawing.Boxes.RotationSpeed * math.cos(math.pi / 4 * tick() - math.pi / 2)
                            if ESP.Drawing.Boxes.Animate then
                                Gradient1.Rotation = RotationAngle
                                Gradient2.Rotation = RotationAngle
                            else
                                Gradient1.Rotation = -45
                                Gradient2.Rotation = -45
                            end
                            Tick = tick()
                        end

                        -- Healthbar
                        do  
                            local health = Humanoid.Health / Humanoid.MaxHealth;
                            Healthbar.Visible = ESP.Drawing.Healthbar.Enabled;
                            Healthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - health))  
                            Healthbar.Size = UDim2.new(0, ESP.Drawing.Healthbar.Width, 0, h * health)  
                            --
                            BehindHealthbar.Visible = ESP.Drawing.Healthbar.Enabled;
                            BehindHealthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2)  
                            BehindHealthbar.Size = UDim2.new(0, ESP.Drawing.Healthbar.Width, 0, h)
                            -- Health Text
                            do
                                if ESP.Drawing.Healthbar.HealthText then
                                    local healthPercentage = math.floor(Humanoid.Health / Humanoid.MaxHealth * 100)
                                    HealthText.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - healthPercentage / 100) + 3)
                                    HealthText.Text = tostring(healthPercentage)
                                    HealthText.Visible = Humanoid.Health < Humanoid.MaxHealth
                                    if ESP.Drawing.Healthbar.Lerp then
                                        local color = health >= 0.75 and Color3.fromRGB(0, 255, 0) or health >= 0.5 and Color3.fromRGB(255, 255, 0) or health >= 0.25 and Color3.fromRGB(255, 170, 0) or Color3.fromRGB(255, 0, 0)
                                        HealthText.TextColor3 = color
                                    else
                                        HealthText.TextColor3 = ESP.Drawing.Healthbar.HealthTextRGB
                                    end
                                end                        
                            end
                        end

                        do -- Names
                            Name.Visible = ESP.Drawing.Names.Enabled
                            if ESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                                Name.Text = string.format('(<font color="rgb(%d, %d, %d)">F</font>) %s', ESP.Options.FriendcheckRGB.R * 255, ESP.Options.FriendcheckRGB.G * 255, ESP.Options.FriendcheckRGB.B * 255, plr.Name)
                            else
                                Name.Text = string.format('(<font color="rgb(%d, %d, %d)">E</font>) %s', 255, 0, 0, plr.Name)
                            end
                            Name.Position = UDim2.new(0, Pos.X, 0, Pos.Y - h / 2 - 9)
                        end

                        --[[do -- Flags
                            Flag1.Position = UDim2.new(0, Pos.X + w / 2 + 20, 0, Pos.Y - h / 2 + 3)                                
                            if ESP.Drawing.Flags.Enabled then
                                if false then
                                    Flag1.Visible = true;
                                    Flag1.TextColor3 = Color3.fromRGB(55, 200, 55)
                                else
                                    Flag1.Visible = false;
                                    Flag1.Text = "";
                                end
                                Flag2.Position = UDim2.new(0, Pos.X + w / 2 + 16, 0, Pos.Y - h / 2 + 14)       
                                if false then
                                    Flag2.Visible = true;                      
                                else
                                    Flag2.Visible = false;
                                    Flag2.Text = "";
                                end
                            end
                        end]]
                        
                        do -- Distance
                            if ESP.Drawing.Distances.Enabled then
                                if ESP.Drawing.Distances.Position == "Bottom" then
                                    Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 18)
                                    WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 15);
                                    Distance.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 7)
                                    Distance.Text = string.format("%d meters", math.floor(Dist))
                                    Distance.Visible = true
                                elseif ESP.Drawing.Distances.Position == "Text" then
                                    Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 8)
                                    WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 5);
                                    Distance.Visible = false
                                    if ESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                                        Name.Text = string.format('(<font color="rgb(%d, %d, %d)">F</font>) %s [%d]', ESP.Options.FriendcheckRGB.R * 255, ESP.Options.FriendcheckRGB.G * 255, ESP.Options.FriendcheckRGB.B * 255, plr.Name, math.floor(Dist))
                                    else
                                        Name.Text = string.format('(<font color="rgb(%d, %d, %d)">E</font>) %s [%d]', 255, 0, 0, plr.Name, math.floor(Dist))
                                    end
                                    Name.Visible = ESP.Drawing.Names.Enabled
                                end
                            end
                        end

                        do -- Weapons
                            local currentTool = Functions:GetPlayerTool(plr.Character)
                            Weapon.Text = ESP.Drawing.Weapons.Enabled and string.format('[<font color="rgb(%d, %d, %d)">'.. currentTool ..'</font>]', ESP.Drawing.Weapons.WeaponTextRGB.R * 255, ESP.Drawing.Weapons.WeaponTextRGB.G * 255, ESP.Drawing.Weapons.WeaponTextRGB.B * 255) or ""
                            Weapon.Visible = ESP.Drawing.Weapons.Enabled
                            
                            do -- Weapon icons
                                local WeaponImage = Functions:GetPlayerToolImg(plr.Character)
                                WeaponIcon.ImageColor3 = ESP.Drawing.Weapons.RGB
                                if WeaponImage then
                                    WeaponIcon.Visible = ESP.Drawing.Weapons.Icons
                                    WeaponIcon.Image = WeaponImage
                                else
                                    WeaponIcon.Visible = false
                                end
                            end
                        end                            
                    else
                        HideESP();
                    end
                else
                    HideESP();
                end
            else
                HideESP();
            end
        end)
    end
    coroutine.wrap(Updater)();
end
do -- Update ESP
    for _, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v.Name ~= lplayer.Name then
            coroutine.wrap(ESP)(v)
        end      
    end
    --
    game:GetService("Players").PlayerAdded:Connect(function(v)
        coroutine.wrap(ESP)(v)
    end);
end;
end;

--
local Snapline;
local Fov_Circle;
local Crosshair;
do -- Drawings
Snapline = Drawing.new("Line");Snapline.Visible, Snapline.Thickness, Snapline.Color = false, 1, aimbot.snapline_color
Fov_Circle = Drawing.new("Circle");Fov_Circle.Visible, Fov_Circle.Color, Fov_Circle.Thickness = aimbot.fov_circle, Color3.fromRGB(119, 120, 255), 1.75
Crosshair = Drawing.new("Circle");Crosshair.Color, Crosshair.Visible, Crosshair.Radius, Crosshair.Filled = Color3.fromRGB(255, 255, 255), true, 2, true
end;

--
utilities.functions.closest_to_mouse = function(type)
local target = nil
local maxDist = math.huge
local localPlayerTeam = lplayer.TeamColor
local fovRadius = aimbot.fov_circle and aimbot.radius or 0

for _, v in ipairs(game:GetService("Players"):GetPlayers()) do
    if v ~= lplayer and v.Character then
        local humanoid = v.Character:FindFirstChild("Humanoid")
        local humanoidRootPart = v.Character:FindFirstChild("HumanoidRootPart")
        local head = v.Character:FindFirstChild("Head")

        if humanoid and humanoid.Health > 0 and humanoidRootPart and head then
            local pos, onScreen = camera:WorldToViewportPoint(v.Character[aimbot.bone].Position)
            if onScreen then
                local targetPlayerTeam = v.TeamColor
                local distVector = Vector2.new(pos.X, pos.Y) - game:GetService("UserInputService"):GetMouseLocation()
                if lplayer.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("HumanoidRootPart") then
                    local dist = distVector.Magnitude
                    local distCheck = aimbot.distance == 0 or (v.Character.HumanoidRootPart.Position - lplayer.Character.HumanoidRootPart.Position).Magnitude / 3.5714285714 < aimbot.distance
                    if distCheck and dist <= maxDist and (not localPlayerTeam or not targetPlayerTeam or (not aimbot.teamcheck or targetPlayerTeam ~= localPlayerTeam)) and (not aimbot.fov_circle or dist <= fovRadius) then
                        maxDist = dist
                        target = v
                    end
                end
            end
        end
    end
end
return target;
end

game:GetService("UserInputService").InputBegan:Connect(function(input)
if input.UserInputType == Enum.UserInputType.MouseButton2 and aimbot.enabled then
    while input.UserInputState ~= Enum.UserInputState.End do
        local target = utilities.functions.closest_to_mouse("aimbot");
        if target then
            utilities.aimbot.target = target
            break
        end
        task.wait();
    end
end
end)

game:GetService("UserInputService").InputEnded:Connect(function(input)
if input.UserInputType == Enum.UserInputType.MouseButton2 then
    utilities.aimbot.target = nil
end
end);

game:GetService("RunService").RenderStepped:Connect(function()
local target = utilities.aimbot.target
local ClosestPlayer = utilities.functions.closest_to_mouse("aimbot")
if target and target.Character and target.Character:FindFirstChild("Head") then
    local enemyPos = target.Character[aimbot.bone].Position
    local stepSize = 1
    local randomDeviation = Vector3.new(
        math.random(-aimbot.randomisation, aimbot.randomisation) / 100,
        math.random(-aimbot.randomisation, aimbot.randomisation) / 35,
        math.random(-aimbot.randomisation, aimbot.randomisation) / 100
    )
    local aimPosition = aimbot.autoprediction and enemyPos + randomDeviation * stepSize or target.Character[aimbot.bone].Position + randomDeviation * stepSize
    camera.CFrame = aimbot.speed ~= 1 and camera.CFrame:Lerp(CFrame.lookAt(camera.CFrame.Position, aimPosition), aimbot.speed) or CFrame.lookAt(camera.CFrame.Position, aimPosition)
end
if aimbot.snapline then
    if ClosestPlayer and ClosestPlayer.Character and ClosestPlayer.Character:FindFirstChild("HumanoidRootPart") and ClosestPlayer.Character:FindFirstChild("Head") then
        local snapVector, snapOnScreen = camera:WorldToViewportPoint(ClosestPlayer.Character[aimbot.snapline_bone].Position)
        if snapOnScreen then
            Snapline.Visible = true
            if aimbot.snapline_from == "Camera" then
                Snapline.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
            else
                Snapline.From = Vector2.new(game:GetService("UserInputService"):GetMouseLocation().X, game:GetService("UserInputService"):GetMouseLocation().Y)
            end   
            Snapline.To = Vector2.new(snapVector.X, snapVector.Y)
        end
    else
        Snapline.Visible = false
    end
else
    Snapline.Visible = false
end
-- Fov circle
do  
    Fov_Circle.Position = Vector2.new(game:GetService("UserInputService"):GetMouseLocation().X, game:GetService("UserInputService"):GetMouseLocation().Y);
    if aimbot.dynamic then 
        local fovScalingFactor = 0.65 / math.tan(math.rad(game.Workspace.Camera.FieldOfView / 2)) 
        Fov_Circle.Radius = fovScalingFactor * aimbot.radius
    else
        Fov_Circle.Radius = aimbot.radius
    end
end


-- Speedhack
do 
    if Player_Modifications.Omni_Sprint.Enabled then
        local HRP=lplayer.Character:FindFirstChild("HumanoidRootPart")
        if not HRP or not HRP.Velocity then return end
        local look_vector=camera.CFrame.LookVector
        local keysPressed=game:GetService("UserInputService"):GetKeysPressed()
        local W,A,S,D=false,false,false,false
        for _,v in ipairs(keysPressed)do if v.KeyCode==Enum.KeyCode.W then W=true elseif v.KeyCode==Enum.KeyCode.A then A=true elseif v.KeyCode==Enum.KeyCode.S then S=true elseif v.KeyCode==Enum.KeyCode.D then D=true end end
        local function setVelocity(direction, angle) HRP.Velocity=Vector3.new((camera.CFrame*CFrame.Angles(0,math.rad(angle),0)).LookVector.X*Player_Modifications.Omni_Sprint.Speed,HRP.Velocity.Y,(camera.CFrame*CFrame.Angles(0,math.rad(angle),0)).LookVector.Z*Player_Modifications.Omni_Sprint.Speed) end
        if W then if A then setVelocity(look_vector,45) elseif D then setVelocity(look_vector,-45) else setVelocity(look_vector,0) end end
        if S then if A then setVelocity(look_vector,135) elseif D then setVelocity(look_vector,-135) else setVelocity(look_vector,180) end end
        if A then setVelocity(look_vector,90) end
        if D then setVelocity(look_vector,-90) end
    end   
end
end)

    end})





--MISC TAB SHIT

local extrasection = miscTab:createGroup('left', 'EXTRAS')
local worldsection = miscTab:createGroup('center', 'WORLD')
local selfsection = miscTab:createGroup('right', 'SELF')




--self



selfsection:addToggle({
    name = "Custom ViewModel",
    flag = "Custom Viewmodel",
    callback = function(value)
        values.enabled["customViewmodel"] = value
        local function updateVm(vm)
            if values.enabled["customViewmodel"] then
                if not vm:FindFirstChild("Item") then return end
                for i, v in ipairs(vm.Item:GetDescendants()) do
                    if v:IsA("MeshPart") or v:IsA("Part") then
                        if v.Transparency ~= 1 then
                            v.Transparency = values.transparency["viewmodel"]
                        end
                        if v.Material ~= values.misc["viewmodelMaterial"] then
                            v.Material = values.misc["viewmodelMaterial"]
                        end
                    end
                end
                for _, d in ipairs(vm:GetChildren()) do
                    if d:IsA("MeshPart") or d:IsA("Part") then
                        if d.Transparency ~= 1 then
                            d.Transparency = values.transparency["viewmodel"]
                        end
                        if d.Material ~= values.misc["viewmodelMaterial"] then
                            d.Material = values.misc["viewmodelMaterial"]
                        end
                    elseif d:IsA("Model") or d:IsA("Folder") then
                        for _, s in ipairs(d:GetChildren()) do
                            if s:IsA("MeshPart") or s:IsA("Part") then
                                if s.Transparency ~= 1 then
                                    s.Transparency = values.transparency["viewmodel"]
                                end
                                if s.Material ~= values.misc["viewmodelMaterial"] then
                                    s.Material = values.misc["viewmodelMaterial"]
                                end
                            end
                        end
                    end
                end
            else
                if not vm:FindFirstChild("Item") then return end
                for i, v in ipairs(vm.Item:GetDescendants()) do
                    if v:IsA("MeshPart") or v:IsA("Part") then
                        if v.Transparency ~= 1 and v.Transparency ~= 0 then
                            v.Transparency = 0
                        end
                        if v.Material ~= Enum.Material.Plastic then
                            v.Material = Enum.Material.Plastic
                        end
                    end
                end
                for _, d in ipairs(vm:GetChildren()) do
                    if d:IsA("MeshPart") or d:IsA("Part") then
                        if d.Transparency ~= 1 and d.Transparency ~= 0 then
                            d.Transparency = 0
                        end
                        if d.Material ~= Enum.Material.Plastic then
                            d.Material = Enum.Material.Plastic
                        end
                    elseif d:IsA("Model") or d:IsA("Folder") then
                        for _, s in ipairs(d:GetChildren()) do
                            if s:IsA("MeshPart") or s:IsA("Part") then
                                if s.Transparency ~= 1 and s.Transparency ~= 0 then
                                    s.Transparency = 0
                                end
                                if s.Material ~= Enum.Material.Plastic then
                                    s.Material = Enum.Material.Plastic
                                end
                            end
                        end
                    end
                end
            end
        end
        while values.enabled["customViewmodel"] do task.wait(0.1)
            if camera:FindFirstChild("ViewModel") then
                updateVm(camera.ViewModel)
            end
        end
        print(value)
    end
})




local picker = selfsection:addColorpicker({
    name = "Arm Color",
    cpname = nil,
    flag = "Arm Color",
    callback = function(value)
        values.misc["armColor"] = value or Color3.fromRGB(1,1,1)
        print(value)
    end
})

-- Assuming 'ViewModel' is the Model or Part you want to change the color of
game:GetService('RunService').Heartbeat:Connect(function()
    local vm = camera:FindFirstChild('ViewModel')
    if vm and values.enabled["customViewmodel"] then
        for _, part in ipairs(vm:GetDescendants()) do
            if part:IsA('BasePart') then
                part.BrickColor = BrickColor.new(values.misc["armColor"])
            end
        end
    end
end)


worldsection:addToggle({
    name = "No Fog",
    flag = "No Fog",
    callback = function(value)
values.enabled["removefog"] = value
while values.enabled["removefog"] do task.wait()
    lighting.Atmosphere.Density = 0
    lighting.Atmosphere.Offset = 0
end
end

})

worldsection:addToggle({
    name = "FullBright",
    flag = "Fullbright",
    callback = function(value)
    pcall(function()
    local lighting = game:GetService("Lighting");
    lighting.Ambient = Color3.fromRGB(255, 255, 255);
    lighting.Brightness = 1;
    lighting.FogEnd = 1e10;
    for i, v in pairs(lighting:GetDescendants()) do
        if v:IsA("BloomEffect") or v:IsA("BlurEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("SunRaysEffect") then
            v.Enabled = false;
        end;
    end;
    lighting.Changed:Connect(function()
        lighting.Ambient = Color3.fromRGB(255, 255, 255);
        lighting.Brightness = 1;
        lighting.FogEnd = 1e10;
    end);
    spawn(function()
        local character = game:GetService("Players").LocalPlayer.Character;
        while wait() do
            repeat wait() until character ~= nil;
            if not character.HumanoidRootPart:FindFirstChildWhichIsA("PointLight") then
                local headlight = Instance.new("PointLight", character.HumanoidRootPart);
                headlight.Brightness = 1;
                headlight.Range = 60;
            end;
        end;
    end);
end)
    end
})



worldsection:addToggle({
    name = "Remove Foliage",
    flag = "Remove Foliage",
    callback = function(value)
        for _, v in pairs(workspace.SpawnerZones:GetDescendants()) do
            if v.ClassName == "MeshPart" and v:FindFirstChildOfClass("SurfaceAppearance") then
                v:Destroy()
            end
        end
    
    end})


    

        worldsection:addToggle({
            name = "Xray (Y to toggle)",
            flag = "Xray (Y to toggle)",
            callback = function(value)
                local t=false
        
                local function scan(z,t)
                    for _,i in pairs(z:GetChildren()) do
                        if i:IsA("BasePart") and not i.Parent:FindFirstChild("Humanoid") and not i.Parent.Parent:FindFirstChild("Humanoid") then
                            i.LocalTransparencyModifier=t
                        end
        
                        scan(i,t)
                    end
                end
        
                function x(v)
                    if v then
                        scan(workspace,0.5)
                    else
                        scan(workspace,0)
                    end
                end
        
                game:GetService("UserInputService").InputBegan:connect(function (input)
                    if input.UserInputType==Enum.UserInputType.Keyboard and input.KeyCode==Enum.KeyCode.Y then
                        t=not t
                        x(t)
                    end
                end)
            end
        })


        worldsection:addToggle({
            name = "Remove Landmines",
            flag = "Remove Landmines",
            callback = function(value)
            workspace.AiZones.OutpostLandmines:Destroy();
    end
})





        worldsection:addToggle({
            name = "Ambient",
            flag = "Ambient",
            callback = function(value)
                local Workspace, RunService, Players, CoreGui, Lighting = cloneref(game:GetService("Workspace")), cloneref(game:GetService("RunService")), cloneref(game:GetService("Players")), game:GetService("CoreGui"), cloneref(game:GetService("Lighting"))
        local Skybox = loadstring(game:HttpGet("https://raw.githubusercontent.com/BurnHubz/eclipse/main/Skyboxes.lua", true))();
        
        local utilities = {
            aimbot = {
                target = nil
            },
            functions = {}
        };
        
        local aimbot = {
            enabled = false,
            randomisation = 0,
            distance = 200,
            speed = 0.5,
            autoprediction = false,
            teamcheck = false,
            bone = "Head",
            --
            fov_circle = false,
            dynamic = false,
            radius = 120,
            position = "Mouse",
            --
            snapline = false,
            snapline_color = Color3.fromRGB(255, 255, 255),
            snapline_bone = "HumanoidRootPart",
            snapline_from = "Mouse",
        };
        
        local Player_Modifications = {
            Omni_Sprint = {
                Enabled = false,
                Speed = 25,
            },
        };
        
        local ESP = {
            Enabled = true,
            TeamCheck = true,
            MaxDistance = 5000,
            FontSize = 11,
            FadeOut = {
                OnDistance = false,
                OnDeath = false,
                OnLeave = false,
            },
            Options = { 
                Teamcheck = false, TeamcheckRGB = Color3.fromRGB(0, 255, 0),
                Friendcheck = false, FriendcheckRGB = Color3.fromRGB(0, 255, 0),
                Highlight = false, HighlightRGB = Color3.fromRGB(255, 0, 0),
            },
            Drawing = {
                Chams = {
                    Enabled  = false,
                    Thermal = false,
                    FillRGB = Color3.fromRGB(119, 120, 255),
                    Fill_Transparency = 100,
                    OutlineRGB = Color3.fromRGB(119, 120, 255),
                    Outline_Transparency = 100,
                    VisibleCheck = false,
                },
                Names = {
                    Enabled = false,
                    RGB = Color3.fromRGB(255, 255, 255),
                },
                Flags = {
                    Enabled = false,
                },
                Distances = {
                    Enabled = false, 
                    Position = "Text",
                    RGB = Color3.fromRGB(255, 255, 255),
                },
                Weapons = {
                    Enabled = false, WeaponTextRGB = Color3.fromRGB(119, 120, 255),
                    Outlined = false,
                    Icons = false, RGB = Color3.fromRGB(255, 255, 255),
                    Gradient = false,
                    GradientRGB1 = Color3.fromRGB(255, 255, 255), GradientRGB2 = Color3.fromRGB(119, 120, 255),
                },
                Healthbar = {
                    Enabled = false,  
                    HealthText = false, Lerp = false, HealthTextRGB = Color3.fromRGB(119, 120, 255),
                    Width = 2.5,
                    Gradient = false, GradientRGB1 = Color3.fromRGB(200, 0, 0), GradientRGB2 = Color3.fromRGB(60, 60, 125), GradientRGB3 = Color3.fromRGB(119, 120, 255), 
                },
                Boxes = {
                    Animate = false,
                    RotationSpeed = 300,
                    Gradient = false, GradientRGB1 = Color3.fromRGB(119, 120, 255), GradientRGB2 = Color3.fromRGB(0, 0, 0), 
                    GradientFill = false, GradientFillRGB1 = Color3.fromRGB(119, 120, 255), GradientFillRGB2 = Color3.fromRGB(0, 0, 0), 
                    Filled = {
                        Enabled = false,
                        Transparency = 0.75,
                        RGB = Color3.fromRGB(0, 0, 0),
                    },
                    Full = {
                        Enabled = false,
                        RGB = Color3.fromRGB(255, 255, 255),
                    },
                    Corner = {
                        Enabled = false,
                        RGB = Color3.fromRGB(255, 255, 255),
                    },
                };
            };
            Items = {
                Enabled = false,
                Icons = false,
                RGB = Color3.fromRGB(255, 255, 255)
            },
            Connections = {
                RunService = RunService;
            };
            Fovcircle = {};
            Fonts = {};
        }
        
        -- Def & Vars
        local Euphoria = ESP.Connections;
        local lplayer = Players.LocalPlayer;
        local camera = game.Workspace.CurrentCamera;
        local Cam = Workspace.CurrentCamera;
        local RotationAngle, Tick = -45, tick();
        
        -- Weapon Images
        local Weapon_Icons = {
            ["Wooden Bow"] = "http://www.roblox.com/asset/?id=17677465400",
            ["Crossbow"] = "http://www.roblox.com/asset/?id=17677473017",
            ["Salvaged SMG"] = "http://www.roblox.com/asset/?id=17677463033",
            ["Salvaged AK47"] = "http://www.roblox.com/asset/?id=17677455113",
            ["Salvaged AK74u"] = "http://www.roblox.com/asset/?id=17677442346",
            ["Salvaged M14"] = "http://www.roblox.com/asset/?id=17677444642",
            ["Salvaged Python"] = "http://www.roblox.com/asset/?id=17677451737",
            ["Military PKM"] = "http://www.roblox.com/asset/?id=17677449448",
            ["Military M4A1"] = "http://www.roblox.com/asset/?id=17677479536",
            ["Bruno's M4A1"] = "http://www.roblox.com/asset/?id=17677471185",
            ["Military Barrett"] = "http://www.roblox.com/asset/?id=17677482998",
            ["Salvaged Skorpion"] = "http://www.roblox.com/asset/?id=17677459658",
            ["Salvaged Pump Action"] = "http://www.roblox.com/asset/?id=17677457186",
            ["Military AA12"] = "http://www.roblox.com/asset/?id=17677475227",
            ["Salvaged Break Action"] = "http://www.roblox.com/asset/?id=17677468751",
            ["Salvaged Pipe Rifle"] = "http://www.roblox.com/asset/?id=17677468751",
            ["Salvaged P250"] = "http://www.roblox.com/asset/?id=17677447257",
            ["Nail Gun"] = "http://www.roblox.com/asset/?id=17677484756"
        };
        
        -- Functions
        local Functions = {}
        do
            function Functions:Create(Class, Properties)
                local _Instance = typeof(Class) == 'string' and Instance.new(Class) or Class
                for Property, Value in pairs(Properties) do
                    _Instance[Property] = Value
                end
                return _Instance;
            end
            --
            function Functions:GetPlayerTool(Character)
                for _, value in pairs(Character:GetChildren()) do
                    if value.Name ~= "HolsterModel" and value:IsA("Model") and value.Name ~= "Hair" and (value:FindFirstChild("Detail") or value:FindFirstChild("Main") or value:FindFirstChild("Handle") or value:FindFirstChild("Attachments") or value:FindFirstChild("ArrowAttach") or value:FindFirstChild("Attach")) and value.PrimaryPart then
                        return value.Name;
                    end
                end
                return "none"
            end    
            function Functions:GetPlayerToolImg(Character)
                for _, value in pairs(Character:GetChildren()) do
                    if value.Name ~= "HolsterModel" and value:IsA("Model") and value.Name ~= "Hair" and (value:FindFirstChild("Detail") or value:FindFirstChild("Main") or value:FindFirstChild("Handle") or value:FindFirstChild("Attachments") or value:FindFirstChild("ArrowAttach") or value:FindFirstChild("Attach")) and value.PrimaryPart then
                        return Weapon_Icons[value.Name] ;
                    end
                end
                return nil
            end     
            --
            function Functions:FadeOutOnDist(element, distance)
                local transparency = math.max(0.1, 1 - (distance / ESP.MaxDistance))
                if element:IsA("TextLabel") then
                    element.TextTransparency = 1 - transparency
                elseif element:IsA("ImageLabel") then
                    element.ImageTransparency = 1 - transparency
                elseif element:IsA("UIStroke") then
                    element.Transparency = 1 - transparency
                elseif element:IsA("Frame") and (element == Healthbar or element == BehindHealthbar) then
                    element.BackgroundTransparency = 1 - transparency
                elseif element:IsA("Frame") then
                    element.BackgroundTransparency = 1 - transparency
                elseif element:IsA("Highlight") then
                    element.FillTransparency = 1 - transparency
                    element.OutlineTransparency = 1 - transparency
                end;
            end;  
        end;
        
        do -- Initalize
            local ScreenGui = Functions:Create("ScreenGui", {
                Parent = CoreGui,
                Name = "ESPHolder",
            });
        
            local DupeCheck = function(plr)
                if ScreenGui:FindFirstChild(plr.Name) then
                    ScreenGui[plr.Name]:Destroy()
                end
            end
        
            local ESP = function(plr)
                coroutine.wrap(DupeCheck)(plr) -- Dupecheck
                local Name = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, -11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
                local Distance = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
                local Weapon = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
                local Box = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0.75, BorderSizePixel = 0})
                local Gradient1 = Functions:Create("UIGradient", {Parent = Box, Enabled = ESP.Drawing.Boxes.GradientFill, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientFillRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientFillRGB2)}})
                local Outline = Functions:Create("UIStroke", {Parent = Box, Enabled = ESP.Drawing.Boxes.Gradient, Transparency = 0, Color = Color3.fromRGB(255, 255, 255), LineJoinMode = Enum.LineJoinMode.Miter})
                local Gradient2 = Functions:Create("UIGradient", {Parent = Outline, Enabled = ESP.Drawing.Boxes.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientRGB2)}})
                local Healthbar = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 0})
                local BehindHealthbar = Functions:Create("Frame", {Parent = ScreenGui, ZIndex = -1, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0})
                local HealthbarGradient = Functions:Create("UIGradient", {Parent = Healthbar, Enabled = ESP.Drawing.Healthbar.Gradient, Rotation = -90, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Healthbar.GradientRGB1), ColorSequenceKeypoint.new(0.5, ESP.Drawing.Healthbar.GradientRGB2), ColorSequenceKeypoint.new(1, ESP.Drawing.Healthbar.GradientRGB3)}})
                local HealthText = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
                local Chams = Functions:Create("Highlight", {Parent = ScreenGui, FillTransparency = 1, OutlineTransparency = 0, OutlineColor = Color3.fromRGB(119, 120, 255), DepthMode = "AlwaysOnTop"})
                local WeaponIcon = Functions:Create("ImageLabel", {Parent = ScreenGui, BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(0, 40, 0, 40)})
                local Gradient3 = Functions:Create("UIGradient", {Parent = WeaponIcon, Rotation = -90, Enabled = ESP.Drawing.Weapons.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Weapons.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Weapons.GradientRGB2)}})
                local LeftTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local LeftSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local RightTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local RightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local BottomSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local BottomDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local BottomRightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local BottomRightDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local Flag1 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
                local Flag2 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
                --local DroppedItems = Functions:Create("TextLabel", {Parent = ScreenGui, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
                --
                local Updater = function()
                    local Connection;
                    local function HideESP()
                        Box.Visible = false;
                        Name.Visible = false;
                        Distance.Visible = false;
                        Weapon.Visible = false;
                        Healthbar.Visible = false;
                        BehindHealthbar.Visible = false;
                        HealthText.Visible = false;
                        WeaponIcon.Visible = false;
                        LeftTop.Visible = false;
                        LeftSide.Visible = false;
                        BottomSide.Visible = false;
                        BottomDown.Visible = false;
                        RightTop.Visible = false;
                        RightSide.Visible = false;
                        BottomRightSide.Visible = false;
                        BottomRightDown.Visible = false;
                        Flag1.Visible = false;
                        Chams.Enabled = false;
                        Flag2.Visible = false;
                        if not plr then
                            ScreenGui:Destroy();
                            Connection:Disconnect();
                        end
                    end
                    --
                    Connection = Euphoria.RunService.RenderStepped:Connect(function()
                        --[[ do -- Item ESP
                            if ESP.Items.Enabled then
                                for _, debrisPart in pairs(workspace.Debris:GetChildren()) do
                                    if debrisPart:IsA("BasePart") then
                                        local item_pos = debrisPart.Position
                                        local screen_pos, onScreen = Cam:WorldToScreenPoint(item_pos)
                                        DroppedItems.Text = debrisPart.Name
                                        DroppedItems.Position = UDim2.new(0, screen_pos.X, 0, screen_pos.Y)
                                        DroppedItems.Visible = onScreen
                                    end
                                end
                            else
                                DroppedItems.Visible = false
                            end         
                        end]]
                        --
                        if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                            local HRP = plr.Character.HumanoidRootPart
                            local Humanoid = plr.Character:WaitForChild("Humanoid");
                            local Pos, OnScreen = Cam:WorldToScreenPoint(HRP.Position)
                            local Dist = (Cam.CFrame.Position - HRP.Position).Magnitude / 3.5714285714
                            
                            if OnScreen and Dist <= ESP.MaxDistance then
                                local Size = HRP.Size.Y
                                local scaleFactor = (Size * Cam.ViewportSize.Y) / (Pos.Z * 2)
                                local w, h = 3 * scaleFactor, 4.5 * scaleFactor
        
                                -- Fade-out effect --
                                if ESP.FadeOut.OnDistance then
                                    Functions:FadeOutOnDist(Box, Dist)
                                    Functions:FadeOutOnDist(Outline, Dist)
                                    Functions:FadeOutOnDist(Name, Dist)
                                    Functions:FadeOutOnDist(Distance, Dist)
                                    Functions:FadeOutOnDist(Weapon, Dist)
                                    Functions:FadeOutOnDist(Healthbar, Dist)
                                    Functions:FadeOutOnDist(BehindHealthbar, Dist)
                                    Functions:FadeOutOnDist(HealthText, Dist)
                                    Functions:FadeOutOnDist(WeaponIcon, Dist)
                                    Functions:FadeOutOnDist(LeftTop, Dist)
                                    Functions:FadeOutOnDist(LeftSide, Dist)
                                    Functions:FadeOutOnDist(BottomSide, Dist)
                                    Functions:FadeOutOnDist(BottomDown, Dist)
                                    Functions:FadeOutOnDist(RightTop, Dist)
                                    Functions:FadeOutOnDist(RightSide, Dist)
                                    Functions:FadeOutOnDist(BottomRightSide, Dist)
                                    Functions:FadeOutOnDist(BottomRightDown, Dist)
                                    Functions:FadeOutOnDist(Chams, Dist)
                                    Functions:FadeOutOnDist(Flag1, Dist)
                                    Functions:FadeOutOnDist(Flag2, Dist)
                                end
        
                                -- Teamcheck
                                if ESP.TeamCheck and plr ~= lplayer and ((lplayer.Team ~= plr.Team and plr.Team) or (not lplayer.Team and not plr.Team)) and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Humanoid") then
        
                                    do -- Chams
                                        Chams.Adornee = plr.Character
                                        Chams.Enabled = ESP.Drawing.Chams.Enabled
                                        Chams.FillColor = ESP.Drawing.Chams.FillRGB
                                        Chams.OutlineColor = ESP.Drawing.Chams.OutlineRGB
                                        do -- Breathe
                                            if ESP.Drawing.Chams.Thermal then
                                                local breathe_effect = math.atan(math.sin(tick() * 2)) * 2 / math.pi
                                                Chams.FillTransparency = ESP.Drawing.Chams.Fill_Transparency * breathe_effect * 0.01
                                                Chams.OutlineTransparency = ESP.Drawing.Chams.Outline_Transparency * breathe_effect * 0.01
                                            end
                                        end
                                        if ESP.Drawing.Chams.VisibleCheck then
                                            Chams.DepthMode = "Occluded"
                                        else
                                            Chams.DepthMode = "AlwaysOnTop"
                                        end
                                    end;
        
                                    do -- Corner Boxes
                                        LeftTop.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        LeftTop.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                                        LeftTop.Size = UDim2.new(0, w / 5, 0, 1)
                                        
                                        LeftSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        LeftSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                                        LeftSide.Size = UDim2.new(0, 1, 0, h / 5)
                                        
                                        BottomSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        BottomSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                                        BottomSide.Size = UDim2.new(0, 1, 0, h / 5)
                                        BottomSide.AnchorPoint = Vector2.new(0, 5)
                                        
                                        BottomDown.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        BottomDown.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                                        BottomDown.Size = UDim2.new(0, w / 5, 0, 1)
                                        BottomDown.AnchorPoint = Vector2.new(0, 1)
                                        
                                        RightTop.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        RightTop.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y - h / 2)
                                        RightTop.Size = UDim2.new(0, w / 5, 0, 1)
                                        RightTop.AnchorPoint = Vector2.new(1, 0)
                                        
                                        RightSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        RightSide.Position = UDim2.new(0, Pos.X + w / 2 - 1, 0, Pos.Y - h / 2)
                                        RightSide.Size = UDim2.new(0, 1, 0, h / 5)
                                        RightSide.AnchorPoint = Vector2.new(0, 0)
                                        
                                        BottomRightSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        BottomRightSide.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                                        BottomRightSide.Size = UDim2.new(0, 1, 0, h / 5)
                                        BottomRightSide.AnchorPoint = Vector2.new(1, 1)
                                        
                                        BottomRightDown.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        BottomRightDown.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                                        BottomRightDown.Size = UDim2.new(0, w / 5, 0, 1)
                                        BottomRightDown.AnchorPoint = Vector2.new(1, 1)                                                            
                                    end
        
                                    do -- Boxes
                                        Box.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                                        Box.Size = UDim2.new(0, w, 0, h)
                                        Box.Visible = ESP.Drawing.Boxes.Full.Enabled;
        
                                        -- Gradient
                                        if ESP.Drawing.Boxes.Filled.Enabled then
                                            Box.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                            if ESP.Drawing.Boxes.GradientFill then
                                                Box.BackgroundTransparency = ESP.Drawing.Boxes.Filled.Transparency;
                                            else
                                                Box.BackgroundTransparency = 1
                                            end
                                            Box.BorderSizePixel = 1
                                        else
                                            Box.BackgroundTransparency = 1
                                        end
                                        -- Animation
                                        RotationAngle = RotationAngle + (tick() - Tick) * ESP.Drawing.Boxes.RotationSpeed * math.cos(math.pi / 4 * tick() - math.pi / 2)
                                        if ESP.Drawing.Boxes.Animate then
                                            Gradient1.Rotation = RotationAngle
                                            Gradient2.Rotation = RotationAngle
                                        else
                                            Gradient1.Rotation = -45
                                            Gradient2.Rotation = -45
                                        end
                                        Tick = tick()
                                    end
        
                                    -- Healthbar
                                    do  
                                        local health = Humanoid.Health / Humanoid.MaxHealth;
                                        Healthbar.Visible = ESP.Drawing.Healthbar.Enabled;
                                        Healthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - health))  
                                        Healthbar.Size = UDim2.new(0, ESP.Drawing.Healthbar.Width, 0, h * health)  
                                        --
                                        BehindHealthbar.Visible = ESP.Drawing.Healthbar.Enabled;
                                        BehindHealthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2)  
                                        BehindHealthbar.Size = UDim2.new(0, ESP.Drawing.Healthbar.Width, 0, h)
                                        -- Health Text
                                        do
                                            if ESP.Drawing.Healthbar.HealthText then
                                                local healthPercentage = math.floor(Humanoid.Health / Humanoid.MaxHealth * 100)
                                                HealthText.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - healthPercentage / 100) + 3)
                                                HealthText.Text = tostring(healthPercentage)
                                                HealthText.Visible = Humanoid.Health < Humanoid.MaxHealth
                                                if ESP.Drawing.Healthbar.Lerp then
                                                    local color = health >= 0.75 and Color3.fromRGB(0, 255, 0) or health >= 0.5 and Color3.fromRGB(255, 255, 0) or health >= 0.25 and Color3.fromRGB(255, 170, 0) or Color3.fromRGB(255, 0, 0)
                                                    HealthText.TextColor3 = color
                                                else
                                                    HealthText.TextColor3 = ESP.Drawing.Healthbar.HealthTextRGB
                                                end
                                            end                        
                                        end
                                    end
        
                                    do -- Names
                                        Name.Visible = ESP.Drawing.Names.Enabled
                                        if ESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                                            Name.Text = string.format('(<font color="rgb(%d, %d, %d)">F</font>) %s', ESP.Options.FriendcheckRGB.R * 255, ESP.Options.FriendcheckRGB.G * 255, ESP.Options.FriendcheckRGB.B * 255, plr.Name)
                                        else
                                            Name.Text = string.format('(<font color="rgb(%d, %d, %d)">E</font>) %s', 255, 0, 0, plr.Name)
                                        end
                                        Name.Position = UDim2.new(0, Pos.X, 0, Pos.Y - h / 2 - 9)
                                    end
        
                                    --[[do -- Flags
                                        Flag1.Position = UDim2.new(0, Pos.X + w / 2 + 20, 0, Pos.Y - h / 2 + 3)                                
                                        if ESP.Drawing.Flags.Enabled then
                                            if false then
                                                Flag1.Visible = true;
                                                Flag1.TextColor3 = Color3.fromRGB(55, 200, 55)
                                            else
                                                Flag1.Visible = false;
                                                Flag1.Text = "";
                                            end
                                            Flag2.Position = UDim2.new(0, Pos.X + w / 2 + 16, 0, Pos.Y - h / 2 + 14)       
                                            if false then
                                                Flag2.Visible = true;                      
                                            else
                                                Flag2.Visible = false;
                                                Flag2.Text = "";
                                            end
                                        end
                                    end]]
                                    
                                    do -- Distance
                                        if ESP.Drawing.Distances.Enabled then
                                            if ESP.Drawing.Distances.Position == "Bottom" then
                                                Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 18)
                                                WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 15);
                                                Distance.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 7)
                                                Distance.Text = string.format("%d meters", math.floor(Dist))
                                                Distance.Visible = true
                                            elseif ESP.Drawing.Distances.Position == "Text" then
                                                Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 8)
                                                WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 5);
                                                Distance.Visible = false
                                                if ESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                                                    Name.Text = string.format('(<font color="rgb(%d, %d, %d)">F</font>) %s [%d]', ESP.Options.FriendcheckRGB.R * 255, ESP.Options.FriendcheckRGB.G * 255, ESP.Options.FriendcheckRGB.B * 255, plr.Name, math.floor(Dist))
                                                else
                                                    Name.Text = string.format('(<font color="rgb(%d, %d, %d)">E</font>) %s [%d]', 255, 0, 0, plr.Name, math.floor(Dist))
                                                end
                                                Name.Visible = ESP.Drawing.Names.Enabled
                                            end
                                        end
                                    end
        
                                    do -- Weapons
                                        local currentTool = Functions:GetPlayerTool(plr.Character)
                                        Weapon.Text = ESP.Drawing.Weapons.Enabled and string.format('[<font color="rgb(%d, %d, %d)">'.. currentTool ..'</font>]', ESP.Drawing.Weapons.WeaponTextRGB.R * 255, ESP.Drawing.Weapons.WeaponTextRGB.G * 255, ESP.Drawing.Weapons.WeaponTextRGB.B * 255) or ""
                                        Weapon.Visible = ESP.Drawing.Weapons.Enabled
                                        
                                        do -- Weapon icons
                                            local WeaponImage = Functions:GetPlayerToolImg(plr.Character)
                                            WeaponIcon.ImageColor3 = ESP.Drawing.Weapons.RGB
                                            if WeaponImage then
                                                WeaponIcon.Visible = ESP.Drawing.Weapons.Icons
                                                WeaponIcon.Image = WeaponImage
                                            else
                                                WeaponIcon.Visible = false
                                            end
                                        end
                                    end                            
                                else
                                    HideESP();
                                end
                            else
                                HideESP();
                            end
                        else
                            HideESP();
                        end
                    end)
                end
                coroutine.wrap(Updater)();
            end
            do -- Update ESP
                for _, v in pairs(game:GetService("Players"):GetPlayers()) do
                    if v.Name ~= lplayer.Name then
                        coroutine.wrap(ESP)(v)
                    end      
                end
                --
                game:GetService("Players").PlayerAdded:Connect(function(v)
                    coroutine.wrap(ESP)(v)
                end);
            end;
        end;
            -- Lighting
            do
                Lighting.Brightness = 3;
                Lighting.TimeOfDay = 7;
                Lighting.Ambient = Color3.fromRGB(119, 120, 255);
                Lighting.OutdoorAmbient = Color3.fromRGB(119, 120, 255);
            end
            end})
        
        
            worldsection:addToggle({
                name = "Skybox",
                flag = "Skybox",
                callback = function(value)
                    local Workspace, RunService, Players, CoreGui, Lighting = cloneref(game:GetService("Workspace")), cloneref(game:GetService("RunService")), cloneref(game:GetService("Players")), game:GetService("CoreGui"), cloneref(game:GetService("Lighting"))
        local Skybox = loadstring(game:HttpGet("https://raw.githubusercontent.com/BurnHubz/eclipse/main/Skyboxes.lua", true))();
        
        local utilities = {
            aimbot = {
                target = nil
            },
            functions = {}
        };
        
        local aimbot = {
            enabled = false,
            randomisation = 0,
            distance = 200,
            speed = 0.5,
            autoprediction = false,
            teamcheck = false,
            bone = "Head",
            --
            fov_circle = false,
            dynamic = false,
            radius = 120,
            position = "Mouse",
            --
            snapline = false,
            snapline_color = Color3.fromRGB(255, 255, 255),
            snapline_bone = "HumanoidRootPart",
            snapline_from = "Mouse",
        };
        
        local Player_Modifications = {
            Omni_Sprint = {
                Enabled = false,
                Speed = 25,
            },
        };
        
        local ESP = {
            Enabled = false,
            TeamCheck = false,
            MaxDistance = 5000,
            FontSize = 11,
            FadeOut = {
                OnDistance = false,
                OnDeath = false,
                OnLeave = false,
            },
            Options = { 
                Teamcheck = false, TeamcheckRGB = Color3.fromRGB(0, 255, 0),
                Friendcheck = false, FriendcheckRGB = Color3.fromRGB(0, 255, 0),
                Highlight = false, HighlightRGB = Color3.fromRGB(255, 0, 0),
            },
            Drawing = {
                Chams = {
                    Enabled  = false,
                    Thermal = false,
                    FillRGB = Color3.fromRGB(119, 120, 255),
                    Fill_Transparency = 100,
                    OutlineRGB = Color3.fromRGB(119, 120, 255),
                    Outline_Transparency = 100,
                    VisibleCheck = false,
                },
                Names = {
                    Enabled = false,
                    RGB = Color3.fromRGB(255, 255, 255),
                },
                Flags = {
                    Enabled = false,
                },
                Distances = {
                    Enabled = false, 
                    Position = "Text",
                    RGB = Color3.fromRGB(255, 255, 255),
                },
                Weapons = {
                    Enabled = false, WeaponTextRGB = Color3.fromRGB(119, 120, 255),
                    Outlined = false,
                    Icons = false, RGB = Color3.fromRGB(255, 255, 255),
                    Gradient = false,
                    GradientRGB1 = Color3.fromRGB(255, 255, 255), GradientRGB2 = Color3.fromRGB(119, 120, 255),
                },
                Healthbar = {
                    Enabled = false,  
                    HealthText = false, Lerp = false, HealthTextRGB = Color3.fromRGB(119, 120, 255),
                    Width = 2.5,
                    Gradient = false, GradientRGB1 = Color3.fromRGB(200, 0, 0), GradientRGB2 = Color3.fromRGB(60, 60, 125), GradientRGB3 = Color3.fromRGB(119, 120, 255), 
                },
                Boxes = {
                    Animate = false,
                    RotationSpeed = 300,
                    Gradient = false, GradientRGB1 = Color3.fromRGB(119, 120, 255), GradientRGB2 = Color3.fromRGB(0, 0, 0), 
                    GradientFill = false, GradientFillRGB1 = Color3.fromRGB(119, 120, 255), GradientFillRGB2 = Color3.fromRGB(0, 0, 0), 
                    Filled = {
                        Enabled = false,
                        Transparency = 0.75,
                        RGB = Color3.fromRGB(0, 0, 0),
                    },
                    Full = {
                        Enabled = false,
                        RGB = Color3.fromRGB(255, 255, 255),
                    },
                    Corner = {
                        Enabled = false,
                        RGB = Color3.fromRGB(255, 255, 255),
                    },
                };
            };
            Items = {
                Enabled = false,
                Icons = false,
                RGB = Color3.fromRGB(255, 255, 255)
            },
            Connections = {
                RunService = RunService;
            };
            Fovcircle = {};
            Fonts = {};
        }
        
        -- Def & Vars
        local Euphoria = ESP.Connections;
        local lplayer = Players.LocalPlayer;
        local camera = game.Workspace.CurrentCamera;
        local Cam = Workspace.CurrentCamera;
        local RotationAngle, Tick = -45, tick();
        
        -- Weapon Images
        local Weapon_Icons = {
            ["Wooden Bow"] = "http://www.roblox.com/asset/?id=17677465400",
            ["Crossbow"] = "http://www.roblox.com/asset/?id=17677473017",
            ["Salvaged SMG"] = "http://www.roblox.com/asset/?id=17677463033",
            ["Salvaged AK47"] = "http://www.roblox.com/asset/?id=17677455113",
            ["Salvaged AK74u"] = "http://www.roblox.com/asset/?id=17677442346",
            ["Salvaged M14"] = "http://www.roblox.com/asset/?id=17677444642",
            ["Salvaged Python"] = "http://www.roblox.com/asset/?id=17677451737",
            ["Military PKM"] = "http://www.roblox.com/asset/?id=17677449448",
            ["Military M4A1"] = "http://www.roblox.com/asset/?id=17677479536",
            ["Bruno's M4A1"] = "http://www.roblox.com/asset/?id=17677471185",
            ["Military Barrett"] = "http://www.roblox.com/asset/?id=17677482998",
            ["Salvaged Skorpion"] = "http://www.roblox.com/asset/?id=17677459658",
            ["Salvaged Pump Action"] = "http://www.roblox.com/asset/?id=17677457186",
            ["Military AA12"] = "http://www.roblox.com/asset/?id=17677475227",
            ["Salvaged Break Action"] = "http://www.roblox.com/asset/?id=17677468751",
            ["Salvaged Pipe Rifle"] = "http://www.roblox.com/asset/?id=17677468751",
            ["Salvaged P250"] = "http://www.roblox.com/asset/?id=17677447257",
            ["Nail Gun"] = "http://www.roblox.com/asset/?id=17677484756"
        };
        
        -- Functions
        local Functions = {}
        do
            function Functions:Create(Class, Properties)
                local _Instance = typeof(Class) == 'string' and Instance.new(Class) or Class
                for Property, Value in pairs(Properties) do
                    _Instance[Property] = Value
                end
                return _Instance;
            end
            --
            function Functions:GetPlayerTool(Character)
                for _, value in pairs(Character:GetChildren()) do
                    if value.Name ~= "HolsterModel" and value:IsA("Model") and value.Name ~= "Hair" and (value:FindFirstChild("Detail") or value:FindFirstChild("Main") or value:FindFirstChild("Handle") or value:FindFirstChild("Attachments") or value:FindFirstChild("ArrowAttach") or value:FindFirstChild("Attach")) and value.PrimaryPart then
                        return value.Name;
                    end
                end
                return "none"
            end    
            function Functions:GetPlayerToolImg(Character)
                for _, value in pairs(Character:GetChildren()) do
                    if value.Name ~= "HolsterModel" and value:IsA("Model") and value.Name ~= "Hair" and (value:FindFirstChild("Detail") or value:FindFirstChild("Main") or value:FindFirstChild("Handle") or value:FindFirstChild("Attachments") or value:FindFirstChild("ArrowAttach") or value:FindFirstChild("Attach")) and value.PrimaryPart then
                        return Weapon_Icons[value.Name] ;
                    end
                end
                return nil
            end     
            --
            function Functions:FadeOutOnDist(element, distance)
                local transparency = math.max(0.1, 1 - (distance / ESP.MaxDistance))
                if element:IsA("TextLabel") then
                    element.TextTransparency = 1 - transparency
                elseif element:IsA("ImageLabel") then
                    element.ImageTransparency = 1 - transparency
                elseif element:IsA("UIStroke") then
                    element.Transparency = 1 - transparency
                elseif element:IsA("Frame") and (element == Healthbar or element == BehindHealthbar) then
                    element.BackgroundTransparency = 1 - transparency
                elseif element:IsA("Frame") then
                    element.BackgroundTransparency = 1 - transparency
                elseif element:IsA("Highlight") then
                    element.FillTransparency = 1 - transparency
                    element.OutlineTransparency = 1 - transparency
                end;
            end;  
        end;
        
        do -- Initalize
            local ScreenGui = Functions:Create("ScreenGui", {
                Parent = CoreGui,
                Name = "ESPHolder",
            });
        
            local DupeCheck = function(plr)
                if ScreenGui:FindFirstChild(plr.Name) then
                    ScreenGui[plr.Name]:Destroy()
                end
            end
        
            local ESP = function(plr)
                coroutine.wrap(DupeCheck)(plr) -- Dupecheck
                local Name = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, -11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
                local Distance = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
                local Weapon = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
                local Box = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0.75, BorderSizePixel = 0})
                local Gradient1 = Functions:Create("UIGradient", {Parent = Box, Enabled = ESP.Drawing.Boxes.GradientFill, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientFillRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientFillRGB2)}})
                local Outline = Functions:Create("UIStroke", {Parent = Box, Enabled = ESP.Drawing.Boxes.Gradient, Transparency = 0, Color = Color3.fromRGB(255, 255, 255), LineJoinMode = Enum.LineJoinMode.Miter})
                local Gradient2 = Functions:Create("UIGradient", {Parent = Outline, Enabled = ESP.Drawing.Boxes.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientRGB2)}})
                local Healthbar = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 0})
                local BehindHealthbar = Functions:Create("Frame", {Parent = ScreenGui, ZIndex = -1, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0})
                local HealthbarGradient = Functions:Create("UIGradient", {Parent = Healthbar, Enabled = ESP.Drawing.Healthbar.Gradient, Rotation = -90, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Healthbar.GradientRGB1), ColorSequenceKeypoint.new(0.5, ESP.Drawing.Healthbar.GradientRGB2), ColorSequenceKeypoint.new(1, ESP.Drawing.Healthbar.GradientRGB3)}})
                local HealthText = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
                local Chams = Functions:Create("Highlight", {Parent = ScreenGui, FillTransparency = 1, OutlineTransparency = 0, OutlineColor = Color3.fromRGB(119, 120, 255), DepthMode = "AlwaysOnTop"})
                local WeaponIcon = Functions:Create("ImageLabel", {Parent = ScreenGui, BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(0, 40, 0, 40)})
                local Gradient3 = Functions:Create("UIGradient", {Parent = WeaponIcon, Rotation = -90, Enabled = ESP.Drawing.Weapons.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Weapons.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Weapons.GradientRGB2)}})
                local LeftTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local LeftSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local RightTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local RightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local BottomSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local BottomDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local BottomRightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local BottomRightDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local Flag1 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
                local Flag2 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
                --local DroppedItems = Functions:Create("TextLabel", {Parent = ScreenGui, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
                --
                local Updater = function()
                    local Connection;
                    local function HideESP()
                        Box.Visible = false;
                        Name.Visible = false;
                        Distance.Visible = false;
                        Weapon.Visible = false;
                        Healthbar.Visible = false;
                        BehindHealthbar.Visible = false;
                        HealthText.Visible = false;
                        WeaponIcon.Visible = false;
                        LeftTop.Visible = false;
                        LeftSide.Visible = false;
                        BottomSide.Visible = false;
                        BottomDown.Visible = false;
                        RightTop.Visible = false;
                        RightSide.Visible = false;
                        BottomRightSide.Visible = false;
                        BottomRightDown.Visible = false;
                        Flag1.Visible = false;
                        Chams.Enabled = false;
                        Flag2.Visible = false;
                        if not plr then
                            ScreenGui:Destroy();
                            Connection:Disconnect();
                        end
                    end
                    --
                    Connection = Euphoria.RunService.RenderStepped:Connect(function()
                        --[[ do -- Item ESP
                            if ESP.Items.Enabled then
                                for _, debrisPart in pairs(workspace.Debris:GetChildren()) do
                                    if debrisPart:IsA("BasePart") then
                                        local item_pos = debrisPart.Position
                                        local screen_pos, onScreen = Cam:WorldToScreenPoint(item_pos)
                                        DroppedItems.Text = debrisPart.Name
                                        DroppedItems.Position = UDim2.new(0, screen_pos.X, 0, screen_pos.Y)
                                        DroppedItems.Visible = onScreen
                                    end
                                end
                            else
                                DroppedItems.Visible = false
                            end         
                        end]]
                        --
                        if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                            local HRP = plr.Character.HumanoidRootPart
                            local Humanoid = plr.Character:WaitForChild("Humanoid");
                            local Pos, OnScreen = Cam:WorldToScreenPoint(HRP.Position)
                            local Dist = (Cam.CFrame.Position - HRP.Position).Magnitude / 3.5714285714
                            
                            if OnScreen and Dist <= ESP.MaxDistance then
                                local Size = HRP.Size.Y
                                local scaleFactor = (Size * Cam.ViewportSize.Y) / (Pos.Z * 2)
                                local w, h = 3 * scaleFactor, 4.5 * scaleFactor
        
                                -- Fade-out effect --
                                if ESP.FadeOut.OnDistance then
                                    Functions:FadeOutOnDist(Box, Dist)
                                    Functions:FadeOutOnDist(Outline, Dist)
                                    Functions:FadeOutOnDist(Name, Dist)
                                    Functions:FadeOutOnDist(Distance, Dist)
                                    Functions:FadeOutOnDist(Weapon, Dist)
                                    Functions:FadeOutOnDist(Healthbar, Dist)
                                    Functions:FadeOutOnDist(BehindHealthbar, Dist)
                                    Functions:FadeOutOnDist(HealthText, Dist)
                                    Functions:FadeOutOnDist(WeaponIcon, Dist)
                                    Functions:FadeOutOnDist(LeftTop, Dist)
                                    Functions:FadeOutOnDist(LeftSide, Dist)
                                    Functions:FadeOutOnDist(BottomSide, Dist)
                                    Functions:FadeOutOnDist(BottomDown, Dist)
                                    Functions:FadeOutOnDist(RightTop, Dist)
                                    Functions:FadeOutOnDist(RightSide, Dist)
                                    Functions:FadeOutOnDist(BottomRightSide, Dist)
                                    Functions:FadeOutOnDist(BottomRightDown, Dist)
                                    Functions:FadeOutOnDist(Chams, Dist)
                                    Functions:FadeOutOnDist(Flag1, Dist)
                                    Functions:FadeOutOnDist(Flag2, Dist)
                                end
        
                                -- Teamcheck
                                if ESP.TeamCheck and plr ~= lplayer and ((lplayer.Team ~= plr.Team and plr.Team) or (not lplayer.Team and not plr.Team)) and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Humanoid") then
        
                                    do -- Chams
                                        Chams.Adornee = plr.Character
                                        Chams.Enabled = ESP.Drawing.Chams.Enabled
                                        Chams.FillColor = ESP.Drawing.Chams.FillRGB
                                        Chams.OutlineColor = ESP.Drawing.Chams.OutlineRGB
                                        do -- Breathe
                                            if ESP.Drawing.Chams.Thermal then
                                                local breathe_effect = math.atan(math.sin(tick() * 2)) * 2 / math.pi
                                                Chams.FillTransparency = ESP.Drawing.Chams.Fill_Transparency * breathe_effect * 0.01
                                                Chams.OutlineTransparency = ESP.Drawing.Chams.Outline_Transparency * breathe_effect * 0.01
                                            end
                                        end
                                        if ESP.Drawing.Chams.VisibleCheck then
                                            Chams.DepthMode = "Occluded"
                                        else
                                            Chams.DepthMode = "AlwaysOnTop"
                                        end
                                    end;
        
                                    do -- Corner Boxes
                                        LeftTop.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        LeftTop.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                                        LeftTop.Size = UDim2.new(0, w / 5, 0, 1)
                                        
                                        LeftSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        LeftSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                                        LeftSide.Size = UDim2.new(0, 1, 0, h / 5)
                                        
                                        BottomSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        BottomSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                                        BottomSide.Size = UDim2.new(0, 1, 0, h / 5)
                                        BottomSide.AnchorPoint = Vector2.new(0, 5)
                                        
                                        BottomDown.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        BottomDown.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                                        BottomDown.Size = UDim2.new(0, w / 5, 0, 1)
                                        BottomDown.AnchorPoint = Vector2.new(0, 1)
                                        
                                        RightTop.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        RightTop.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y - h / 2)
                                        RightTop.Size = UDim2.new(0, w / 5, 0, 1)
                                        RightTop.AnchorPoint = Vector2.new(1, 0)
                                        
                                        RightSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        RightSide.Position = UDim2.new(0, Pos.X + w / 2 - 1, 0, Pos.Y - h / 2)
                                        RightSide.Size = UDim2.new(0, 1, 0, h / 5)
                                        RightSide.AnchorPoint = Vector2.new(0, 0)
                                        
                                        BottomRightSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        BottomRightSide.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                                        BottomRightSide.Size = UDim2.new(0, 1, 0, h / 5)
                                        BottomRightSide.AnchorPoint = Vector2.new(1, 1)
                                        
                                        BottomRightDown.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        BottomRightDown.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                                        BottomRightDown.Size = UDim2.new(0, w / 5, 0, 1)
                                        BottomRightDown.AnchorPoint = Vector2.new(1, 1)                                                            
                                    end
        
                                    do -- Boxes
                                        Box.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                                        Box.Size = UDim2.new(0, w, 0, h)
                                        Box.Visible = ESP.Drawing.Boxes.Full.Enabled;
        
                                        -- Gradient
                                        if ESP.Drawing.Boxes.Filled.Enabled then
                                            Box.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                            if ESP.Drawing.Boxes.GradientFill then
                                                Box.BackgroundTransparency = ESP.Drawing.Boxes.Filled.Transparency;
                                            else
                                                Box.BackgroundTransparency = 1
                                            end
                                            Box.BorderSizePixel = 1
                                        else
                                            Box.BackgroundTransparency = 1
                                        end
                                        -- Animation
                                        RotationAngle = RotationAngle + (tick() - Tick) * ESP.Drawing.Boxes.RotationSpeed * math.cos(math.pi / 4 * tick() - math.pi / 2)
                                        if ESP.Drawing.Boxes.Animate then
                                            Gradient1.Rotation = RotationAngle
                                            Gradient2.Rotation = RotationAngle
                                        else
                                            Gradient1.Rotation = -45
                                            Gradient2.Rotation = -45
                                        end
                                        Tick = tick()
                                    end
        
                                    -- Healthbar
                                    do  
                                        local health = Humanoid.Health / Humanoid.MaxHealth;
                                        Healthbar.Visible = ESP.Drawing.Healthbar.Enabled;
                                        Healthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - health))  
                                        Healthbar.Size = UDim2.new(0, ESP.Drawing.Healthbar.Width, 0, h * health)  
                                        --
                                        BehindHealthbar.Visible = ESP.Drawing.Healthbar.Enabled;
                                        BehindHealthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2)  
                                        BehindHealthbar.Size = UDim2.new(0, ESP.Drawing.Healthbar.Width, 0, h)
                                        -- Health Text
                                        do
                                            if ESP.Drawing.Healthbar.HealthText then
                                                local healthPercentage = math.floor(Humanoid.Health / Humanoid.MaxHealth * 100)
                                                HealthText.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - healthPercentage / 100) + 3)
                                                HealthText.Text = tostring(healthPercentage)
                                                HealthText.Visible = Humanoid.Health < Humanoid.MaxHealth
                                                if ESP.Drawing.Healthbar.Lerp then
                                                    local color = health >= 0.75 and Color3.fromRGB(0, 255, 0) or health >= 0.5 and Color3.fromRGB(255, 255, 0) or health >= 0.25 and Color3.fromRGB(255, 170, 0) or Color3.fromRGB(255, 0, 0)
                                                    HealthText.TextColor3 = color
                                                else
                                                    HealthText.TextColor3 = ESP.Drawing.Healthbar.HealthTextRGB
                                                end
                                            end                        
                                        end
                                    end
        
                                    do -- Names
                                        Name.Visible = ESP.Drawing.Names.Enabled
                                        if ESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                                            Name.Text = string.format('(<font color="rgb(%d, %d, %d)">F</font>) %s', ESP.Options.FriendcheckRGB.R * 255, ESP.Options.FriendcheckRGB.G * 255, ESP.Options.FriendcheckRGB.B * 255, plr.Name)
                                        else
                                            Name.Text = string.format('(<font color="rgb(%d, %d, %d)">E</font>) %s', 255, 0, 0, plr.Name)
                                        end
                                        Name.Position = UDim2.new(0, Pos.X, 0, Pos.Y - h / 2 - 9)
                                    end
        
                                    --[[do -- Flags
                                        Flag1.Position = UDim2.new(0, Pos.X + w / 2 + 20, 0, Pos.Y - h / 2 + 3)                                
                                        if ESP.Drawing.Flags.Enabled then
                                            if false then
                                                Flag1.Visible = true;
                                                Flag1.TextColor3 = Color3.fromRGB(55, 200, 55)
                                            else
                                                Flag1.Visible = false;
                                                Flag1.Text = "";
                                            end
                                            Flag2.Position = UDim2.new(0, Pos.X + w / 2 + 16, 0, Pos.Y - h / 2 + 14)       
                                            if false then
                                                Flag2.Visible = true;                      
                                            else
                                                Flag2.Visible = false;
                                                Flag2.Text = "";
                                            end
                                        end
                                    end]]
                                    
                                    do -- Distance
                                        if ESP.Drawing.Distances.Enabled then
                                            if ESP.Drawing.Distances.Position == "Bottom" then
                                                Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 18)
                                                WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 15);
                                                Distance.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 7)
                                                Distance.Text = string.format("%d meters", math.floor(Dist))
                                                Distance.Visible = true
                                            elseif ESP.Drawing.Distances.Position == "Text" then
                                                Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 8)
                                                WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 5);
                                                Distance.Visible = false
                                                if ESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                                                    Name.Text = string.format('(<font color="rgb(%d, %d, %d)">F</font>) %s [%d]', ESP.Options.FriendcheckRGB.R * 255, ESP.Options.FriendcheckRGB.G * 255, ESP.Options.FriendcheckRGB.B * 255, plr.Name, math.floor(Dist))
                                                else
                                                    Name.Text = string.format('(<font color="rgb(%d, %d, %d)">E</font>) %s [%d]', 255, 0, 0, plr.Name, math.floor(Dist))
                                                end
                                                Name.Visible = ESP.Drawing.Names.Enabled
                                            end
                                        end
                                    end
        
                                    do -- Weapons
                                        local currentTool = Functions:GetPlayerTool(plr.Character)
                                        Weapon.Text = ESP.Drawing.Weapons.Enabled and string.format('[<font color="rgb(%d, %d, %d)">'.. currentTool ..'</font>]', ESP.Drawing.Weapons.WeaponTextRGB.R * 255, ESP.Drawing.Weapons.WeaponTextRGB.G * 255, ESP.Drawing.Weapons.WeaponTextRGB.B * 255) or ""
                                        Weapon.Visible = ESP.Drawing.Weapons.Enabled
                                        
                                        do -- Weapon icons
                                            local WeaponImage = Functions:GetPlayerToolImg(plr.Character)
                                            WeaponIcon.ImageColor3 = ESP.Drawing.Weapons.RGB
                                            if WeaponImage then
                                                WeaponIcon.Visible = ESP.Drawing.Weapons.Icons
                                                WeaponIcon.Image = WeaponImage
                                            else
                                                WeaponIcon.Visible = false
                                            end
                                        end
                                    end                            
                                else
                                    HideESP();
                                end
                            else
                                HideESP();
                            end
                        else
                            HideESP();
                        end
                    end)
                end
                coroutine.wrap(Updater)();
            end
            do -- Update ESP
                for _, v in pairs(game:GetService("Players"):GetPlayers()) do
                    if v.Name ~= lplayer.Name then
                        coroutine.wrap(ESP)(v)
                    end      
                end
                --
                game:GetService("Players").PlayerAdded:Connect(function(v)
                    coroutine.wrap(ESP)(v)
                end);
            end;
        end;
        
        
        -- Skybox
        local Sky = Lighting:FindFirstChildOfClass("Sky") or Instance.new("Sky", Lighting)
        local skyboxData = Skybox["Space Wave2"]
        for i, prop in ipairs({"SkyboxBk", "SkyboxDn", "SkyboxFt", "SkyboxLf", "SkyboxRt", "SkyboxUp"}) do
            Sky[prop] = "rbxassetid://" .. skyboxData[i]
        end
        Lighting.GlobalShadows = false;
                end})


--COMBAT

local ragesection = aimbotTab:createGroup('left', 'RAGE')
local legitsection = aimbotTab:createGroup('center', 'LEGIT')
local recoilsection = aimbotTab:createGroup('right', 'WEAPON MODS')


--skibidisigma


-- Toggles
ragesection:addToggle({
    name = "Silent Aim",
    flag = "Silent Aim",
    callback = function(value)
        local CHEAT_CLIENT = {} do
            do
                CHEAT_CLIENT.player = game.Players.LocalPlayer
                CHEAT_CLIENT.camera = game.Workspace.CurrentCamera
                CHEAT_CLIENT.mouse = CHEAT_CLIENT.player:GetMouse()
            end
         
            do
                function CHEAT_CLIENT:get_target()
                    local current_target = nil
                    local maximum_distance = math.huge
            
                    for i,v in pairs(game.Players:GetPlayers()) do
                        if v == game.Players.LocalPlayer then continue end
                        if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                            local position, on_screen = CHEAT_CLIENT.camera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
                            if not on_screen then continue end
                            local distance = (Vector2.new(position.X, position.Y - game.GuiService:GetGuiInset(game.GuiService).Y) - Vector2.new(CHEAT_CLIENT.mouse.X, CHEAT_CLIENT.mouse.Y)).Magnitude
                            if distance > maximum_distance then continue end
                            current_target = v
                            maximum_distance = distance
                        end
                    end
            
                    return current_target
                end
            
                function CHEAT_CLIENT:predict_velocity(target_part, projectile_speed)
                        local velocity = target_part.Velocity
            
                        local distance = (CHEAT_CLIENT.camera.CFrame.p - target_part.CFrame.p).Magnitude
                        local time_to_hit = (distance / projectile_speed)
            
                        local predicted_position = target_part.CFrame.p + (velocity * time_to_hit)
                        local delta = (predicted_position - target_part.CFrame.p).Magnitude
            
                        local final_projectile_speed = projectile_speed - 0.013 * projectile_speed ^ 2 * time_to_hit ^ 2
            
                        time_to_hit += (delta / final_projectile_speed)
            
                        return target_part.CFrame.p + (velocity * time_to_hit)
                end
            
                function CHEAT_CLIENT:predict_drop(target_part, projectile_speed, projectile_drop)
                        local distance = (CHEAT_CLIENT.camera.CFrame.p - target_part.CFrame.p).Magnitude
                        local time_to_hit = (distance / projectile_speed)
            
                        local final_projectile_speed = projectile_speed - 0.013 * projectile_speed ^ 2 * time_to_hit ^ 2
                        time_to_hit += (distance / final_projectile_speed)
            
                        local drop_timing = projectile_drop * time_to_hit ^ 2
            
                        if not tostring(drop_timing):find("nan") then
                            return drop_timing
                        end
                        return 0
                end
            
                function CHEAT_CLIENT:get_bullet_atribute(attribute)
                    local attribute_value = nil
                    local status = game.ReplicatedStorage.Players[CHEAT_CLIENT.player.Name]:FindFirstChild("Status")
                    if status then
                        local equipped_tool = status.GameplayVariables.EquippedTool.Value
                        if equipped_tool then
                            local inventory_equipped_tool = game.ReplicatedStorage.Players[CHEAT_CLIENT.player.Name].Inventory:FindFirstChild(tostring(equipped_tool))
                            if inventory_equipped_tool then
                                local mag = inventory_equipped_tool.Attachments:FindFirstChild("Magazine") and inventory_equipped_tool.Attachments:FindFirstChild("Magazine"):FindFirstChildOfClass("StringValue") and inventory_equipped_tool.Attachments:FindFirstChild("Magazine"):FindFirstChildOfClass("StringValue"):FindFirstChild("ItemProperties").LoadedAmmo or inventory_equipped_tool.ItemProperties:FindFirstChild("LoadedAmmo")
                                if mag then
                                    local first_bullet_type = mag:FindFirstChild("1")
                                    if first_bullet_type then
                                        attribute_value = game.ReplicatedStorage.AmmoTypes[first_bullet_type:GetAttribute("AmmoType")]:GetAttribute(attribute)
                                    end
                                end
                            end
                        end
                    end
                    return attribute_value
                end
            end
         end
         
         local silent_aim_hook; silent_aim_hook = hookfunction(require(game.ReplicatedStorage.Modules.FPS.Bullet).CreateBullet, function(...)
            local args = {...}
         
            if CHEAT_CLIENT:get_target() then
                local attribute_velocity = CHEAT_CLIENT:get_bullet_atribute("MuzzleVelocity")
                local attribute_drop = CHEAT_CLIENT:get_bullet_atribute("ProjectileDrop")
                local target_part = CHEAT_CLIENT:get_target() and CHEAT_CLIENT:get_target().Character:FindFirstChild("Head")
                if attribute_velocity and attribute_drop and target_part then
                    args[9] = {CFrame = CFrame.new(args[9].CFrame.p, CHEAT_CLIENT:predict_velocity(target_part, attribute_velocity) + Vector3.new(0, CHEAT_CLIENT:predict_drop(target_part, attribute_velocity, attribute_drop), 0))}
                end
            end
         
            return silent_aim_hook(unpack(args))
         end)
    end
})


        





--ESP

local playerespsection = espTab:createGroup('left', 'ESP')
local scavsection = espTab:createGroup('center', 'NPC')
local worldespsection = espTab:createGroup('right', 'WORLD')


playerespsection:addToggle({
    name = "Box (No Animation)",
    flag = "Box (No Animation)",
    callback = function(value)
        local Workspace, RunService, Players, CoreGui, Lighting = cloneref(game:GetService("Workspace")), cloneref(game:GetService("RunService")), cloneref(game:GetService("Players")), game:GetService("CoreGui"), cloneref(game:GetService("Lighting"))
local Skybox = loadstring(game:HttpGet("https://raw.githubusercontent.com/BurnHubz/eclipse/main/Skyboxes.lua", true))();

local utilities = {
aimbot = {
    target = nil
},
functions = {}
};

local aimbot = {
enabled = false,
randomisation = 0,
distance = 200,
speed = 0.5,
autoprediction = true,
teamcheck = false,
bone = "Head",
--
fov_circle = false,
dynamic = true,
radius = 120,
position = "Mouse",
--
snapline = false,
snapline_color = Color3.fromRGB(255, 255, 255),
snapline_bone = "HumanoidRootPart",
snapline_from = "Mouse",
};

local Player_Modifications = {
Omni_Sprint = {
    Enabled = false,
    Speed = 25,
},
};

local ESP = {
Enabled = true,
TeamCheck = true,
MaxDistance = 5000,
FontSize = 11,
FadeOut = {
    OnDistance = true,
    OnDeath = false,
    OnLeave = false,
},
Options = { 
    Teamcheck = false, TeamcheckRGB = Color3.fromRGB(0, 255, 0),
    Friendcheck = true, FriendcheckRGB = Color3.fromRGB(0, 255, 0),
    Highlight = false, HighlightRGB = Color3.fromRGB(255, 0, 0),
},
Drawing = {
    Chams = {
        Enabled  = false,
        Thermal = true,
        FillRGB = Color3.fromRGB(119, 120, 255),
        Fill_Transparency = 100,
        OutlineRGB = Color3.fromRGB(119, 120, 255),
        Outline_Transparency = 100,
        VisibleCheck = true,
    },
    Names = {
        Enabled = false,
        RGB = Color3.fromRGB(255, 255, 255),
    },
    Flags = {
        Enabled = true,
    },
    Distances = {
        Enabled = false, 
        Position = "Text",
        RGB = Color3.fromRGB(255, 255, 255),
    },
    Weapons = {
        Enabled = false, WeaponTextRGB = Color3.fromRGB(119, 120, 255),
        Outlined = false,
        Icons = true, RGB = Color3.fromRGB(255, 255, 255),
        Gradient = false,
        GradientRGB1 = Color3.fromRGB(255, 255, 255), GradientRGB2 = Color3.fromRGB(119, 120, 255),
    },
    Healthbar = {
        Enabled = false,  
        HealthText = true, Lerp = false, HealthTextRGB = Color3.fromRGB(119, 120, 255),
        Width = 2.5,
        Gradient = true, GradientRGB1 = Color3.fromRGB(0, 0, 0), GradientRGB2 = Color3.fromRGB(60, 60, 125), GradientRGB3 = Color3.fromRGB(119, 120, 255), 
    },
    Boxes = {
        Animate = false,
        RotationSpeed = 150,
        Gradient = false, GradientRGB1 = Color3.fromRGB(156,39,176), GradientRGB2 = Color3.fromRGB(0, 0, 0), 
        GradientFill = false, GradientFillRGB1 = Color3.fromRGB(156,39,176), GradientFillRGB2 = Color3.fromRGB(0, 0, 0), 
        Filled = {
            Enabled = false,
            Transparency = 0.75,
            RGB = Color3.fromRGB(0, 0, 0),
        },
        Full = {
            Enabled = true,
            RGB = Color3.fromRGB(255, 255, 255),
        },
        Corner = {
            Enabled = true,
            RGB = Color3.fromRGB(255, 255, 255),
        },
    };
};
Items = {
    Enabled = true,
    Icons = false,
    RGB = Color3.fromRGB(255, 255, 255)
},
Connections = {
    RunService = RunService;
};
Fovcircle = {};
Fonts = {};
}

-- Def & Vars
local Euphoria = ESP.Connections;
local lplayer = Players.LocalPlayer;
local camera = game.Workspace.CurrentCamera;
local Cam = Workspace.CurrentCamera;
local RotationAngle, Tick = -45, tick();

-- Weapon Images
local Weapon_Icons = {
["Wooden Bow"] = "http://www.roblox.com/asset/?id=17677465400",
["Crossbow"] = "http://www.roblox.com/asset/?id=17677473017",
["Salvaged SMG"] = "http://www.roblox.com/asset/?id=17677463033",
["Salvaged AK47"] = "http://www.roblox.com/asset/?id=17677455113",
["Salvaged AK74u"] = "http://www.roblox.com/asset/?id=17677442346",
["Salvaged M14"] = "http://www.roblox.com/asset/?id=17677444642",
["Salvaged Python"] = "http://www.roblox.com/asset/?id=17677451737",
["Military PKM"] = "http://www.roblox.com/asset/?id=17677449448",
["Military M4A1"] = "http://www.roblox.com/asset/?id=17677479536",
["Bruno's M4A1"] = "http://www.roblox.com/asset/?id=17677471185",
["Military Barrett"] = "http://www.roblox.com/asset/?id=17677482998",
["Salvaged Skorpion"] = "http://www.roblox.com/asset/?id=17677459658",
["Salvaged Pump Action"] = "http://www.roblox.com/asset/?id=17677457186",
["Military AA12"] = "http://www.roblox.com/asset/?id=17677475227",
["Salvaged Break Action"] = "http://www.roblox.com/asset/?id=17677468751",
["Salvaged Pipe Rifle"] = "http://www.roblox.com/asset/?id=17677468751",
["Salvaged P250"] = "http://www.roblox.com/asset/?id=17677447257",
["Nail Gun"] = "http://www.roblox.com/asset/?id=17677484756"
};

-- Functions
local Functions = {}
do
function Functions:Create(Class, Properties)
    local _Instance = typeof(Class) == 'string' and Instance.new(Class) or Class
    for Property, Value in pairs(Properties) do
        _Instance[Property] = Value
    end
    return _Instance;
end
--
function Functions:GetPlayerTool(Character)
    for _, value in pairs(Character:GetChildren()) do
        if value.Name ~= "HolsterModel" and value:IsA("Model") and value.Name ~= "Hair" and (value:FindFirstChild("Detail") or value:FindFirstChild("Main") or value:FindFirstChild("Handle") or value:FindFirstChild("Attachments") or value:FindFirstChild("ArrowAttach") or value:FindFirstChild("Attach")) and value.PrimaryPart then
            return value.Name;
        end
    end
    return "none"
end    
function Functions:GetPlayerToolImg(Character)
    for _, value in pairs(Character:GetChildren()) do
        if value.Name ~= "HolsterModel" and value:IsA("Model") and value.Name ~= "Hair" and (value:FindFirstChild("Detail") or value:FindFirstChild("Main") or value:FindFirstChild("Handle") or value:FindFirstChild("Attachments") or value:FindFirstChild("ArrowAttach") or value:FindFirstChild("Attach")) and value.PrimaryPart then
            return Weapon_Icons[value.Name] ;
        end
    end
    return nil
end     
--
function Functions:FadeOutOnDist(element, distance)
    local transparency = math.max(0.1, 1 - (distance / ESP.MaxDistance))
    if element:IsA("TextLabel") then
        element.TextTransparency = 1 - transparency
    elseif element:IsA("ImageLabel") then
        element.ImageTransparency = 1 - transparency
    elseif element:IsA("UIStroke") then
        element.Transparency = 1 - transparency
    elseif element:IsA("Frame") and (element == Healthbar or element == BehindHealthbar) then
        element.BackgroundTransparency = 1 - transparency
    elseif element:IsA("Frame") then
        element.BackgroundTransparency = 1 - transparency
    elseif element:IsA("Highlight") then
        element.FillTransparency = 1 - transparency
        element.OutlineTransparency = 1 - transparency
    end;
end;  
end;

do -- Initalize
local ScreenGui = Functions:Create("ScreenGui", {
    Parent = CoreGui,
    Name = "ESPHolder",
});

local DupeCheck = function(plr)
    if ScreenGui:FindFirstChild(plr.Name) then
        ScreenGui[plr.Name]:Destroy()
    end
end

local ESP = function(plr)
    coroutine.wrap(DupeCheck)(plr) -- Dupecheck
    local Name = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, -11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
    local Distance = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
    local Weapon = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
    local Box = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0.75, BorderSizePixel = 0})
    local Gradient1 = Functions:Create("UIGradient", {Parent = Box, Enabled = ESP.Drawing.Boxes.GradientFill, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientFillRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientFillRGB2)}})
    local Outline = Functions:Create("UIStroke", {Parent = Box, Enabled = ESP.Drawing.Boxes.Gradient, Transparency = 0, Color = Color3.fromRGB(255, 255, 255), LineJoinMode = Enum.LineJoinMode.Miter})
    local Gradient2 = Functions:Create("UIGradient", {Parent = Outline, Enabled = ESP.Drawing.Boxes.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientRGB2)}})
    local Healthbar = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 0})
    local BehindHealthbar = Functions:Create("Frame", {Parent = ScreenGui, ZIndex = -1, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0})
    local HealthbarGradient = Functions:Create("UIGradient", {Parent = Healthbar, Enabled = ESP.Drawing.Healthbar.Gradient, Rotation = -90, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Healthbar.GradientRGB1), ColorSequenceKeypoint.new(0.5, ESP.Drawing.Healthbar.GradientRGB2), ColorSequenceKeypoint.new(1, ESP.Drawing.Healthbar.GradientRGB3)}})
    local HealthText = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
    local Chams = Functions:Create("Highlight", {Parent = ScreenGui, FillTransparency = 1, OutlineTransparency = 0, OutlineColor = Color3.fromRGB(119, 120, 255), DepthMode = "AlwaysOnTop"})
    local WeaponIcon = Functions:Create("ImageLabel", {Parent = ScreenGui, BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(0, 40, 0, 40)})
    local Gradient3 = Functions:Create("UIGradient", {Parent = WeaponIcon, Rotation = -90, Enabled = ESP.Drawing.Weapons.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Weapons.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Weapons.GradientRGB2)}})
    local LeftTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local LeftSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local RightTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local RightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local BottomSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local BottomDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local BottomRightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local BottomRightDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local Flag1 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
    local Flag2 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
    --local DroppedItems = Functions:Create("TextLabel", {Parent = ScreenGui, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
    --
    local Updater = function()
        local Connection;
        local function HideESP()
            Box.Visible = false;
            Name.Visible = false;
            Distance.Visible = false;
            Weapon.Visible = false;
            Healthbar.Visible = false;
            BehindHealthbar.Visible = false;
            HealthText.Visible = false;
            WeaponIcon.Visible = false;
            LeftTop.Visible = false;
            LeftSide.Visible = false;
            BottomSide.Visible = false;
            BottomDown.Visible = false;
            RightTop.Visible = false;
            RightSide.Visible = false;
            BottomRightSide.Visible = false;
            BottomRightDown.Visible = false;
            Flag1.Visible = false;
            Chams.Enabled = false;
            Flag2.Visible = false;
            if not plr then
                ScreenGui:Destroy();
                Connection:Disconnect();
            end
        end
        --
        Connection = Euphoria.RunService.RenderStepped:Connect(function()
            --[[ do -- Item ESP
                if ESP.Items.Enabled then
                    for _, debrisPart in pairs(workspace.Debris:GetChildren()) do
                        if debrisPart:IsA("BasePart") then
                            local item_pos = debrisPart.Position
                            local screen_pos, onScreen = Cam:WorldToScreenPoint(item_pos)
                            DroppedItems.Text = debrisPart.Name
                            DroppedItems.Position = UDim2.new(0, screen_pos.X, 0, screen_pos.Y)
                            DroppedItems.Visible = onScreen
                        end
                    end
                else
                    DroppedItems.Visible = false
                end         
            end]]
            --
            if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                local HRP = plr.Character.HumanoidRootPart
                local Humanoid = plr.Character:WaitForChild("Humanoid");
                local Pos, OnScreen = Cam:WorldToScreenPoint(HRP.Position)
                local Dist = (Cam.CFrame.Position - HRP.Position).Magnitude / 3.5714285714
                
                if OnScreen and Dist <= ESP.MaxDistance then
                    local Size = HRP.Size.Y
                    local scaleFactor = (Size * Cam.ViewportSize.Y) / (Pos.Z * 2)
                    local w, h = 3 * scaleFactor, 4.5 * scaleFactor

                    -- Fade-out effect --
                    if ESP.FadeOut.OnDistance then
                        Functions:FadeOutOnDist(Box, Dist)
                        Functions:FadeOutOnDist(Outline, Dist)
                        Functions:FadeOutOnDist(Name, Dist)
                        Functions:FadeOutOnDist(Distance, Dist)
                        Functions:FadeOutOnDist(Weapon, Dist)
                        Functions:FadeOutOnDist(Healthbar, Dist)
                        Functions:FadeOutOnDist(BehindHealthbar, Dist)
                        Functions:FadeOutOnDist(HealthText, Dist)
                        Functions:FadeOutOnDist(WeaponIcon, Dist)
                        Functions:FadeOutOnDist(LeftTop, Dist)
                        Functions:FadeOutOnDist(LeftSide, Dist)
                        Functions:FadeOutOnDist(BottomSide, Dist)
                        Functions:FadeOutOnDist(BottomDown, Dist)
                        Functions:FadeOutOnDist(RightTop, Dist)
                        Functions:FadeOutOnDist(RightSide, Dist)
                        Functions:FadeOutOnDist(BottomRightSide, Dist)
                        Functions:FadeOutOnDist(BottomRightDown, Dist)
                        Functions:FadeOutOnDist(Chams, Dist)
                        Functions:FadeOutOnDist(Flag1, Dist)
                        Functions:FadeOutOnDist(Flag2, Dist)
                    end

                    -- Teamcheck
                    if ESP.TeamCheck and plr ~= lplayer and ((lplayer.Team ~= plr.Team and plr.Team) or (not lplayer.Team and not plr.Team)) and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Humanoid") then

                        do -- Chams
                            Chams.Adornee = plr.Character
                            Chams.Enabled = ESP.Drawing.Chams.Enabled
                            Chams.FillColor = ESP.Drawing.Chams.FillRGB
                            Chams.OutlineColor = ESP.Drawing.Chams.OutlineRGB
                            do -- Breathe
                                if ESP.Drawing.Chams.Thermal then
                                    local breathe_effect = math.atan(math.sin(tick() * 2)) * 2 / math.pi
                                    Chams.FillTransparency = ESP.Drawing.Chams.Fill_Transparency * breathe_effect * 0.01
                                    Chams.OutlineTransparency = ESP.Drawing.Chams.Outline_Transparency * breathe_effect * 0.01
                                end
                            end
                            if ESP.Drawing.Chams.VisibleCheck then
                                Chams.DepthMode = "Occluded"
                            else
                                Chams.DepthMode = "AlwaysOnTop"
                            end
                        end;

                        do -- Corner Boxes
                            LeftTop.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            LeftTop.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                            LeftTop.Size = UDim2.new(0, w / 5, 0, 1)
                            
                            LeftSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            LeftSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                            LeftSide.Size = UDim2.new(0, 1, 0, h / 5)
                            
                            BottomSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            BottomSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                            BottomSide.Size = UDim2.new(0, 1, 0, h / 5)
                            BottomSide.AnchorPoint = Vector2.new(0, 5)
                            
                            BottomDown.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            BottomDown.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                            BottomDown.Size = UDim2.new(0, w / 5, 0, 1)
                            BottomDown.AnchorPoint = Vector2.new(0, 1)
                            
                            RightTop.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            RightTop.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y - h / 2)
                            RightTop.Size = UDim2.new(0, w / 5, 0, 1)
                            RightTop.AnchorPoint = Vector2.new(1, 0)
                            
                            RightSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            RightSide.Position = UDim2.new(0, Pos.X + w / 2 - 1, 0, Pos.Y - h / 2)
                            RightSide.Size = UDim2.new(0, 1, 0, h / 5)
                            RightSide.AnchorPoint = Vector2.new(0, 0)
                            
                            BottomRightSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            BottomRightSide.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                            BottomRightSide.Size = UDim2.new(0, 1, 0, h / 5)
                            BottomRightSide.AnchorPoint = Vector2.new(1, 1)
                            
                            BottomRightDown.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            BottomRightDown.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                            BottomRightDown.Size = UDim2.new(0, w / 5, 0, 1)
                            BottomRightDown.AnchorPoint = Vector2.new(1, 1)                                                            
                        end

                        do -- Boxes
                            Box.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                            Box.Size = UDim2.new(0, w, 0, h)
                            Box.Visible = ESP.Drawing.Boxes.Full.Enabled;

                            -- Gradient
                            if ESP.Drawing.Boxes.Filled.Enabled then
                                Box.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                if ESP.Drawing.Boxes.GradientFill then
                                    Box.BackgroundTransparency = ESP.Drawing.Boxes.Filled.Transparency;
                                else
                                    Box.BackgroundTransparency = 1
                                end
                                Box.BorderSizePixel = 1
                            else
                                Box.BackgroundTransparency = 1
                            end
                            -- Animation
                            RotationAngle = RotationAngle + (tick() - Tick) * ESP.Drawing.Boxes.RotationSpeed * math.cos(math.pi / 4 * tick() - math.pi / 2)
                            if ESP.Drawing.Boxes.Animate then
                                Gradient1.Rotation = RotationAngle
                                Gradient2.Rotation = RotationAngle
                            else
                                Gradient1.Rotation = -45
                                Gradient2.Rotation = -45
                            end
                            Tick = tick()
                        end

                        -- Healthbar
                        do  
                            local health = Humanoid.Health / Humanoid.MaxHealth;
                            Healthbar.Visible = ESP.Drawing.Healthbar.Enabled;
                            Healthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - health))  
                            Healthbar.Size = UDim2.new(0, ESP.Drawing.Healthbar.Width, 0, h * health)  
                            --
                            BehindHealthbar.Visible = ESP.Drawing.Healthbar.Enabled;
                            BehindHealthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2)  
                            BehindHealthbar.Size = UDim2.new(0, ESP.Drawing.Healthbar.Width, 0, h)
                            -- Health Text
                            do
                                if ESP.Drawing.Healthbar.HealthText then
                                    local healthPercentage = math.floor(Humanoid.Health / Humanoid.MaxHealth * 100)
                                    HealthText.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - healthPercentage / 100) + 3)
                                    HealthText.Text = tostring(healthPercentage)
                                    HealthText.Visible = Humanoid.Health < Humanoid.MaxHealth
                                    if ESP.Drawing.Healthbar.Lerp then
                                        local color = health >= 0.75 and Color3.fromRGB(0, 255, 0) or health >= 0.5 and Color3.fromRGB(255, 255, 0) or health >= 0.25 and Color3.fromRGB(255, 170, 0) or Color3.fromRGB(255, 0, 0)
                                        HealthText.TextColor3 = color
                                    else
                                        HealthText.TextColor3 = ESP.Drawing.Healthbar.HealthTextRGB
                                    end
                                end                        
                            end
                        end

                        do -- Names
                            Name.Visible = ESP.Drawing.Names.Enabled
                            if ESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                                Name.Text = string.format('(<font color="rgb(%d, %d, %d)">Friendly</font>) %s', ESP.Options.FriendcheckRGB.R * 255, ESP.Options.FriendcheckRGB.G * 255, ESP.Options.FriendcheckRGB.B * 255, plr.Name)
                            else
                                Name.Text = string.format('(<font color="rgb(%d, %d, %d)">Enemy</font>) %s', 255, 0, 0, plr.Name)
                            end
                            Name.Position = UDim2.new(0, Pos.X, 0, Pos.Y - h / 2 - 9)
                        end

                        --[[do -- Flags
                            Flag1.Position = UDim2.new(0, Pos.X + w / 2 + 20, 0, Pos.Y - h / 2 + 3)                                
                            if ESP.Drawing.Flags.Enabled then
                                if false then
                                    Flag1.Visible = true;
                                    Flag1.TextColor3 = Color3.fromRGB(55, 200, 55)
                                else
                                    Flag1.Visible = false;
                                    Flag1.Text = "";
                                end
                                Flag2.Position = UDim2.new(0, Pos.X + w / 2 + 16, 0, Pos.Y - h / 2 + 14)       
                                if false then
                                    Flag2.Visible = true;                      
                                else
                                    Flag2.Visible = false;
                                    Flag2.Text = "";
                                end
                            end
                        end]]
                        
                        do -- Distance
                            if ESP.Drawing.Distances.Enabled then
                                if ESP.Drawing.Distances.Position == "Bottom" then
                                    Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 18)
                                    WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 15);
                                    Distance.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 7)
                                    Distance.Text = string.format("%d meters", math.floor(Dist))
                                    Distance.Visible = true
                                elseif ESP.Drawing.Distances.Position == "Text" then
                                    Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 8)
                                    WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 5);
                                    Distance.Visible = false
                                    if ESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                                        Name.Text = string.format('(<font color="rgb(%d, %d, %d)">F</font>) %s [%d]', ESP.Options.FriendcheckRGB.R * 255, ESP.Options.FriendcheckRGB.G * 255, ESP.Options.FriendcheckRGB.B * 255, plr.Name, math.floor(Dist))
                                    else
                                        Name.Text = string.format('(<font color="rgb(%d, %d, %d)">E</font>) %s [%d]', 255, 0, 0, plr.Name, math.floor(Dist))
                                    end
                                    Name.Visible = ESP.Drawing.Names.Enabled
                                end
                            end
                        end

                        do -- Weapons
                            local currentTool = Functions:GetPlayerTool(plr.Character)
                            Weapon.Text = ESP.Drawing.Weapons.Enabled and string.format('[<font color="rgb(%d, %d, %d)">'.. currentTool ..'</font>]', ESP.Drawing.Weapons.WeaponTextRGB.R * 255, ESP.Drawing.Weapons.WeaponTextRGB.G * 255, ESP.Drawing.Weapons.WeaponTextRGB.B * 255) or ""
                            Weapon.Visible = ESP.Drawing.Weapons.Enabled
                            
                            do -- Weapon icons
                                local WeaponImage = Functions:GetPlayerToolImg(plr.Character)
                                WeaponIcon.ImageColor3 = ESP.Drawing.Weapons.RGB
                                if WeaponImage then
                                    WeaponIcon.Visible = ESP.Drawing.Weapons.Icons
                                    WeaponIcon.Image = WeaponImage
                                else
                                    WeaponIcon.Visible = false
                                end
                            end
                        end                            
                    else
                        HideESP();
                    end
                else
                    HideESP();
                end
            else
                HideESP();
            end
        end)
    end
    coroutine.wrap(Updater)();
end
do -- Update ESP
    for _, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v.Name ~= lplayer.Name then
            coroutine.wrap(ESP)(v)
        end      
    end
    --
    game:GetService("Players").PlayerAdded:Connect(function(v)
        coroutine.wrap(ESP)(v)
    end);
end;
end;


end
})




playerespsection:addToggle({
    name = "Box (With Animation)",
    flag = "Box (With Animation)",
    callback = function(value)
        local Workspace, RunService, Players, CoreGui, Lighting = cloneref(game:GetService("Workspace")), cloneref(game:GetService("RunService")), cloneref(game:GetService("Players")), game:GetService("CoreGui"), cloneref(game:GetService("Lighting"))
local Skybox = loadstring(game:HttpGet("https://raw.githubusercontent.com/BurnHubz/eclipse/main/Skyboxes.lua", true))();

local utilities = {
aimbot = {
    target = nil
},
functions = {}
};

local aimbot = {
enabled = false,
randomisation = 0,
distance = 200,
speed = 0.5,
autoprediction = true,
teamcheck = false,
bone = "Head",
--
fov_circle = false,
dynamic = true,
radius = 120,
position = "Mouse",
--
snapline = false,
snapline_color = Color3.fromRGB(255, 255, 255),
snapline_bone = "HumanoidRootPart",
snapline_from = "Mouse",
};

local Player_Modifications = {
Omni_Sprint = {
    Enabled = false,
    Speed = 25,
},
};

local ESP = {
Enabled = true,
TeamCheck = true,
MaxDistance = 5000,
FontSize = 11,
FadeOut = {
    OnDistance = true,
    OnDeath = false,
    OnLeave = false,
},
Options = { 
    Teamcheck = false, TeamcheckRGB = Color3.fromRGB(0, 255, 0),
    Friendcheck = true, FriendcheckRGB = Color3.fromRGB(0, 255, 0),
    Highlight = false, HighlightRGB = Color3.fromRGB(255, 0, 0),
},
Drawing = {
    Chams = {
        Enabled  = false,
        Thermal = true,
        FillRGB = Color3.fromRGB(119, 120, 255),
        Fill_Transparency = 100,
        OutlineRGB = Color3.fromRGB(119, 120, 255),
        Outline_Transparency = 100,
        VisibleCheck = true,
    },
    Names = {
        Enabled = false,
        RGB = Color3.fromRGB(255, 255, 255),
    },
    Flags = {
        Enabled = true,
    },
    Distances = {
        Enabled = false, 
        Position = "Text",
        RGB = Color3.fromRGB(255, 255, 255),
    },
    Weapons = {
        Enabled = false, WeaponTextRGB = Color3.fromRGB(119, 120, 255),
        Outlined = false,
        Icons = true, RGB = Color3.fromRGB(255, 255, 255),
        Gradient = false,
        GradientRGB1 = Color3.fromRGB(255, 255, 255), GradientRGB2 = Color3.fromRGB(119, 120, 255),
    },
    Healthbar = {
        Enabled = false,  
        HealthText = true, Lerp = false, HealthTextRGB = Color3.fromRGB(119, 120, 255),
        Width = 2.5,
        Gradient = true, GradientRGB1 = Color3.fromRGB(0, 0, 0), GradientRGB2 = Color3.fromRGB(60, 60, 125), GradientRGB3 = Color3.fromRGB(119, 120, 255), 
    },
    Boxes = {
        Animate = true,
        RotationSpeed = 150,
        Gradient = true, GradientRGB1 = Color3.fromRGB(156,39,176), GradientRGB2 = Color3.fromRGB(0, 0, 0), 
        GradientFill = true, GradientFillRGB1 = Color3.fromRGB(156,39,176), GradientFillRGB2 = Color3.fromRGB(0, 0, 0), 
        Filled = {
            Enabled = true,
            Transparency = 0.75,
            RGB = Color3.fromRGB(0, 0, 0),
        },
        Full = {
            Enabled = true,
            RGB = Color3.fromRGB(255, 255, 255),
        },
        Corner = {
            Enabled = false,
            RGB = Color3.fromRGB(255, 255, 255),
        },
    };
};
Items = {
    Enabled = true,
    Icons = false,
    RGB = Color3.fromRGB(255, 255, 255)
},
Connections = {
    RunService = RunService;
};
Fovcircle = {};
Fonts = {};
}

-- Def & Vars
local Euphoria = ESP.Connections;
local lplayer = Players.LocalPlayer;
local camera = game.Workspace.CurrentCamera;
local Cam = Workspace.CurrentCamera;
local RotationAngle, Tick = -45, tick();

-- Weapon Images
local Weapon_Icons = {
["Wooden Bow"] = "http://www.roblox.com/asset/?id=17677465400",
["Crossbow"] = "http://www.roblox.com/asset/?id=17677473017",
["Salvaged SMG"] = "http://www.roblox.com/asset/?id=17677463033",
["Salvaged AK47"] = "http://www.roblox.com/asset/?id=17677455113",
["Salvaged AK74u"] = "http://www.roblox.com/asset/?id=17677442346",
["Salvaged M14"] = "http://www.roblox.com/asset/?id=17677444642",
["Salvaged Python"] = "http://www.roblox.com/asset/?id=17677451737",
["Military PKM"] = "http://www.roblox.com/asset/?id=17677449448",
["Military M4A1"] = "http://www.roblox.com/asset/?id=17677479536",
["Bruno's M4A1"] = "http://www.roblox.com/asset/?id=17677471185",
["Military Barrett"] = "http://www.roblox.com/asset/?id=17677482998",
["Salvaged Skorpion"] = "http://www.roblox.com/asset/?id=17677459658",
["Salvaged Pump Action"] = "http://www.roblox.com/asset/?id=17677457186",
["Military AA12"] = "http://www.roblox.com/asset/?id=17677475227",
["Salvaged Break Action"] = "http://www.roblox.com/asset/?id=17677468751",
["Salvaged Pipe Rifle"] = "http://www.roblox.com/asset/?id=17677468751",
["Salvaged P250"] = "http://www.roblox.com/asset/?id=17677447257",
["Nail Gun"] = "http://www.roblox.com/asset/?id=17677484756"
};

-- Functions
local Functions = {}
do
function Functions:Create(Class, Properties)
    local _Instance = typeof(Class) == 'string' and Instance.new(Class) or Class
    for Property, Value in pairs(Properties) do
        _Instance[Property] = Value
    end
    return _Instance;
end
--
function Functions:GetPlayerTool(Character)
    for _, value in pairs(Character:GetChildren()) do
        if value.Name ~= "HolsterModel" and value:IsA("Model") and value.Name ~= "Hair" and (value:FindFirstChild("Detail") or value:FindFirstChild("Main") or value:FindFirstChild("Handle") or value:FindFirstChild("Attachments") or value:FindFirstChild("ArrowAttach") or value:FindFirstChild("Attach")) and value.PrimaryPart then
            return value.Name;
        end
    end
    return "none"
end    
function Functions:GetPlayerToolImg(Character)
    for _, value in pairs(Character:GetChildren()) do
        if value.Name ~= "HolsterModel" and value:IsA("Model") and value.Name ~= "Hair" and (value:FindFirstChild("Detail") or value:FindFirstChild("Main") or value:FindFirstChild("Handle") or value:FindFirstChild("Attachments") or value:FindFirstChild("ArrowAttach") or value:FindFirstChild("Attach")) and value.PrimaryPart then
            return Weapon_Icons[value.Name] ;
        end
    end
    return nil
end     
--
function Functions:FadeOutOnDist(element, distance)
    local transparency = math.max(0.1, 1 - (distance / ESP.MaxDistance))
    if element:IsA("TextLabel") then
        element.TextTransparency = 1 - transparency
    elseif element:IsA("ImageLabel") then
        element.ImageTransparency = 1 - transparency
    elseif element:IsA("UIStroke") then
        element.Transparency = 1 - transparency
    elseif element:IsA("Frame") and (element == Healthbar or element == BehindHealthbar) then
        element.BackgroundTransparency = 1 - transparency
    elseif element:IsA("Frame") then
        element.BackgroundTransparency = 1 - transparency
    elseif element:IsA("Highlight") then
        element.FillTransparency = 1 - transparency
        element.OutlineTransparency = 1 - transparency
    end;
end;  
end;

do -- Initalize
local ScreenGui = Functions:Create("ScreenGui", {
    Parent = CoreGui,
    Name = "ESPHolder",
});

local DupeCheck = function(plr)
    if ScreenGui:FindFirstChild(plr.Name) then
        ScreenGui[plr.Name]:Destroy()
    end
end

local ESP = function(plr)
    coroutine.wrap(DupeCheck)(plr) -- Dupecheck
    local Name = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, -11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
    local Distance = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
    local Weapon = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
    local Box = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0.75, BorderSizePixel = 0})
    local Gradient1 = Functions:Create("UIGradient", {Parent = Box, Enabled = ESP.Drawing.Boxes.GradientFill, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientFillRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientFillRGB2)}})
    local Outline = Functions:Create("UIStroke", {Parent = Box, Enabled = ESP.Drawing.Boxes.Gradient, Transparency = 0, Color = Color3.fromRGB(255, 255, 255), LineJoinMode = Enum.LineJoinMode.Miter})
    local Gradient2 = Functions:Create("UIGradient", {Parent = Outline, Enabled = ESP.Drawing.Boxes.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientRGB2)}})
    local Healthbar = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 0})
    local BehindHealthbar = Functions:Create("Frame", {Parent = ScreenGui, ZIndex = -1, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0})
    local HealthbarGradient = Functions:Create("UIGradient", {Parent = Healthbar, Enabled = ESP.Drawing.Healthbar.Gradient, Rotation = -90, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Healthbar.GradientRGB1), ColorSequenceKeypoint.new(0.5, ESP.Drawing.Healthbar.GradientRGB2), ColorSequenceKeypoint.new(1, ESP.Drawing.Healthbar.GradientRGB3)}})
    local HealthText = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
    local Chams = Functions:Create("Highlight", {Parent = ScreenGui, FillTransparency = 1, OutlineTransparency = 0, OutlineColor = Color3.fromRGB(119, 120, 255), DepthMode = "AlwaysOnTop"})
    local WeaponIcon = Functions:Create("ImageLabel", {Parent = ScreenGui, BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(0, 40, 0, 40)})
    local Gradient3 = Functions:Create("UIGradient", {Parent = WeaponIcon, Rotation = -90, Enabled = ESP.Drawing.Weapons.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Weapons.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Weapons.GradientRGB2)}})
    local LeftTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local LeftSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local RightTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local RightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local BottomSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local BottomDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local BottomRightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local BottomRightDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local Flag1 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
    local Flag2 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
    --local DroppedItems = Functions:Create("TextLabel", {Parent = ScreenGui, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
    --
    local Updater = function()
        local Connection;
        local function HideESP()
            Box.Visible = false;
            Name.Visible = false;
            Distance.Visible = false;
            Weapon.Visible = false;
            Healthbar.Visible = false;
            BehindHealthbar.Visible = false;
            HealthText.Visible = false;
            WeaponIcon.Visible = false;
            LeftTop.Visible = false;
            LeftSide.Visible = false;
            BottomSide.Visible = false;
            BottomDown.Visible = false;
            RightTop.Visible = false;
            RightSide.Visible = false;
            BottomRightSide.Visible = false;
            BottomRightDown.Visible = false;
            Flag1.Visible = false;
            Chams.Enabled = false;
            Flag2.Visible = false;
            if not plr then
                ScreenGui:Destroy();
                Connection:Disconnect();
            end
        end
        --
        Connection = Euphoria.RunService.RenderStepped:Connect(function()
            --[[ do -- Item ESP
                if ESP.Items.Enabled then
                    for _, debrisPart in pairs(workspace.Debris:GetChildren()) do
                        if debrisPart:IsA("BasePart") then
                            local item_pos = debrisPart.Position
                            local screen_pos, onScreen = Cam:WorldToScreenPoint(item_pos)
                            DroppedItems.Text = debrisPart.Name
                            DroppedItems.Position = UDim2.new(0, screen_pos.X, 0, screen_pos.Y)
                            DroppedItems.Visible = onScreen
                        end
                    end
                else
                    DroppedItems.Visible = false
                end         
            end]]
            --
            if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                local HRP = plr.Character.HumanoidRootPart
                local Humanoid = plr.Character:WaitForChild("Humanoid");
                local Pos, OnScreen = Cam:WorldToScreenPoint(HRP.Position)
                local Dist = (Cam.CFrame.Position - HRP.Position).Magnitude / 3.5714285714
                
                if OnScreen and Dist <= ESP.MaxDistance then
                    local Size = HRP.Size.Y
                    local scaleFactor = (Size * Cam.ViewportSize.Y) / (Pos.Z * 2)
                    local w, h = 3 * scaleFactor, 4.5 * scaleFactor

                    -- Fade-out effect --
                    if ESP.FadeOut.OnDistance then
                        Functions:FadeOutOnDist(Box, Dist)
                        Functions:FadeOutOnDist(Outline, Dist)
                        Functions:FadeOutOnDist(Name, Dist)
                        Functions:FadeOutOnDist(Distance, Dist)
                        Functions:FadeOutOnDist(Weapon, Dist)
                        Functions:FadeOutOnDist(Healthbar, Dist)
                        Functions:FadeOutOnDist(BehindHealthbar, Dist)
                        Functions:FadeOutOnDist(HealthText, Dist)
                        Functions:FadeOutOnDist(WeaponIcon, Dist)
                        Functions:FadeOutOnDist(LeftTop, Dist)
                        Functions:FadeOutOnDist(LeftSide, Dist)
                        Functions:FadeOutOnDist(BottomSide, Dist)
                        Functions:FadeOutOnDist(BottomDown, Dist)
                        Functions:FadeOutOnDist(RightTop, Dist)
                        Functions:FadeOutOnDist(RightSide, Dist)
                        Functions:FadeOutOnDist(BottomRightSide, Dist)
                        Functions:FadeOutOnDist(BottomRightDown, Dist)
                        Functions:FadeOutOnDist(Chams, Dist)
                        Functions:FadeOutOnDist(Flag1, Dist)
                        Functions:FadeOutOnDist(Flag2, Dist)
                    end

                    -- Teamcheck
                    if ESP.TeamCheck and plr ~= lplayer and ((lplayer.Team ~= plr.Team and plr.Team) or (not lplayer.Team and not plr.Team)) and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Humanoid") then

                        do -- Chams
                            Chams.Adornee = plr.Character
                            Chams.Enabled = ESP.Drawing.Chams.Enabled
                            Chams.FillColor = ESP.Drawing.Chams.FillRGB
                            Chams.OutlineColor = ESP.Drawing.Chams.OutlineRGB
                            do -- Breathe
                                if ESP.Drawing.Chams.Thermal then
                                    local breathe_effect = math.atan(math.sin(tick() * 2)) * 2 / math.pi
                                    Chams.FillTransparency = ESP.Drawing.Chams.Fill_Transparency * breathe_effect * 0.01
                                    Chams.OutlineTransparency = ESP.Drawing.Chams.Outline_Transparency * breathe_effect * 0.01
                                end
                            end
                            if ESP.Drawing.Chams.VisibleCheck then
                                Chams.DepthMode = "Occluded"
                            else
                                Chams.DepthMode = "AlwaysOnTop"
                            end
                        end;

                        do -- Corner Boxes
                            LeftTop.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            LeftTop.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                            LeftTop.Size = UDim2.new(0, w / 5, 0, 1)
                            
                            LeftSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            LeftSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                            LeftSide.Size = UDim2.new(0, 1, 0, h / 5)
                            
                            BottomSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            BottomSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                            BottomSide.Size = UDim2.new(0, 1, 0, h / 5)
                            BottomSide.AnchorPoint = Vector2.new(0, 5)
                            
                            BottomDown.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            BottomDown.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                            BottomDown.Size = UDim2.new(0, w / 5, 0, 1)
                            BottomDown.AnchorPoint = Vector2.new(0, 1)
                            
                            RightTop.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            RightTop.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y - h / 2)
                            RightTop.Size = UDim2.new(0, w / 5, 0, 1)
                            RightTop.AnchorPoint = Vector2.new(1, 0)
                            
                            RightSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            RightSide.Position = UDim2.new(0, Pos.X + w / 2 - 1, 0, Pos.Y - h / 2)
                            RightSide.Size = UDim2.new(0, 1, 0, h / 5)
                            RightSide.AnchorPoint = Vector2.new(0, 0)
                            
                            BottomRightSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            BottomRightSide.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                            BottomRightSide.Size = UDim2.new(0, 1, 0, h / 5)
                            BottomRightSide.AnchorPoint = Vector2.new(1, 1)
                            
                            BottomRightDown.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            BottomRightDown.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                            BottomRightDown.Size = UDim2.new(0, w / 5, 0, 1)
                            BottomRightDown.AnchorPoint = Vector2.new(1, 1)                                                            
                        end

                        do -- Boxes
                            Box.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                            Box.Size = UDim2.new(0, w, 0, h)
                            Box.Visible = ESP.Drawing.Boxes.Full.Enabled;

                            -- Gradient
                            if ESP.Drawing.Boxes.Filled.Enabled then
                                Box.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                if ESP.Drawing.Boxes.GradientFill then
                                    Box.BackgroundTransparency = ESP.Drawing.Boxes.Filled.Transparency;
                                else
                                    Box.BackgroundTransparency = 1
                                end
                                Box.BorderSizePixel = 1
                            else
                                Box.BackgroundTransparency = 1
                            end
                            -- Animation
                            RotationAngle = RotationAngle + (tick() - Tick) * ESP.Drawing.Boxes.RotationSpeed * math.cos(math.pi / 4 * tick() - math.pi / 2)
                            if ESP.Drawing.Boxes.Animate then
                                Gradient1.Rotation = RotationAngle
                                Gradient2.Rotation = RotationAngle
                            else
                                Gradient1.Rotation = -45
                                Gradient2.Rotation = -45
                            end
                            Tick = tick()
                        end

                        -- Healthbar
                        do  
                            local health = Humanoid.Health / Humanoid.MaxHealth;
                            Healthbar.Visible = ESP.Drawing.Healthbar.Enabled;
                            Healthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - health))  
                            Healthbar.Size = UDim2.new(0, ESP.Drawing.Healthbar.Width, 0, h * health)  
                            --
                            BehindHealthbar.Visible = ESP.Drawing.Healthbar.Enabled;
                            BehindHealthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2)  
                            BehindHealthbar.Size = UDim2.new(0, ESP.Drawing.Healthbar.Width, 0, h)
                            -- Health Text
                            do
                                if ESP.Drawing.Healthbar.HealthText then
                                    local healthPercentage = math.floor(Humanoid.Health / Humanoid.MaxHealth * 100)
                                    HealthText.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - healthPercentage / 100) + 3)
                                    HealthText.Text = tostring(healthPercentage)
                                    HealthText.Visible = Humanoid.Health < Humanoid.MaxHealth
                                    if ESP.Drawing.Healthbar.Lerp then
                                        local color = health >= 0.75 and Color3.fromRGB(0, 255, 0) or health >= 0.5 and Color3.fromRGB(255, 255, 0) or health >= 0.25 and Color3.fromRGB(255, 170, 0) or Color3.fromRGB(255, 0, 0)
                                        HealthText.TextColor3 = color
                                    else
                                        HealthText.TextColor3 = ESP.Drawing.Healthbar.HealthTextRGB
                                    end
                                end                        
                            end
                        end

                        do -- Names
                            Name.Visible = ESP.Drawing.Names.Enabled
                            if ESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                                Name.Text = string.format('(<font color="rgb(%d, %d, %d)">Friendly</font>) %s', ESP.Options.FriendcheckRGB.R * 255, ESP.Options.FriendcheckRGB.G * 255, ESP.Options.FriendcheckRGB.B * 255, plr.Name)
                            else
                                Name.Text = string.format('(<font color="rgb(%d, %d, %d)">Enemy</font>) %s', 255, 0, 0, plr.Name)
                            end
                            Name.Position = UDim2.new(0, Pos.X, 0, Pos.Y - h / 2 - 9)
                        end

                        --[[do -- Flags
                            Flag1.Position = UDim2.new(0, Pos.X + w / 2 + 20, 0, Pos.Y - h / 2 + 3)                                
                            if ESP.Drawing.Flags.Enabled then
                                if false then
                                    Flag1.Visible = true;
                                    Flag1.TextColor3 = Color3.fromRGB(55, 200, 55)
                                else
                                    Flag1.Visible = false;
                                    Flag1.Text = "";
                                end
                                Flag2.Position = UDim2.new(0, Pos.X + w / 2 + 16, 0, Pos.Y - h / 2 + 14)       
                                if false then
                                    Flag2.Visible = true;                      
                                else
                                    Flag2.Visible = false;
                                    Flag2.Text = "";
                                end
                            end
                        end]]
                        
                        do -- Distance
                            if ESP.Drawing.Distances.Enabled then
                                if ESP.Drawing.Distances.Position == "Bottom" then
                                    Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 18)
                                    WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 15);
                                    Distance.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 7)
                                    Distance.Text = string.format("%d meters", math.floor(Dist))
                                    Distance.Visible = true
                                elseif ESP.Drawing.Distances.Position == "Text" then
                                    Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 8)
                                    WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 5);
                                    Distance.Visible = false
                                    if ESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                                        Name.Text = string.format('(<font color="rgb(%d, %d, %d)">F</font>) %s [%d]', ESP.Options.FriendcheckRGB.R * 255, ESP.Options.FriendcheckRGB.G * 255, ESP.Options.FriendcheckRGB.B * 255, plr.Name, math.floor(Dist))
                                    else
                                        Name.Text = string.format('(<font color="rgb(%d, %d, %d)">E</font>) %s [%d]', 255, 0, 0, plr.Name, math.floor(Dist))
                                    end
                                    Name.Visible = ESP.Drawing.Names.Enabled
                                end
                            end
                        end

                        do -- Weapons
                            local currentTool = Functions:GetPlayerTool(plr.Character)
                            Weapon.Text = ESP.Drawing.Weapons.Enabled and string.format('[<font color="rgb(%d, %d, %d)">'.. currentTool ..'</font>]', ESP.Drawing.Weapons.WeaponTextRGB.R * 255, ESP.Drawing.Weapons.WeaponTextRGB.G * 255, ESP.Drawing.Weapons.WeaponTextRGB.B * 255) or ""
                            Weapon.Visible = ESP.Drawing.Weapons.Enabled
                            
                            do -- Weapon icons
                                local WeaponImage = Functions:GetPlayerToolImg(plr.Character)
                                WeaponIcon.ImageColor3 = ESP.Drawing.Weapons.RGB
                                if WeaponImage then
                                    WeaponIcon.Visible = ESP.Drawing.Weapons.Icons
                                    WeaponIcon.Image = WeaponImage
                                else
                                    WeaponIcon.Visible = false
                                end
                            end
                        end                            
                    else
                        HideESP();
                    end
                else
                    HideESP();
                end
            else
                HideESP();
            end
        end)
    end
    coroutine.wrap(Updater)();
end
do -- Update ESP
    for _, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v.Name ~= lplayer.Name then
            coroutine.wrap(ESP)(v)
        end      
    end
    --
    game:GetService("Players").PlayerAdded:Connect(function(v)
        coroutine.wrap(ESP)(v)
    end);
end;
end;


end
})




playerespsection:addToggle({
    name = "Healthbar",
    flag = "Healthbar",
    callback = function(value)
        local Workspace, RunService, Players, CoreGui, Lighting = cloneref(game:GetService("Workspace")), cloneref(game:GetService("RunService")), cloneref(game:GetService("Players")), game:GetService("CoreGui"), cloneref(game:GetService("Lighting"))
local Skybox = loadstring(game:HttpGet("https://raw.githubusercontent.com/BurnHubz/eclipse/main/Skyboxes.lua", true))();

local utilities = {
aimbot = {
    target = nil
},
functions = {}
};

local aimbot = {
enabled = false,
randomisation = 0,
distance = 200,
speed = 0.5,
autoprediction = true,
teamcheck = false,
bone = "Head",
--
fov_circle = false,
dynamic = true,
radius = 120,
position = "Mouse",
--
snapline = false,
snapline_color = Color3.fromRGB(255, 255, 255),
snapline_bone = "HumanoidRootPart",
snapline_from = "Mouse",
};

local Player_Modifications = {
Omni_Sprint = {
    Enabled = false,
    Speed = 25,
},
};

local ESP = {
Enabled = true,
TeamCheck = true,
MaxDistance = 5000,
FontSize = 11,
FadeOut = {
    OnDistance = true,
    OnDeath = false,
    OnLeave = false,
},
Options = { 
    Teamcheck = false, TeamcheckRGB = Color3.fromRGB(0, 255, 0),
    Friendcheck = true, FriendcheckRGB = Color3.fromRGB(0, 255, 0),
    Highlight = false, HighlightRGB = Color3.fromRGB(255, 0, 0),
},
Drawing = {
    Chams = {
        Enabled  = false,
        Thermal = true,
        FillRGB = Color3.fromRGB(119, 120, 255),
        Fill_Transparency = 100,
        OutlineRGB = Color3.fromRGB(119, 120, 255),
        Outline_Transparency = 100,
        VisibleCheck = true,
    },
    Names = {
        Enabled = false,
        RGB = Color3.fromRGB(255, 255, 255),
    },
    Flags = {
        Enabled = true,
    },
    Distances = {
        Enabled = false, 
        Position = "Text",
        RGB = Color3.fromRGB(255, 255, 255),
    },
    Weapons = {
        Enabled = false, WeaponTextRGB = Color3.fromRGB(119, 120, 255),
        Outlined = false,
        Icons = true, RGB = Color3.fromRGB(255, 255, 255),
        Gradient = false,
        GradientRGB1 = Color3.fromRGB(255, 255, 255), GradientRGB2 = Color3.fromRGB(119, 120, 255),
    },
    Healthbar = {
        Enabled = true,  
        HealthText = true, Lerp = false, HealthTextRGB = Color3.fromRGB(119, 120, 255),
        Width = 2.5,
        Gradient = true, GradientRGB1 = Color3.fromRGB(0, 0, 0), GradientRGB2 = Color3.fromRGB(60, 60, 125), GradientRGB3 = Color3.fromRGB(119, 120, 255), 
    },
    Boxes = {
        Animate = false,
        RotationSpeed = 150,
        Gradient = false, GradientRGB1 = Color3.fromRGB(156,39,176), GradientRGB2 = Color3.fromRGB(0, 0, 0), 
        GradientFill = true, GradientFillRGB1 = Color3.fromRGB(156,39,176), GradientFillRGB2 = Color3.fromRGB(0, 0, 0), 
        Filled = {
            Enabled = false,
            Transparency = 0.75,
            RGB = Color3.fromRGB(0, 0, 0),
        },
        Full = {
            Enabled = false,
            RGB = Color3.fromRGB(255, 255, 255),
        },
        Corner = {
            Enabled = false,
            RGB = Color3.fromRGB(255, 255, 255),
        },
    };
};
Items = {
    Enabled = true,
    Icons = false,
    RGB = Color3.fromRGB(255, 255, 255)
},
Connections = {
    RunService = RunService;
};
Fovcircle = {};
Fonts = {};
}

-- Def & Vars
local Euphoria = ESP.Connections;
local lplayer = Players.LocalPlayer;
local camera = game.Workspace.CurrentCamera;
local Cam = Workspace.CurrentCamera;
local RotationAngle, Tick = -45, tick();

-- Weapon Images
local Weapon_Icons = {
["Wooden Bow"] = "http://www.roblox.com/asset/?id=17677465400",
["Crossbow"] = "http://www.roblox.com/asset/?id=17677473017",
["Salvaged SMG"] = "http://www.roblox.com/asset/?id=17677463033",
["Salvaged AK47"] = "http://www.roblox.com/asset/?id=17677455113",
["Salvaged AK74u"] = "http://www.roblox.com/asset/?id=17677442346",
["Salvaged M14"] = "http://www.roblox.com/asset/?id=17677444642",
["Salvaged Python"] = "http://www.roblox.com/asset/?id=17677451737",
["Military PKM"] = "http://www.roblox.com/asset/?id=17677449448",
["Military M4A1"] = "http://www.roblox.com/asset/?id=17677479536",
["Bruno's M4A1"] = "http://www.roblox.com/asset/?id=17677471185",
["Military Barrett"] = "http://www.roblox.com/asset/?id=17677482998",
["Salvaged Skorpion"] = "http://www.roblox.com/asset/?id=17677459658",
["Salvaged Pump Action"] = "http://www.roblox.com/asset/?id=17677457186",
["Military AA12"] = "http://www.roblox.com/asset/?id=17677475227",
["Salvaged Break Action"] = "http://www.roblox.com/asset/?id=17677468751",
["Salvaged Pipe Rifle"] = "http://www.roblox.com/asset/?id=17677468751",
["Salvaged P250"] = "http://www.roblox.com/asset/?id=17677447257",
["Nail Gun"] = "http://www.roblox.com/asset/?id=17677484756"
};

-- Functions
local Functions = {}
do
function Functions:Create(Class, Properties)
    local _Instance = typeof(Class) == 'string' and Instance.new(Class) or Class
    for Property, Value in pairs(Properties) do
        _Instance[Property] = Value
    end
    return _Instance;
end
--
function Functions:GetPlayerTool(Character)
    for _, value in pairs(Character:GetChildren()) do
        if value.Name ~= "HolsterModel" and value:IsA("Model") and value.Name ~= "Hair" and (value:FindFirstChild("Detail") or value:FindFirstChild("Main") or value:FindFirstChild("Handle") or value:FindFirstChild("Attachments") or value:FindFirstChild("ArrowAttach") or value:FindFirstChild("Attach")) and value.PrimaryPart then
            return value.Name;
        end
    end
    return "none"
end    
function Functions:GetPlayerToolImg(Character)
    for _, value in pairs(Character:GetChildren()) do
        if value.Name ~= "HolsterModel" and value:IsA("Model") and value.Name ~= "Hair" and (value:FindFirstChild("Detail") or value:FindFirstChild("Main") or value:FindFirstChild("Handle") or value:FindFirstChild("Attachments") or value:FindFirstChild("ArrowAttach") or value:FindFirstChild("Attach")) and value.PrimaryPart then
            return Weapon_Icons[value.Name] ;
        end
    end
    return nil
end     
--
function Functions:FadeOutOnDist(element, distance)
    local transparency = math.max(0.1, 1 - (distance / ESP.MaxDistance))
    if element:IsA("TextLabel") then
        element.TextTransparency = 1 - transparency
    elseif element:IsA("ImageLabel") then
        element.ImageTransparency = 1 - transparency
    elseif element:IsA("UIStroke") then
        element.Transparency = 1 - transparency
    elseif element:IsA("Frame") and (element == Healthbar or element == BehindHealthbar) then
        element.BackgroundTransparency = 1 - transparency
    elseif element:IsA("Frame") then
        element.BackgroundTransparency = 1 - transparency
    elseif element:IsA("Highlight") then
        element.FillTransparency = 1 - transparency
        element.OutlineTransparency = 1 - transparency
    end;
end;  
end;

do -- Initalize
local ScreenGui = Functions:Create("ScreenGui", {
    Parent = CoreGui,
    Name = "ESPHolder",
});

local DupeCheck = function(plr)
    if ScreenGui:FindFirstChild(plr.Name) then
        ScreenGui[plr.Name]:Destroy()
    end
end

local ESP = function(plr)
    coroutine.wrap(DupeCheck)(plr) -- Dupecheck
    local Name = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, -11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
    local Distance = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
    local Weapon = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
    local Box = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0.75, BorderSizePixel = 0})
    local Gradient1 = Functions:Create("UIGradient", {Parent = Box, Enabled = ESP.Drawing.Boxes.GradientFill, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientFillRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientFillRGB2)}})
    local Outline = Functions:Create("UIStroke", {Parent = Box, Enabled = ESP.Drawing.Boxes.Gradient, Transparency = 0, Color = Color3.fromRGB(255, 255, 255), LineJoinMode = Enum.LineJoinMode.Miter})
    local Gradient2 = Functions:Create("UIGradient", {Parent = Outline, Enabled = ESP.Drawing.Boxes.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientRGB2)}})
    local Healthbar = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 0})
    local BehindHealthbar = Functions:Create("Frame", {Parent = ScreenGui, ZIndex = -1, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0})
    local HealthbarGradient = Functions:Create("UIGradient", {Parent = Healthbar, Enabled = ESP.Drawing.Healthbar.Gradient, Rotation = -90, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Healthbar.GradientRGB1), ColorSequenceKeypoint.new(0.5, ESP.Drawing.Healthbar.GradientRGB2), ColorSequenceKeypoint.new(1, ESP.Drawing.Healthbar.GradientRGB3)}})
    local HealthText = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
    local Chams = Functions:Create("Highlight", {Parent = ScreenGui, FillTransparency = 1, OutlineTransparency = 0, OutlineColor = Color3.fromRGB(119, 120, 255), DepthMode = "AlwaysOnTop"})
    local WeaponIcon = Functions:Create("ImageLabel", {Parent = ScreenGui, BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(0, 40, 0, 40)})
    local Gradient3 = Functions:Create("UIGradient", {Parent = WeaponIcon, Rotation = -90, Enabled = ESP.Drawing.Weapons.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Weapons.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Weapons.GradientRGB2)}})
    local LeftTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local LeftSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local RightTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local RightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local BottomSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local BottomDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local BottomRightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local BottomRightDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
    local Flag1 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
    local Flag2 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
    --local DroppedItems = Functions:Create("TextLabel", {Parent = ScreenGui, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
    --
    local Updater = function()
        local Connection;
        local function HideESP()
            Box.Visible = false;
            Name.Visible = false;
            Distance.Visible = false;
            Weapon.Visible = false;
            Healthbar.Visible = false;
            BehindHealthbar.Visible = false;
            HealthText.Visible = false;
            WeaponIcon.Visible = false;
            LeftTop.Visible = false;
            LeftSide.Visible = false;
            BottomSide.Visible = false;
            BottomDown.Visible = false;
            RightTop.Visible = false;
            RightSide.Visible = false;
            BottomRightSide.Visible = false;
            BottomRightDown.Visible = false;
            Flag1.Visible = false;
            Chams.Enabled = false;
            Flag2.Visible = false;
            if not plr then
                ScreenGui:Destroy();
                Connection:Disconnect();
            end
        end
        --
        Connection = Euphoria.RunService.RenderStepped:Connect(function()
            --[[ do -- Item ESP
                if ESP.Items.Enabled then
                    for _, debrisPart in pairs(workspace.Debris:GetChildren()) do
                        if debrisPart:IsA("BasePart") then
                            local item_pos = debrisPart.Position
                            local screen_pos, onScreen = Cam:WorldToScreenPoint(item_pos)
                            DroppedItems.Text = debrisPart.Name
                            DroppedItems.Position = UDim2.new(0, screen_pos.X, 0, screen_pos.Y)
                            DroppedItems.Visible = onScreen
                        end
                    end
                else
                    DroppedItems.Visible = false
                end         
            end]]
            --
            if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                local HRP = plr.Character.HumanoidRootPart
                local Humanoid = plr.Character:WaitForChild("Humanoid");
                local Pos, OnScreen = Cam:WorldToScreenPoint(HRP.Position)
                local Dist = (Cam.CFrame.Position - HRP.Position).Magnitude / 3.5714285714
                
                if OnScreen and Dist <= ESP.MaxDistance then
                    local Size = HRP.Size.Y
                    local scaleFactor = (Size * Cam.ViewportSize.Y) / (Pos.Z * 2)
                    local w, h = 3 * scaleFactor, 4.5 * scaleFactor

                    -- Fade-out effect --
                    if ESP.FadeOut.OnDistance then
                        Functions:FadeOutOnDist(Box, Dist)
                        Functions:FadeOutOnDist(Outline, Dist)
                        Functions:FadeOutOnDist(Name, Dist)
                        Functions:FadeOutOnDist(Distance, Dist)
                        Functions:FadeOutOnDist(Weapon, Dist)
                        Functions:FadeOutOnDist(Healthbar, Dist)
                        Functions:FadeOutOnDist(BehindHealthbar, Dist)
                        Functions:FadeOutOnDist(HealthText, Dist)
                        Functions:FadeOutOnDist(WeaponIcon, Dist)
                        Functions:FadeOutOnDist(LeftTop, Dist)
                        Functions:FadeOutOnDist(LeftSide, Dist)
                        Functions:FadeOutOnDist(BottomSide, Dist)
                        Functions:FadeOutOnDist(BottomDown, Dist)
                        Functions:FadeOutOnDist(RightTop, Dist)
                        Functions:FadeOutOnDist(RightSide, Dist)
                        Functions:FadeOutOnDist(BottomRightSide, Dist)
                        Functions:FadeOutOnDist(BottomRightDown, Dist)
                        Functions:FadeOutOnDist(Chams, Dist)
                        Functions:FadeOutOnDist(Flag1, Dist)
                        Functions:FadeOutOnDist(Flag2, Dist)
                    end

                    -- Teamcheck
                    if ESP.TeamCheck and plr ~= lplayer and ((lplayer.Team ~= plr.Team and plr.Team) or (not lplayer.Team and not plr.Team)) and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Humanoid") then

                        do -- Chams
                            Chams.Adornee = plr.Character
                            Chams.Enabled = ESP.Drawing.Chams.Enabled
                            Chams.FillColor = ESP.Drawing.Chams.FillRGB
                            Chams.OutlineColor = ESP.Drawing.Chams.OutlineRGB
                            do -- Breathe
                                if ESP.Drawing.Chams.Thermal then
                                    local breathe_effect = math.atan(math.sin(tick() * 2)) * 2 / math.pi
                                    Chams.FillTransparency = ESP.Drawing.Chams.Fill_Transparency * breathe_effect * 0.01
                                    Chams.OutlineTransparency = ESP.Drawing.Chams.Outline_Transparency * breathe_effect * 0.01
                                end
                            end
                            if ESP.Drawing.Chams.VisibleCheck then
                                Chams.DepthMode = "Occluded"
                            else
                                Chams.DepthMode = "AlwaysOnTop"
                            end
                        end;

                        do -- Corner Boxes
                            LeftTop.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            LeftTop.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                            LeftTop.Size = UDim2.new(0, w / 5, 0, 1)
                            
                            LeftSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            LeftSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                            LeftSide.Size = UDim2.new(0, 1, 0, h / 5)
                            
                            BottomSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            BottomSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                            BottomSide.Size = UDim2.new(0, 1, 0, h / 5)
                            BottomSide.AnchorPoint = Vector2.new(0, 5)
                            
                            BottomDown.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            BottomDown.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                            BottomDown.Size = UDim2.new(0, w / 5, 0, 1)
                            BottomDown.AnchorPoint = Vector2.new(0, 1)
                            
                            RightTop.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            RightTop.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y - h / 2)
                            RightTop.Size = UDim2.new(0, w / 5, 0, 1)
                            RightTop.AnchorPoint = Vector2.new(1, 0)
                            
                            RightSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            RightSide.Position = UDim2.new(0, Pos.X + w / 2 - 1, 0, Pos.Y - h / 2)
                            RightSide.Size = UDim2.new(0, 1, 0, h / 5)
                            RightSide.AnchorPoint = Vector2.new(0, 0)
                            
                            BottomRightSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            BottomRightSide.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                            BottomRightSide.Size = UDim2.new(0, 1, 0, h / 5)
                            BottomRightSide.AnchorPoint = Vector2.new(1, 1)
                            
                            BottomRightDown.Visible = ESP.Drawing.Boxes.Corner.Enabled
                            BottomRightDown.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                            BottomRightDown.Size = UDim2.new(0, w / 5, 0, 1)
                            BottomRightDown.AnchorPoint = Vector2.new(1, 1)                                                            
                        end

                        do -- Boxes
                            Box.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                            Box.Size = UDim2.new(0, w, 0, h)
                            Box.Visible = ESP.Drawing.Boxes.Full.Enabled;

                            -- Gradient
                            if ESP.Drawing.Boxes.Filled.Enabled then
                                Box.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                if ESP.Drawing.Boxes.GradientFill then
                                    Box.BackgroundTransparency = ESP.Drawing.Boxes.Filled.Transparency;
                                else
                                    Box.BackgroundTransparency = 1
                                end
                                Box.BorderSizePixel = 1
                            else
                                Box.BackgroundTransparency = 1
                            end
                            -- Animation
                            RotationAngle = RotationAngle + (tick() - Tick) * ESP.Drawing.Boxes.RotationSpeed * math.cos(math.pi / 4 * tick() - math.pi / 2)
                            if ESP.Drawing.Boxes.Animate then
                                Gradient1.Rotation = RotationAngle
                                Gradient2.Rotation = RotationAngle
                            else
                                Gradient1.Rotation = -45
                                Gradient2.Rotation = -45
                            end
                            Tick = tick()
                        end

                        -- Healthbar
                        do  
                            local health = Humanoid.Health / Humanoid.MaxHealth;
                            Healthbar.Visible = ESP.Drawing.Healthbar.Enabled;
                            Healthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - health))  
                            Healthbar.Size = UDim2.new(0, ESP.Drawing.Healthbar.Width, 0, h * health)  
                            --
                            BehindHealthbar.Visible = ESP.Drawing.Healthbar.Enabled;
                            BehindHealthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2)  
                            BehindHealthbar.Size = UDim2.new(0, ESP.Drawing.Healthbar.Width, 0, h)
                            -- Health Text
                            do
                                if ESP.Drawing.Healthbar.HealthText then
                                    local healthPercentage = math.floor(Humanoid.Health / Humanoid.MaxHealth * 100)
                                    HealthText.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - healthPercentage / 100) + 3)
                                    HealthText.Text = tostring(healthPercentage)
                                    HealthText.Visible = Humanoid.Health < Humanoid.MaxHealth
                                    if ESP.Drawing.Healthbar.Lerp then
                                        local color = health >= 0.75 and Color3.fromRGB(0, 255, 0) or health >= 0.5 and Color3.fromRGB(255, 255, 0) or health >= 0.25 and Color3.fromRGB(255, 170, 0) or Color3.fromRGB(255, 0, 0)
                                        HealthText.TextColor3 = color
                                    else
                                        HealthText.TextColor3 = ESP.Drawing.Healthbar.HealthTextRGB
                                    end
                                end                        
                            end
                        end

                        do -- Names
                            Name.Visible = ESP.Drawing.Names.Enabled
                            if ESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                                Name.Text = string.format('(<font color="rgb(%d, %d, %d)">Friendly</font>) %s', ESP.Options.FriendcheckRGB.R * 255, ESP.Options.FriendcheckRGB.G * 255, ESP.Options.FriendcheckRGB.B * 255, plr.Name)
                            else
                                Name.Text = string.format('(<font color="rgb(%d, %d, %d)">Enemy</font>) %s', 255, 0, 0, plr.Name)
                            end
                            Name.Position = UDim2.new(0, Pos.X, 0, Pos.Y - h / 2 - 9)
                        end

                        --[[do -- Flags
                            Flag1.Position = UDim2.new(0, Pos.X + w / 2 + 20, 0, Pos.Y - h / 2 + 3)                                
                            if ESP.Drawing.Flags.Enabled then
                                if false then
                                    Flag1.Visible = true;
                                    Flag1.TextColor3 = Color3.fromRGB(55, 200, 55)
                                else
                                    Flag1.Visible = false;
                                    Flag1.Text = "";
                                end
                                Flag2.Position = UDim2.new(0, Pos.X + w / 2 + 16, 0, Pos.Y - h / 2 + 14)       
                                if false then
                                    Flag2.Visible = true;                      
                                else
                                    Flag2.Visible = false;
                                    Flag2.Text = "";
                                end
                            end
                        end]]
                        
                        do -- Distance
                            if ESP.Drawing.Distances.Enabled then
                                if ESP.Drawing.Distances.Position == "Bottom" then
                                    Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 18)
                                    WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 15);
                                    Distance.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 7)
                                    Distance.Text = string.format("%d meters", math.floor(Dist))
                                    Distance.Visible = true
                                elseif ESP.Drawing.Distances.Position == "Text" then
                                    Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 8)
                                    WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 5);
                                    Distance.Visible = false
                                    if ESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                                        Name.Text = string.format('(<font color="rgb(%d, %d, %d)">F</font>) %s [%d]', ESP.Options.FriendcheckRGB.R * 255, ESP.Options.FriendcheckRGB.G * 255, ESP.Options.FriendcheckRGB.B * 255, plr.Name, math.floor(Dist))
                                    else
                                        Name.Text = string.format('(<font color="rgb(%d, %d, %d)">E</font>) %s [%d]', 255, 0, 0, plr.Name, math.floor(Dist))
                                    end
                                    Name.Visible = ESP.Drawing.Names.Enabled
                                end
                            end
                        end

                        do -- Weapons
                            local currentTool = Functions:GetPlayerTool(plr.Character)
                            Weapon.Text = ESP.Drawing.Weapons.Enabled and string.format('[<font color="rgb(%d, %d, %d)">'.. currentTool ..'</font>]', ESP.Drawing.Weapons.WeaponTextRGB.R * 255, ESP.Drawing.Weapons.WeaponTextRGB.G * 255, ESP.Drawing.Weapons.WeaponTextRGB.B * 255) or ""
                            Weapon.Visible = ESP.Drawing.Weapons.Enabled
                            
                            do -- Weapon icons
                                local WeaponImage = Functions:GetPlayerToolImg(plr.Character)
                                WeaponIcon.ImageColor3 = ESP.Drawing.Weapons.RGB
                                if WeaponImage then
                                    WeaponIcon.Visible = ESP.Drawing.Weapons.Icons
                                    WeaponIcon.Image = WeaponImage
                                else
                                    WeaponIcon.Visible = false
                                end
                            end
                        end                            
                    else
                        HideESP();
                    end
                else
                    HideESP();
                end
            else
                HideESP();
            end
        end)
    end
    coroutine.wrap(Updater)();
end
do -- Update ESP
    for _, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v.Name ~= lplayer.Name then
            coroutine.wrap(ESP)(v)
        end      
    end
    --
    game:GetService("Players").PlayerAdded:Connect(function(v)
        coroutine.wrap(ESP)(v)
    end);
end;
end;


end
})



playerespsection:addToggle({
    name = "Visible Check",
    flag = "Visible Check",
    callback = function(value)
        tog = value

        -- Visibility Check Script
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local LocalPlayer = Players.LocalPlayer
        local Camera = workspace.CurrentCamera

        local function createVisibilityESP(player)
            local BillboardGui = Instance.new("BillboardGui")
            BillboardGui.Name = "VisibilityESP"
            BillboardGui.AlwaysOnTop = true
            BillboardGui.Size = UDim2.new(0, 100, 0, 40) -- Fixed size

            local TextLabel = Instance.new("TextLabel")
            TextLabel.Parent = BillboardGui
            TextLabel.BackgroundTransparency = 1
            TextLabel.Size = UDim2.new(1, 0, 1, 0)
            TextLabel.TextStrokeTransparency = 0.5
            TextLabel.Text = "Invisible"
            TextLabel.TextColor3 = Color3.new(1, 0, 0) -- Default to red (Invisible)
            TextLabel.TextSize = 12 -- Fixed text size
            TextLabel.Font = Enum.Font.SourceSansBold

            BillboardGui.Parent = player.Character:FindFirstChild("Head")
            BillboardGui.StudsOffset = Vector3.new(3, 0, 0) -- Offset to the right
        end

        local function isVisible(player)
            local character = player.Character
            if not character or not character:FindFirstChild("Head") then
                return false
            end

            local origin = Camera.CFrame.Position
            local target = character.Head.Position
            local direction = (target - origin).unit
            local distance = (target - origin).magnitude
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
            raycastParams.FilterDescendantsInstances = {LocalPlayer.Character, character}
            raycastParams.IgnoreWater = true

            local raycastResult = workspace:Raycast(origin, direction * distance, raycastParams)

            if raycastResult then
                return raycastResult.Instance:IsDescendantOf(character)
            else
                return true
            end
        end

        local function updateVisibilityESP()
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
                    local esp = player.Character.Head:FindFirstChild("VisibilityESP")
                    if not esp then
                        createVisibilityESP(player)
                        esp = player.Character.Head:FindFirstChild("VisibilityESP")
                    end

                    local visible = isVisible(player)
                    if visible then
                        esp.TextLabel.Text = "Visible"
                        esp.TextLabel.TextColor3 = Color3.new(0, 1, 0) -- Green
                    else
                        esp.TextLabel.Text = "Invisible"
                                       esp.TextLabel.TextColor3 = Color3.new(1, 0, 0) -- Red
                    end
                end
            end
        end

        RunService.RenderStepped:Connect(updateVisibilityESP)
    end
})




playerespsection:addToggle({
    name = "Skeleton",
    flag = "Skeleton",
    callback = function(value)
        local Player = game:GetService("Players").LocalPlayer
        local Mouse = Player:GetMouse()
        local Camera = game:GetService("Workspace").CurrentCamera
        
        local function DrawLine()
            local l = Drawing.new("Line")
            l.Visible = false
            l.From = Vector2.new(0, 0)
            l.To = Vector2.new(1, 1)
            l.Color = Color3.fromRGB(34, 0, 204)
            l.Thickness = 1
            l.Transparency = 1
            return l
        end
        
        local function DrawESP(plr)
            repeat wait() until plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil
            local limbs = {}
            local R15 = (plr.Character.Humanoid.RigType == Enum.HumanoidRigType.R15) and true or false
            if R15 then 
                limbs = {
                    -- Spine
                    Head_UpperTorso = DrawLine(),
                    UpperTorso_LowerTorso = DrawLine(),
                    -- Left Arm
                    UpperTorso_LeftUpperArm = DrawLine(),
                    LeftUpperArm_LeftLowerArm = DrawLine(),
                    LeftLowerArm_LeftHand = DrawLine(),
                    -- Right Arm
                    UpperTorso_RightUpperArm = DrawLine(),
                    RightUpperArm_RightLowerArm = DrawLine(),
                    RightLowerArm_RightHand = DrawLine(),
                    -- Left Leg
                    LowerTorso_LeftUpperLeg = DrawLine(),
                    LeftUpperLeg_LeftLowerLeg = DrawLine(),
                    LeftLowerLeg_LeftFoot = DrawLine(),
                    -- Right Leg
                    LowerTorso_RightUpperLeg = DrawLine(),
                    RightUpperLeg_RightLowerLeg = DrawLine(),
                    RightLowerLeg_RightFoot = DrawLine(),
                }
            else 
                limbs = {
                    Head_Spine = DrawLine(),
                    Spine = DrawLine(),
                    LeftArm = DrawLine(),
                    LeftArm_UpperTorso = DrawLine(),
                    RightArm = DrawLine(),
                    RightArm_UpperTorso = DrawLine(),
                    LeftLeg = DrawLine(),
                    LeftLeg_LowerTorso = DrawLine(),
                    RightLeg = DrawLine(),
                    RightLeg_LowerTorso = DrawLine()
                }
            end
            local function Visibility(state)
                for i, v in pairs(limbs) do
                    v.Visible = state
                end
            end
        
            local function Colorize(color)
                for i, v in pairs(limbs) do
                    v.Color = color
                end
            end
        
            local function UpdaterR15()
                local connection
                connection = game:GetService("RunService").RenderStepped:Connect(function()
                    if plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") ~= nil and plr.Character.Humanoid.Health > 0 then
                        local HUM, vis = Camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
                        if vis then
                            -- Head
                            local H = Camera:WorldToViewportPoint(plr.Character.Head.Position)
                            if limbs.Head_UpperTorso.From ~= Vector2.new(H.X, H.Y) then
                                --Spine
                                local UT = Camera:WorldToViewportPoint(plr.Character.UpperTorso.Position)
                                local LT = Camera:WorldToViewportPoint(plr.Character.LowerTorso.Position)
                                -- Left Arm
                                local LUA = Camera:WorldToViewportPoint(plr.Character.LeftUpperArm.Position)
                                local LLA = Camera:WorldToViewportPoint(plr.Character.LeftLowerArm.Position)
                                local LH = Camera:WorldToViewportPoint(plr.Character.LeftHand.Position)
                                -- Right Arm
                                local RUA = Camera:WorldToViewportPoint(plr.Character.RightUpperArm.Position)
                                local RLA = Camera:WorldToViewportPoint(plr.Character.RightLowerArm.Position)
                                local RH = Camera:WorldToViewportPoint(plr.Character.RightHand.Position)
                                -- Left leg
                                local LUL = Camera:WorldToViewportPoint(plr.Character.LeftUpperLeg.Position)
                                local LLL = Camera:WorldToViewportPoint(plr.Character.LeftLowerLeg.Position)
                                local LF = Camera:WorldToViewportPoint(plr.Character.LeftFoot.Position)
                                -- Right leg
                                local RUL = Camera:WorldToViewportPoint(plr.Character.RightUpperLeg.Position)
                                local RLL = Camera:WorldToViewportPoint(plr.Character.RightLowerLeg.Position)
                                local RF = Camera:WorldToViewportPoint(plr.Character.RightFoot.Position)
        
                                --Head
                                limbs.Head_UpperTorso.From = Vector2.new(H.X, H.Y)
                                limbs.Head_UpperTorso.To = Vector2.new(UT.X, UT.Y)
        
                                --Spine
                                limbs.UpperTorso_LowerTorso.From = Vector2.new(UT.X, UT.Y)
                                limbs.UpperTorso_LowerTorso.To = Vector2.new(LT.X, LT.Y)
        
                                -- Left Arm
                                limbs.UpperTorso_LeftUpperArm.From = Vector2.new(UT.X, UT.Y)
                                limbs.UpperTorso_LeftUpperArm.To = Vector2.new(LUA.X, LUA.Y)
        
                                limbs.LeftUpperArm_LeftLowerArm.From = Vector2.new(LUA.X, LUA.Y)
                                limbs.LeftUpperArm_LeftLowerArm.To = Vector2.new(LLA.X, LLA.Y)
        
                                limbs.LeftLowerArm_LeftHand.From = Vector2.new(LLA.X, LLA.Y)
                                limbs.LeftLowerArm_LeftHand.To = Vector2.new(LH.X, LH.Y)
        
                                -- Right Arm
                                limbs.UpperTorso_RightUpperArm.From = Vector2.new(UT.X, UT.Y)
                                limbs.UpperTorso_RightUpperArm.To = Vector2.new(RUA.X, RUA.Y)
        
                                limbs.RightUpperArm_RightLowerArm.From = Vector2.new(RUA.X, RUA.Y)
                                limbs.RightUpperArm_RightLowerArm.To = Vector2.new(RLA.X, RLA.Y)
        
                                limbs.RightLowerArm_RightHand.From = Vector2.new(RLA.X, RLA.Y)
                                limbs.RightLowerArm_RightHand.To = Vector2.new(RH.X, RH.Y)
        
                                -- Left Leg
                                limbs.LowerTorso_LeftUpperLeg.From = Vector2.new(LT.X, LT.Y)
                                limbs.LowerTorso_LeftUpperLeg.To = Vector2.new(LUL.X, LUL.Y)
        
                                limbs.LeftUpperLeg_LeftLowerLeg.From = Vector2.new(LUL.X, LUL.Y)
                                limbs.LeftUpperLeg_LeftLowerLeg.To = Vector2.new(LLL.X, LLL.Y)
        
                                limbs.LeftLowerLeg_LeftFoot.From = Vector2.new(LLL.X, LLL.Y)
                                limbs.LeftLowerLeg_LeftFoot.To = Vector2.new(LF.X, LF.Y)
        
                                -- Right Leg
                                limbs.LowerTorso_RightUpperLeg.From = Vector2.new(LT.X, LT.Y)
                                limbs.LowerTorso_RightUpperLeg.To = Vector2.new(RUL.X, RUL.Y)
        
                                limbs.RightUpperLeg_RightLowerLeg.From = Vector2.new(RUL.X, RUL.Y)
                                limbs.RightUpperLeg_RightLowerLeg.To = Vector2.new(RLL.X, RLL.Y)
        
                                limbs.RightLowerLeg_RightFoot.From = Vector2.new(RLL.X, RLL.Y)
                                limbs.RightLowerLeg_RightFoot.To = Vector2.new(RF.X, RF.Y)
                            end
        
                            if limbs.Head_UpperTorso.Visible ~= true then
                                Visibility(true)
                            end
                        else 
                            if limbs.Head_UpperTorso.Visible ~= false then
                                Visibility(false)
                            end
                        end
                    else 
                        if limbs.Head_UpperTorso.Visible ~= false then
                            Visibility(false)
                        end
                        if game.Players:FindFirstChild(plr.Name) == nil then 
                            for i, v in pairs(limbs) do
                                v:Remove()
                            end
                            connection:Disconnect()
                        end
                    end
                end)
            end
        
            local function UpdaterR6()
                local connection
                connection = game:GetService("RunService").RenderStepped:Connect(function()
                    if plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") ~= nil and plr.Character.Humanoid.Health > 0 then
                        local HUM, vis = Camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
                        if vis then
                            local H = Camera:WorldToViewportPoint(plr.Character.Head.Position)
                            if limbs.Head_Spine.From ~= Vector2.new(H.X, H.Y) then
                                local T_Height = plr.Character.Torso.Size.Y/2 - 0.2
                                local UT = Camera:WorldToViewportPoint((plr.Character.Torso.CFrame * CFrame.new(0, T_Height, 0)).p)
                                local LT = Camera:WorldToViewportPoint((plr.Character.Torso.CFrame * CFrame.new(0, -T_Height, 0)).p)
        
                                local LA_Height = plr.Character["Left Arm"].Size.Y/2 - 0.2
                                local LUA = Camera:WorldToViewportPoint((plr.Character["Left Arm"].CFrame * CFrame.new(0, LA_Height, 0)).p)
                                local LLA = Camera:WorldToViewportPoint((plr.Character["Left Arm"].CFrame * CFrame.new(0, -LA_Height, 0)).p)
        
                                local RA_Height = plr.Character["Right Arm"].Size.Y/2 - 0.2
                                local RUA = Camera:WorldToViewportPoint((plr.Character["Right Arm"].CFrame * CFrame.new(0, RA_Height, 0)).p)
                                local RLA = Camera:WorldToViewportPoint((plr.Character["Right Arm"].CFrame * CFrame.new(0, -RA_Height, 0)).p)
        
                                local LL_Height = plr.Character["Left Leg"].Size.Y/2 - 0.2
                                local LUL = Camera:WorldToViewportPoint((plr.Character["Left Leg"].CFrame * CFrame.new(0, LL_Height, 0)).p)
                                local LLL = Camera:WorldToViewportPoint((plr.Character["Left Leg"].CFrame * CFrame.new(0, -LL_Height, 0)).p)
        
                                local RL_Height = plr.Character["Right Leg"].Size.Y/2 - 0.2
                                local RUL = Camera:WorldToViewportPoint((plr.Character["Right Leg"].CFrame * CFrame.new(0, RL_Height, 0)).p)
                                local RLL = Camera:WorldToViewportPoint((plr.Character["Right Leg"].CFrame * CFrame.new(0, -RL_Height, 0)).p)
        
                                -- Head
                                limbs.Head_Spine.From = Vector2.new(H.X, H.Y)
                                limbs.Head_Spine.To = Vector2.new(UT.X, UT.Y)
        
                                --Spine
                                limbs.Spine.From = Vector2.new(UT.X, UT.Y)
                                limbs.Spine.To = Vector2.new(LT.X, LT.Y)
        
                                --Left Arm
                                limbs.LeftArm.From = Vector2.new(LUA.X, LUA.Y)
                                limbs.LeftArm.To = Vector2.new(LLA.X, LLA.Y)
        
                                limbs.LeftArm_UpperTorso.From = Vector2.new(UT.X, UT.Y)
                                limbs.LeftArm_UpperTorso.To = Vector2.new(LUA.X, LUA.Y)
        
                                --Right Arm
                                limbs.RightArm.From = Vector2.new(RUA.X, RUA.Y)
                                limbs.RightArm.To = Vector2.new(RLA.X, RLA.Y)
        
                                limbs.RightArm_UpperTorso.From = Vector2.new(UT.X, UT.Y)
                                limbs.RightArm_UpperTorso.To = Vector2.new(RUA.X, RUA.Y)
        
                                --Left Leg
                                limbs.LeftLeg.From = Vector2.new(LUL.X, LUL.Y)
                                limbs.LeftLeg.To = Vector2.new(LLL.X, LLL.Y)
        
                                limbs.LeftLeg_LowerTorso.From = Vector2.new(LT.X, LT.Y)
                                limbs.LeftLeg_LowerTorso.To = Vector2.new(LUL.X, LUL.Y)
        
                                --Right Leg
                                limbs.RightLeg.From = Vector2.new(RUL.X, RUL.Y)
                                limbs.RightLeg.To = Vector2.new(RLL.X, RLL.Y)
        
                                limbs.RightLeg_LowerTorso.From = Vector2.new(LT.X, LT.Y)
                                limbs.RightLeg_LowerTorso.To = Vector2.new(RUL.X, RUL.Y)
                            end
        
                            if limbs.Head_Spine.Visible ~= true then
                                Visibility(true)
                            end
                        else 
                            if limbs.Head_Spine.Visible ~= false then
                                Visibility(false)
                            end
                        end
                    else 
                        if limbs.Head_Spine.Visible ~= false then
                            Visibility(false)
                        end
                        if game.Players:FindFirstChild(plr.Name) == nil then 
                            for i, v in pairs(limbs) do
                                v:Remove()
                            end
                            connection:Disconnect()
                        end
                    end
                end)
            end
        
            if R15 then
                coroutine.wrap(UpdaterR15)()
            else 
                coroutine.wrap(UpdaterR6)()
            end
        end
        
        for i, v in pairs(game:GetService("Players"):GetPlayers()) do
            if v.Name ~= Player.Name then
                DrawESP(v)
            end
        end
        
        game.Players.PlayerAdded:Connect(function(newplr)
            if newplr.Name ~= Player.Name then
                DrawESP(newplr)
            end
        end)
    end})



    playerespsection:addToggle({name = "Arrow",
    flag = "Arrow",
    callback = function(value)
        -- Made by Blissful#4992

local DistFromCenter = 80
local TriangleHeight = 16
local TriangleWidth = 16
local TriangleFilled = true
local TriangleTransparency = 0
local TriangleThickness = 1
local TriangleColor = Color3.fromRGB(240, 142, 214)
local AntiAliasing = false

----------------------------------------------------------------

local Players = game:service("Players")
local Player = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local RS = game:service("RunService")

local V3 = Vector3.new
local V2 = Vector2.new
local CF = CFrame.new
local COS = math.cos
local SIN = math.sin
local RAD = math.rad
local DRAWING = Drawing.new
local CWRAP = coroutine.wrap
local ROUND = math.round

local function GetRelative(pos, char)
    if not char then return V2(0,0) end

    local rootP = char.PrimaryPart.Position
    local camP = Camera.CFrame.Position
    local relative = CF(V3(rootP.X, camP.Y, rootP.Z), camP):PointToObjectSpace(pos)

    return V2(relative.X, relative.Z)
end

local function RelativeToCenter(v)
    return Camera.ViewportSize/2 - v
end

local function RotateVect(v, a)
    a = RAD(a)
    local x = v.x * COS(a) - v.y * SIN(a)
    local y = v.x * SIN(a) + v.y * COS(a)

    return V2(x, y)
end

local function DrawTriangle(color)
    local l = DRAWING("Triangle")
    l.Visible = false
    l.Color = color
    l.Filled = TriangleFilled
    l.Thickness = TriangleThickness
    l.Transparency = 1-TriangleTransparency
    return l
end

local function AntiA(v)
    if (not AntiAliasing) then return v end
    return V2(ROUND(v.x), ROUND(v.y))
end

local function ShowArrow(PLAYER)
    local Arrow = DrawTriangle(TriangleColor)

    local function Update()
        local c ; c = RS.RenderStepped:Connect(function()
            if PLAYER and PLAYER.Character then
                local CHAR = PLAYER.Character
                local HUM = CHAR:FindFirstChildOfClass("Humanoid")

                if HUM and CHAR.PrimaryPart ~= nil and HUM.Health > 0 then
                    local _,vis = Camera:WorldToViewportPoint(CHAR.PrimaryPart.Position)
                    if vis == false then
                        local rel = GetRelative(CHAR.PrimaryPart.Position, Player.Character)
                        local direction = rel.unit

                        local base  = direction * DistFromCenter
                        local sideLength = TriangleWidth/2
                        local baseL = base + RotateVect(direction, 90) * sideLength
                        local baseR = base + RotateVect(direction, -90) * sideLength

                        local tip = direction * (DistFromCenter + TriangleHeight)
                        
                        Arrow.PointA = AntiA(RelativeToCenter(baseL))
                        Arrow.PointB = AntiA(RelativeToCenter(baseR))

                        Arrow.PointC = AntiA(RelativeToCenter(tip))

                        Arrow.Visible = true

                    else Arrow.Visible = false end
                else Arrow.Visible = false end
            else 
                Arrow.Visible = false

                if not PLAYER or not PLAYER.Parent then
                    Arrow:Remove()
                    c:Disconnect()
                end
            end
        end)
    end

    CWRAP(Update)()
end

for _,v in pairs(Players:GetChildren()) do
    if v.Name ~= Player.Name then
        ShowArrow(v)
    end
end

Players.PlayerAdded:Connect(function(v)
    if v.Name ~= Player.Name then
        ShowArrow(v)
    end
end)
end
})

playerespsection:addToggle({name = "Radar",
    flag = "Radar",
    callback = function(value)
        -- Made by Blissful#4992
local Players = game:service("Players")
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()
local Camera = game:service("Workspace").CurrentCamera
local RS = game:service("RunService")
local UIS = game:service("UserInputService")

repeat wait() until Player.Character ~= nil and Player.Character.PrimaryPart ~= nil

local LerpColorModule = loadstring(game:HttpGet("https://pastebin.com/raw/wRnsJeid"))()
local HealthBarLerp = LerpColorModule:Lerp(Color3.fromRGB(255, 0, 0), Color3.fromRGB(0, 255, 0))

local function NewCircle(Transparency, Color, Radius, Filled, Thickness)
    local c = Drawing.new("Circle")
    c.Transparency = Transparency
    c.Color = Color
    c.Visible = false
    c.Thickness = Thickness
    c.Position = Vector2.new(0, 0)
    c.Radius = Radius
    c.NumSides = math.clamp(Radius*55/100, 10, 75)
    c.Filled = Filled
    return c
end

local RadarInfo = {
    Position = Vector2.new(200, 200),
    Radius = 100,
    Scale = 1, -- Determinant factor on the effect of the relative position for the 2D integration
    RadarBack = Color3.fromRGB(10, 10, 10),
    RadarBorder = Color3.fromRGB(75, 75, 75),
    LocalPlayerDot = Color3.fromRGB(255, 255, 255),
    PlayerDot = Color3.fromRGB(60, 170, 255),
    Team = Color3.fromRGB(0, 255, 0),
    Enemy = Color3.fromRGB(255, 0, 0),
    Health_Color = true,
    Team_Check = true
}

local RadarBackground = NewCircle(0.9, RadarInfo.RadarBack, RadarInfo.Radius, true, 1)
RadarBackground.Visible = true
RadarBackground.Position = RadarInfo.Position

local RadarBorder = NewCircle(0.75, RadarInfo.RadarBorder, RadarInfo.Radius, false, 3)
RadarBorder.Visible = true
RadarBorder.Position = RadarInfo.Position

local function GetRelative(pos)
    local char = Player.Character
    if char ~= nil and char.PrimaryPart ~= nil then
        local pmpart = char.PrimaryPart
        local camerapos = Vector3.new(Camera.CFrame.Position.X, pmpart.Position.Y, Camera.CFrame.Position.Z)
        local newcf = CFrame.new(pmpart.Position, camerapos)
        local r = newcf:PointToObjectSpace(pos)
        return r.X, r.Z
    else
        return 0, 0
    end
end

local function PlaceDot(plr)
    local PlayerDot = NewCircle(1, RadarInfo.PlayerDot, 3, true, 1)

    local function Update()
        local c 
        c = game:service("RunService").RenderStepped:Connect(function()
            local char = plr.Character
            if char and char:FindFirstChildOfClass("Humanoid") and char.PrimaryPart ~= nil and char:FindFirstChildOfClass("Humanoid").Health > 0 then
                local hum = char:FindFirstChildOfClass("Humanoid")
                local scale = RadarInfo.Scale
                local relx, rely = GetRelative(char.PrimaryPart.Position)
                local newpos = RadarInfo.Position - Vector2.new(relx * scale, rely * scale) 
                
                if (newpos - RadarInfo.Position).magnitude < RadarInfo.Radius-2 then 
                    PlayerDot.Radius = 3   
                    PlayerDot.Position = newpos
                    PlayerDot.Visible = true
                else 
                    local dist = (RadarInfo.Position - newpos).magnitude
                    local calc = (RadarInfo.Position - newpos).unit * (dist - RadarInfo.Radius)
                    local inside = Vector2.new(newpos.X + calc.X, newpos.Y + calc.Y)
                    PlayerDot.Radius = 2
                    PlayerDot.Position = inside
                    PlayerDot.Visible = true
                end

                PlayerDot.Color = RadarInfo.PlayerDot
                if RadarInfo.Team_Check then
                    if plr.TeamColor == Player.TeamColor then
                        PlayerDot.Color = RadarInfo.Team
                    else
                        PlayerDot.Color = RadarInfo.Enemy
                    end
                end

                if RadarInfo.Health_Color then
                    PlayerDot.Color = HealthBarLerp(hum.Health / hum.MaxHealth)
                end
            else 
                PlayerDot.Visible = false
                if Players:FindFirstChild(plr.Name) == nil then
                    PlayerDot:Remove()
                    c:Disconnect()
                end
            end
        end)
    end
    coroutine.wrap(Update)()
end

for _,v in pairs(Players:GetChildren()) do
    if v.Name ~= Player.Name then
        PlaceDot(v)
    end
end

local function NewLocalDot()
    local d = Drawing.new("Triangle")
    d.Visible = true
    d.Thickness = 1
    d.Filled = true
    d.Color = RadarInfo.LocalPlayerDot
    d.PointA = RadarInfo.Position + Vector2.new(0, -6)
    d.PointB = RadarInfo.Position + Vector2.new(-3, 6)
    d.PointC = RadarInfo.Position + Vector2.new(3, 6)
    return d
end

local LocalPlayerDot = NewLocalDot()

Players.PlayerAdded:Connect(function(v)
    if v.Name ~= Player.Name then
        PlaceDot(v)
    end
    LocalPlayerDot:Remove()
    LocalPlayerDot = NewLocalDot()
end)

-- Loop
coroutine.wrap(function()
    local c 
    c = game:service("RunService").RenderStepped:Connect(function()
        if LocalPlayerDot ~= nil then
            LocalPlayerDot.Color = RadarInfo.LocalPlayerDot
            LocalPlayerDot.PointA = RadarInfo.Position + Vector2.new(0, -6)
            LocalPlayerDot.PointB = RadarInfo.Position + Vector2.new(-3, 6)
            LocalPlayerDot.PointC = RadarInfo.Position + Vector2.new(3, 6)
        end
        RadarBackground.Position = RadarInfo.Position
        RadarBackground.Radius = RadarInfo.Radius
        RadarBackground.Color = RadarInfo.RadarBack

        RadarBorder.Position = RadarInfo.Position
        RadarBorder.Radius = RadarInfo.Radius
        RadarBorder.Color = RadarInfo.RadarBorder
    end)
end)()

-- Draggable
local inset = game:service("GuiService"):GetGuiInset()

local dragging = false
local offset = Vector2.new(0, 0)
UIS.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and (Vector2.new(Mouse.X, Mouse.Y + inset.Y) - RadarInfo.Position).magnitude < RadarInfo.Radius then
        offset = RadarInfo.Position - Vector2.new(Mouse.X, Mouse.Y)
        dragging = true
    end
end)

UIS.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

coroutine.wrap(function()
    local dot = NewCircle(1, Color3.fromRGB(255, 255, 255), 3, true, 1)
    local c 
    c = game:service("RunService").RenderStepped:Connect(function()
        if (Vector2.new(Mouse.X, Mouse.Y + inset.Y) - RadarInfo.Position).magnitude < RadarInfo.Radius then
            dot.Position = Vector2.new(Mouse.X, Mouse.Y + inset.Y)
            dot.Visible = true
        else 
            dot.Visible = false
        end
        if dragging then
            RadarInfo.Position = Vector2.new(Mouse.X, Mouse.Y) + offset
        end
    end)
end)()

--[[ Example:
wait(3)
RadarInfo.Position = Vector2.new(300, 300)
RadarInfo.Radius = 150
RadarInfo.RadarBack = Color3.fromRGB(50, 0, 0)
]]
    end})


playerespsection:addToggle({name = "View Angle",
    flag = "View Angle",
    callback = function(value)
        -- Preview: https://gyazo.com/02cfb4aa8659ba5f6ee67a90514cc34d
-- Made by Blissful#4992
local Settings = {
    Color = Color3.fromRGB(240,132,214), -- Color of the line
    Thickness = 0.7, -- Thickness of the line (Overruled by AutoThickness if activated)
    Transparency = 0.5, -- 1 Visible - 0 Not Visible
    AutoThickness = true, -- Makes Thickness above futile, scales according to distance, good for less encumbered screen
    Length = 2, -- In studs of the line
    Smoothness = 0.2 -- 0.01 - Less Smooth(Faster), 1 - Smoother (Slower)
}

local toggle = true -- use this variable if you wanna integrate into a GUI

local player = game:GetService("Players").LocalPlayer
local camera = game:GetService("Workspace").CurrentCamera

local function ESP(plr) --//Main function handling specific plr loop esp for line etc
    local line = Drawing.new("Line") --// Parse and Set the line for tracer
    line.Visible = false
    line.From = Vector2.new(0, 0)
    line.To = Vector2.new(0, 0)
    line.Color = Settings.Color
    line.Thickness = Settings.Thickness
    line.Transparency = Settings.Transparency

    local function Updater() --// Function to update the ESP therefore, line destinations etc every /render/
        local connection
        connection = game:GetService("RunService").RenderStepped:Connect(function() -- Putting function in a connection var in order to disconnect if needed, to save performance
            if toggle and plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") ~= nil and plr.Character.Humanoid.Health > 0 and plr.Character:FindFirstChild("Head") ~= nil then
                local headpos, OnScreen = camera:WorldToViewportPoint(plr.Character.Head.Position)
                if OnScreen then -- checks if player is on screen or not
                    local offsetCFrame = CFrame.new(0, 0, -Settings.Length)
                    local check = false
                    line.From = Vector2.new(headpos.X, headpos.Y)
                    if Settings.AutoThickness then
                        local distance = (player.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).magnitude --//AutoThickness
                        local value = math.clamp(1/distance*100, 0.1, 3) --0.1 is min thickness, 4 is max
                        line.Thickness = value
                    end
                    repeat
                        local dir = plr.Character.Head.CFrame:ToWorldSpace(offsetCFrame)
                        offsetCFrame = offsetCFrame * CFrame.new(0, 0, Settings.Smoothness)
                        local dirpos, vis = camera:WorldToViewportPoint(Vector3.new(dir.X, dir.Y, dir.Z))
                        if vis then
                            check = true
                            line.To = Vector2.new(dirpos.X, dirpos.Y)
                            line.Visible = true
                            offsetCFrame = CFrame.new(0, 0, -Settings.Length)
                        end
                    until check == true
                else 
                    line.Visible = false
                end
            else 
                line.Visible = false
                if game.Players:FindFirstChild(plr.Name) == nil then
                    connection:Disconnect()
                end
            end
        end)
    end
    coroutine.wrap(Updater)()
end

for i, v in pairs(game:GetService("Players"):GetPlayers()) do
    if v.Name ~= player.Name then
        coroutine.wrap(ESP)(v)
    end
end

game.Players.PlayerAdded:Connect(function(newplr)
    if newplr.Name ~= player.Name then
        coroutine.wrap(ESP)(newplr)
    end
end)
    end})


    playerespsection:addToggle({
        name = "Visualizer (Z)",
        flag = "Visualizer (Z)",
        callback = function(value)
            if value then
                pcall(function()
                    getgenv().hhhhhhh = nil
                end)
    
                getgenv().hhhhhhh = {}
                local Environment = getgenv().hhhhhhh
    
                local inCamera = workspace.CurrentCamera
                local inRunService = game:GetService("RunService")
                local inUIS = game:GetService("UserInputService")
                local inEntities = game:GetService("Players")
                local inLocalPlayer = inEntities.LocalPlayer
                local inMouse = inLocalPlayer:GetMouse()
    
                local Title = [[chaos.win ClientBring]]
                local Desc = [[Fuck Campers]]
    
                Environment.Settings = {
                    Enabled = false,
                    TriggerKey = Enum.KeyCode.Z,
                    Radius = 2000
                }
    
                inUIS.InputBegan:Connect(function(Input, process)
                    if process then return end
    
                    if Input.KeyCode == Environment.Settings.TriggerKey then
                        Environment.Settings.Enabled = not Environment.Settings.Enabled
                        print("ClientBring toggled:", Environment.Settings.Enabled)  -- Debug print statement
                    end
                end)
    
                local function LOADINSHIT()
                    inRunService.RenderStepped:Connect(function()
                        local dist = 500
                        local closest_character = nil
                    
                        if Environment.Settings.Enabled then
                            for _, v in next, inEntities:GetPlayers() do
                                pcall(function()
                                    if v ~= inLocalPlayer and v.Character and v.Character:FindFirstChild('HumanoidRootPart') and v.Character:FindFirstChild('Humanoid') and v.Character.Humanoid.Health > 0 then
                                        local char = v.Character
                                        local char_part_pos, onscreen = inCamera:WorldToViewportPoint(char.HumanoidRootPart.Position)
                        
                                        if onscreen then
                                            local magnitude = (Vector2.new(inMouse.X, inMouse.Y) - Vector2.new(char_part_pos.X, char_part_pos.Y)).Magnitude
                        
                                            if magnitude < dist and magnitude < Environment.Settings.Radius then
                                                dist = magnitude
                                                closest_character = char
                                            end
                                        end
                                    end
                                end)
                            end
    
                            if closest_character and closest_character.Parent and closest_character:FindFirstChild('HumanoidRootPart') and closest_character:FindFirstChild('Humanoid') and closest_character.Humanoid.Health > 0 then
                                local cameraPosition = inCamera.CFrame.Position
                                local targetPosition = cameraPosition + (inCamera.CFrame.LookVector * 9.5)
                                targetPosition = Vector3.new(targetPosition.X, targetPosition.Y - 1.6, targetPosition.Z)
                                closest_character.HumanoidRootPart.CFrame = CFrame.new(targetPosition, cameraPosition)
                            end
                        end
                    end)
                end
    
                LOADINSHIT()
                print('TP PLR 2 U LOADED', Title, Desc)
            end
        end
    })


    movementsection:addToggle({
        name = "TP Flank (X)",
        flag = "TP Flank (X)",
        callback = function(value)
            local flankAnim, flank, flankDied, flankLoop
local isFlankActive = false
local userInputService = game:GetService("UserInputService")
local keybind = Enum.KeyCode.X

local function findNearestPlayerToCenter()
    local camera = game.Workspace.CurrentCamera
    if not camera then return nil end

    local viewportSize = camera.ViewportSize
    local centerScreen = Vector2.new(viewportSize.X / 2, viewportSize.Y / 2)
    local minDistance = math.huge
    local nearestPlayer = nil

    for _, player in pairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character:IsDescendantOf(game.Workspace) then
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            if rootPart then
                local screenPosition, onScreen = camera:WorldToScreenPoint(rootPart.Position)
                if onScreen then
                    local distance = (Vector2.new(screenPosition.X, screenPosition.Y) - centerScreen).Magnitude
                    if distance < minDistance then
                        minDistance = distance
                        nearestPlayer = player
                    end
                end
            end
        end
    end

    return nearestPlayer
end

local function resetFlankState()
    if flank then flank:Stop() end
    if flankAnim then flankAnim:Destroy() end
    if flankDied then flankDied:Disconnect() end
    if flankLoop then flankLoop:Disconnect() end
    isFlankActive = false
end

local function performFlank()
    local localPlayer = game.Players.LocalPlayer
    local humanoid = localPlayer.Character and localPlayer.Character:FindFirstChildWhichIsA("Humanoid")
    if not humanoid then return end

    if isFlankActive then
        resetFlankState()
    else
        flankAnim = Instance.new("Animation")
        flankAnim.AnimationId = humanoid.RigType == Enum.HumanoidRigType.R15 and "rbxassetid://148840371" or "rbxassetid://5918726674"
        flank = humanoid:LoadAnimation(flankAnim)
        flank:Play(0.1, 1, 1)
        flank:AdjustSpeed(3)
        
        flankDied = humanoid.Died:Connect(resetFlankState)
        
        local nearestPlayer = findNearestPlayerToCenter()
        if nearestPlayer then
            local targetHumanoid = nearestPlayer.Character and nearestPlayer.Character:FindFirstChildWhichIsA("Humanoid")
            if targetHumanoid then
                local offset = CFrame.new(0, 0, 5)
                flankLoop = game:GetService("RunService").Stepped:Connect(function()
                    pcall(function()
                        humanoid.RootPart.CFrame = targetHumanoid.RootPart.CFrame * offset
                    end)
                end)
            end
        end
        isFlankActive = true
    end
end

userInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == keybind then
        performFlank()
    end
end)

if not enabled and isFlankActive then
    resetFlankState()
end
        end})


        


    playerespsection:addToggle({name = "Distance Tag",
    flag = "Distance Tag",
    callback = function(value)
        tog = value
        
                local Players = game:GetService("Players")
                local RunService = game:GetService("RunService")
                local LocalPlayer = Players.LocalPlayer
                local Camera = workspace.CurrentCamera
        
                local function createESP(player)
                    local BillboardGui = Instance.new("BillboardGui")
                    BillboardGui.Name = "ESP"
                    BillboardGui.AlwaysOnTop = true
                    BillboardGui.Size = UDim2.new(0, 100, 0, 40) -- Fixed size
        
                    local TextLabel = Instance.new("TextLabel")
                    TextLabel.Parent = BillboardGui
                    TextLabel.BackgroundTransparency = 1
                    TextLabel.Size = UDim2.new(1, 0, 1, 0)
                    TextLabel.TextStrokeTransparency = 0.5
                    TextLabel.Text = "0m"
                    TextLabel.TextColor3 = Color3.new(1, 1, 1) -- White color
                    TextLabel.TextSize = 8 -- Fixed text size
                    TextLabel.Font = Enum.Font.SourceSansBold
        
                    BillboardGui.Parent = player.Character:FindFirstChild("Head")
                    BillboardGui.StudsOffset = Vector3.new(-3, 0, 0) -- Offset to the left
                end
        
                local function updateESP()
                    for _, player in ipairs(Players:GetPlayers()) do
                        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
                            local esp = player.Character.Head:FindFirstChild("ESP")
                            if not esp then
                                createESP(player)
                            else
                                local distance = (player.Character.Head.Position - LocalPlayer.Character.Head.Position).Magnitude
                                esp.TextLabel.Text = string.format("%.1fm", distance)
                                if distance < 20 then
                                    esp.TextLabel.TextColor3 = Color3.new(0, 1, 0) -- Green for close
                                elseif distance < 50 then
                                    esp.TextLabel.TextColor3 = Color3.new(1, 1, 0) -- Yellow for mid-range
                                else
                                    esp.TextLabel.TextColor3 = Color3.new(1, 0, 0) -- Red for far
                                end
                            end
                        end
                    end
                end
        
                RunService.RenderStepped:Connect(updateESP)
            end
        })
        
    


        local espEnabled = false
        local espSettings = { 
            textsize = 13,  -- Set text size to 13
            colour = {255, 255, 255}  -- Set colour as a table with RGB values
        }
        
        local guiTemplate = Instance.new("BillboardGui")
        local espTemplate = Instance.new("TextLabel", guiTemplate)
        
        guiTemplate.Name = "skibidi.cc"
        guiTemplate.ResetOnSpawn = false
        guiTemplate.AlwaysOnTop = true
        guiTemplate.LightInfluence = 0
        guiTemplate.Size = UDim2.new(1.75, 0, 1.75, 0)
        guiTemplate.StudsOffset = Vector3.new(0, 2, 0)  -- Offset the GUI 2 studs above the head
        
        espTemplate.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        espTemplate.BackgroundTransparency = 1  -- Make the background transparent
        espTemplate.Size = UDim2.new(1, 0, 1, 0)  -- Adjust the size to make it more visible
        espTemplate.BorderSizePixel = 0
        espTemplate.Font = Enum.Font.GothamSemibold
        espTemplate.TextSize = espSettings.textsize  -- Ensure the text size is set to 13
        espTemplate.TextColor3 = Color3.fromRGB(unpack(espSettings.colour))  -- Use unpack to pass RGB values
        espTemplate.TextScaled = false  -- Ensure the text does not scale
        espTemplate.TextStrokeTransparency = 0.5  -- Add a slight stroke for better visibility
        
        local function createESP(player)
            if player.Character and player.Character:FindFirstChild("Head") then
                local head = player.Character.Head
                if not head:FindFirstChild("skibidi.cc") then
                    local newGui = guiTemplate:Clone()
                    newGui.Adornee = head  -- Set the adornee to the head to ensure it follows the head
                    newGui.Parent = head
                    newGui.TextLabel.Text = player.Name  -- Set the text to the player's name
                end
            end
        end
        
        local function removeESP(player)
            if player.Character and player.Character:FindFirstChild("Head") then
                local head = player.Character.Head
                local gui = head:FindFirstChild("skibidi.cc")
                if gui then
                    gui:Destroy()
                end
            end
        end
        
        playerespsection:addToggle({
            name = "Name",
            flag = "Name",
            callback = function(value)
                local Workspace, RunService, Players, CoreGui, Lighting = cloneref(game:GetService("Workspace")), cloneref(game:GetService("RunService")), cloneref(game:GetService("Players")), game:GetService("CoreGui"), cloneref(game:GetService("Lighting"))
                local Skybox = loadstring(game:HttpGet("https://raw.githubusercontent.com/BurnHubz/eclipse/main/Skyboxes.lua", true))();
                
                local utilities = {
                    aimbot = {
                        target = nil
                    },
                    functions = {}
                };
                
                local aimbot = {
                    enabled = true,
                    randomisation = 0,
                    distance = 200,
                    speed = 0.5,
                    autoprediction = true,
                    teamcheck = false,
                    bone = "Head",
                    --
                    fov_circle = true,
                    dynamic = true,
                    radius = 120,
                    position = "Mouse",
                    --
                    snapline = true,
                    snapline_color = Color3.fromRGB(255, 255, 255),
                    snapline_bone = "HumanoidRootPart",
                    snapline_from = "Mouse",
                };
                
                local Player_Modifications = {
                    Omni_Sprint = {
                        Enabled = false,
                        Speed = 25,
                    },
                };
                
                local ESP = {
                    Enabled = true,
                    TeamCheck = true,
                    MaxDistance = 5000,
                    FontSize = 11,
                    FadeOut = {
                        OnDistance = true,
                        OnDeath = false,
                        OnLeave = false,
                    },
                    Options = { 
                        Teamcheck = false, TeamcheckRGB = Color3.fromRGB(0, 255, 0),
                        Friendcheck = true, FriendcheckRGB = Color3.fromRGB(0, 255, 0),
                        Highlight = false, HighlightRGB = Color3.fromRGB(255, 0, 0),
                    },
                    Drawing = {
                        Chams = {
                            Enabled  = false,
                            Thermal = false,
                            FillRGB = Color3.fromRGB(119, 120, 255),
                            Fill_Transparency = 100,
                            OutlineRGB = Color3.fromRGB(119, 120, 255),
                            Outline_Transparency = 100,
                            VisibleCheck = false,
                        },
                        Names = {
                            Enabled = true,
                            RGB = Color3.fromRGB(255, 255, 255),
                        },
                        Flags = {
                            Enabled = false,
                        },
                        Distances = {
                            Enabled = false, 
                            Position = "Text",
                            RGB = Color3.fromRGB(255, 255, 255),
                        },
                        Weapons = {
                            Enabled = false, WeaponTextRGB = Color3.fromRGB(119, 120, 255),
                            Outlined = false,
                            Icons = false, RGB = Color3.fromRGB(255, 255, 255),
                            Gradient = false,
                            GradientRGB1 = Color3.fromRGB(255, 255, 255), GradientRGB2 = Color3.fromRGB(119, 120, 255),
                        },
                        Healthbar = {
                            Enabled = false,  
                            HealthText = true, Lerp = false, HealthTextRGB = Color3.fromRGB(119, 120, 255),
                            Width = 2.5,
                            Gradient = false, GradientRGB1 = Color3.fromRGB(200, 0, 0), GradientRGB2 = Color3.fromRGB(60, 60, 125), GradientRGB3 = Color3.fromRGB(119, 120, 255), 
                        },
                        Boxes = {
                            Animate = false,
                            RotationSpeed = 300,
                            Gradient = false, GradientRGB1 = Color3.fromRGB(119, 120, 255), GradientRGB2 = Color3.fromRGB(0, 0, 0), 
                            GradientFill = false, GradientFillRGB1 = Color3.fromRGB(119, 120, 255), GradientFillRGB2 = Color3.fromRGB(0, 0, 0), 
                            Filled = {
                                Enabled = false,
                                Transparency = 0.75,
                                RGB = Color3.fromRGB(0, 0, 0),
                            },
                            Full = {
                                Enabled = false,
                                RGB = Color3.fromRGB(255, 255, 255),
                            },
                            Corner = {
                                Enabled = false,
                                RGB = Color3.fromRGB(255, 255, 255),
                            },
                        };
                    };
                    Items = {
                        Enabled = false,
                        Icons = false,
                        RGB = Color3.fromRGB(255, 255, 255)
                    },
                    Connections = {
                        RunService = RunService;
                    };
                    Fovcircle = {};
                    Fonts = {};
                }
                
                -- Def & Vars
                local Euphoria = ESP.Connections;
                local lplayer = Players.LocalPlayer;
                local camera = game.Workspace.CurrentCamera;
                local Cam = Workspace.CurrentCamera;
                local RotationAngle, Tick = -45, tick();
                
                -- Weapon Images
                local Weapon_Icons = {
                    ["Wooden Bow"] = "http://www.roblox.com/asset/?id=17677465400",
                    ["Crossbow"] = "http://www.roblox.com/asset/?id=17677473017",
                    ["Salvaged SMG"] = "http://www.roblox.com/asset/?id=17677463033",
                    ["Salvaged AK47"] = "http://www.roblox.com/asset/?id=17677455113",
                    ["Salvaged AK74u"] = "http://www.roblox.com/asset/?id=17677442346",
                    ["Salvaged M14"] = "http://www.roblox.com/asset/?id=17677444642",
                    ["Salvaged Python"] = "http://www.roblox.com/asset/?id=17677451737",
                    ["Military PKM"] = "http://www.roblox.com/asset/?id=17677449448",
                    ["Military M4A1"] = "http://www.roblox.com/asset/?id=17677479536",
                    ["Bruno's M4A1"] = "http://www.roblox.com/asset/?id=17677471185",
                    ["Military Barrett"] = "http://www.roblox.com/asset/?id=17677482998",
                    ["Salvaged Skorpion"] = "http://www.roblox.com/asset/?id=17677459658",
                    ["Salvaged Pump Action"] = "http://www.roblox.com/asset/?id=17677457186",
                    ["Military AA12"] = "http://www.roblox.com/asset/?id=17677475227",
                    ["Salvaged Break Action"] = "http://www.roblox.com/asset/?id=17677468751",
                    ["Salvaged Pipe Rifle"] = "http://www.roblox.com/asset/?id=17677468751",
                    ["Salvaged P250"] = "http://www.roblox.com/asset/?id=17677447257",
                    ["Nail Gun"] = "http://www.roblox.com/asset/?id=17677484756"
                };
                
                -- Functions
                local Functions = {}
                do
                    function Functions:Create(Class, Properties)
                        local _Instance = typeof(Class) == 'string' and Instance.new(Class) or Class
                        for Property, Value in pairs(Properties) do
                            _Instance[Property] = Value
                        end
                        return _Instance;
                    end
                    --
                    function Functions:GetPlayerTool(Character)
                        for _, value in pairs(Character:GetChildren()) do
                            if value.Name ~= "HolsterModel" and value:IsA("Model") and value.Name ~= "Hair" and (value:FindFirstChild("Detail") or value:FindFirstChild("Main") or value:FindFirstChild("Handle") or value:FindFirstChild("Attachments") or value:FindFirstChild("ArrowAttach") or value:FindFirstChild("Attach")) and value.PrimaryPart then
                                return value.Name;
                            end
                        end
                        return "none"
                    end    
                    function Functions:GetPlayerToolImg(Character)
                        for _, value in pairs(Character:GetChildren()) do
                            if value.Name ~= "HolsterModel" and value:IsA("Model") and value.Name ~= "Hair" and (value:FindFirstChild("Detail") or value:FindFirstChild("Main") or value:FindFirstChild("Handle") or value:FindFirstChild("Attachments") or value:FindFirstChild("ArrowAttach") or value:FindFirstChild("Attach")) and value.PrimaryPart then
                                return Weapon_Icons[value.Name] ;
                            end
                        end
                        return nil
                    end     
                    --
                    function Functions:FadeOutOnDist(element, distance)
                        local transparency = math.max(0.1, 1 - (distance / ESP.MaxDistance))
                        if element:IsA("TextLabel") then
                            element.TextTransparency = 1 - transparency
                        elseif element:IsA("ImageLabel") then
                            element.ImageTransparency = 1 - transparency
                        elseif element:IsA("UIStroke") then
                            element.Transparency = 1 - transparency
                        elseif element:IsA("Frame") and (element == Healthbar or element == BehindHealthbar) then
                            element.BackgroundTransparency = 1 - transparency
                        elseif element:IsA("Frame") then
                            element.BackgroundTransparency = 1 - transparency
                        elseif element:IsA("Highlight") then
                            element.FillTransparency = 1 - transparency
                            element.OutlineTransparency = 1 - transparency
                        end;
                    end;  
                end;
                
                do -- Initalize
                    local ScreenGui = Functions:Create("ScreenGui", {
                        Parent = CoreGui,
                        Name = "ESPHolder",
                    });
                
                    local DupeCheck = function(plr)
                        if ScreenGui:FindFirstChild(plr.Name) then
                            ScreenGui[plr.Name]:Destroy()
                        end
                    end
                
                    local ESP = function(plr)
                        coroutine.wrap(DupeCheck)(plr) -- Dupecheck
                        local Name = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, -11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
                        local Distance = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
                        local Weapon = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
                        local Box = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0.75, BorderSizePixel = 0})
                        local Gradient1 = Functions:Create("UIGradient", {Parent = Box, Enabled = ESP.Drawing.Boxes.GradientFill, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientFillRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientFillRGB2)}})
                        local Outline = Functions:Create("UIStroke", {Parent = Box, Enabled = ESP.Drawing.Boxes.Gradient, Transparency = 0, Color = Color3.fromRGB(255, 255, 255), LineJoinMode = Enum.LineJoinMode.Miter})
                        local Gradient2 = Functions:Create("UIGradient", {Parent = Outline, Enabled = ESP.Drawing.Boxes.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientRGB2)}})
                        local Healthbar = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 0})
                        local BehindHealthbar = Functions:Create("Frame", {Parent = ScreenGui, ZIndex = -1, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0})
                        local HealthbarGradient = Functions:Create("UIGradient", {Parent = Healthbar, Enabled = ESP.Drawing.Healthbar.Gradient, Rotation = -90, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Healthbar.GradientRGB1), ColorSequenceKeypoint.new(0.5, ESP.Drawing.Healthbar.GradientRGB2), ColorSequenceKeypoint.new(1, ESP.Drawing.Healthbar.GradientRGB3)}})
                        local HealthText = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
                        local Chams = Functions:Create("Highlight", {Parent = ScreenGui, FillTransparency = 1, OutlineTransparency = 0, OutlineColor = Color3.fromRGB(119, 120, 255), DepthMode = "AlwaysOnTop"})
                        local WeaponIcon = Functions:Create("ImageLabel", {Parent = ScreenGui, BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(0, 40, 0, 40)})
                        local Gradient3 = Functions:Create("UIGradient", {Parent = WeaponIcon, Rotation = -90, Enabled = ESP.Drawing.Weapons.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Weapons.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Weapons.GradientRGB2)}})
                        local LeftTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                        local LeftSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                        local RightTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                        local RightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                        local BottomSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                        local BottomDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                        local BottomRightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                        local BottomRightDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                        local Flag1 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
                        local Flag2 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
                        --local DroppedItems = Functions:Create("TextLabel", {Parent = ScreenGui, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
                        --
                        local Updater = function()
                            local Connection;
                            local function HideESP()
                                Box.Visible = false;
                                Name.Visible = false;
                                Distance.Visible = false;
                                Weapon.Visible = false;
                                Healthbar.Visible = false;
                                BehindHealthbar.Visible = false;
                                HealthText.Visible = false;
                                WeaponIcon.Visible = false;
                                LeftTop.Visible = false;
                                LeftSide.Visible = false;
                                BottomSide.Visible = false;
                                BottomDown.Visible = false;
                                RightTop.Visible = false;
                                RightSide.Visible = false;
                                BottomRightSide.Visible = false;
                                BottomRightDown.Visible = false;
                                Flag1.Visible = false;
                                Chams.Enabled = false;
                                Flag2.Visible = false;
                                if not plr then
                                    ScreenGui:Destroy();
                                    Connection:Disconnect();
                                end
                            end
                            --
                            Connection = Euphoria.RunService.RenderStepped:Connect(function()
                                --[[ do -- Item ESP
                                    if ESP.Items.Enabled then
                                        for _, debrisPart in pairs(workspace.Debris:GetChildren()) do
                                            if debrisPart:IsA("BasePart") then
                                                local item_pos = debrisPart.Position
                                                local screen_pos, onScreen = Cam:WorldToScreenPoint(item_pos)
                                                DroppedItems.Text = debrisPart.Name
                                                DroppedItems.Position = UDim2.new(0, screen_pos.X, 0, screen_pos.Y)
                                                DroppedItems.Visible = onScreen
                                            end
                                        end
                                    else
                                        DroppedItems.Visible = false
                                    end         
                                end]]
                                --
                                if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                                    local HRP = plr.Character.HumanoidRootPart
                                    local Humanoid = plr.Character:WaitForChild("Humanoid");
                                    local Pos, OnScreen = Cam:WorldToScreenPoint(HRP.Position)
                                    local Dist = (Cam.CFrame.Position - HRP.Position).Magnitude / 3.5714285714
                                    
                                    if OnScreen and Dist <= ESP.MaxDistance then
                                        local Size = HRP.Size.Y
                                        local scaleFactor = (Size * Cam.ViewportSize.Y) / (Pos.Z * 2)
                                        local w, h = 3 * scaleFactor, 4.5 * scaleFactor
                
                                        -- Fade-out effect --
                                        if ESP.FadeOut.OnDistance then
                                            Functions:FadeOutOnDist(Box, Dist)
                                            Functions:FadeOutOnDist(Outline, Dist)
                                            Functions:FadeOutOnDist(Name, Dist)
                                            Functions:FadeOutOnDist(Distance, Dist)
                                            Functions:FadeOutOnDist(Weapon, Dist)
                                            Functions:FadeOutOnDist(Healthbar, Dist)
                                            Functions:FadeOutOnDist(BehindHealthbar, Dist)
                                            Functions:FadeOutOnDist(HealthText, Dist)
                                            Functions:FadeOutOnDist(WeaponIcon, Dist)
                                            Functions:FadeOutOnDist(LeftTop, Dist)
                                            Functions:FadeOutOnDist(LeftSide, Dist)
                                            Functions:FadeOutOnDist(BottomSide, Dist)
                                            Functions:FadeOutOnDist(BottomDown, Dist)
                                            Functions:FadeOutOnDist(RightTop, Dist)
                                            Functions:FadeOutOnDist(RightSide, Dist)
                                            Functions:FadeOutOnDist(BottomRightSide, Dist)
                                            Functions:FadeOutOnDist(BottomRightDown, Dist)
                                            Functions:FadeOutOnDist(Chams, Dist)
                                            Functions:FadeOutOnDist(Flag1, Dist)
                                            Functions:FadeOutOnDist(Flag2, Dist)
                                        end
                
                                        -- Teamcheck
                                        if ESP.TeamCheck and plr ~= lplayer and ((lplayer.Team ~= plr.Team and plr.Team) or (not lplayer.Team and not plr.Team)) and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Humanoid") then
                
                                            do -- Chams
                                                Chams.Adornee = plr.Character
                                                Chams.Enabled = ESP.Drawing.Chams.Enabled
                                                Chams.FillColor = ESP.Drawing.Chams.FillRGB
                                                Chams.OutlineColor = ESP.Drawing.Chams.OutlineRGB
                                                do -- Breathe
                                                    if ESP.Drawing.Chams.Thermal then
                                                        local breathe_effect = math.atan(math.sin(tick() * 2)) * 2 / math.pi
                                                        Chams.FillTransparency = ESP.Drawing.Chams.Fill_Transparency * breathe_effect * 0.01
                                                        Chams.OutlineTransparency = ESP.Drawing.Chams.Outline_Transparency * breathe_effect * 0.01
                                                    end
                                                end
                                                if ESP.Drawing.Chams.VisibleCheck then
                                                    Chams.DepthMode = "Occluded"
                                                else
                                                    Chams.DepthMode = "AlwaysOnTop"
                                                end
                                            end;
                
                                            do -- Corner Boxes
                                                LeftTop.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                                LeftTop.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                                                LeftTop.Size = UDim2.new(0, w / 5, 0, 1)
                                                
                                                LeftSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                                LeftSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                                                LeftSide.Size = UDim2.new(0, 1, 0, h / 5)
                                                
                                                BottomSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                                BottomSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                                                BottomSide.Size = UDim2.new(0, 1, 0, h / 5)
                                                BottomSide.AnchorPoint = Vector2.new(0, 5)
                                                
                                                BottomDown.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                                BottomDown.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                                                BottomDown.Size = UDim2.new(0, w / 5, 0, 1)
                                                BottomDown.AnchorPoint = Vector2.new(0, 1)
                                                
                                                RightTop.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                                RightTop.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y - h / 2)
                                                RightTop.Size = UDim2.new(0, w / 5, 0, 1)
                                                RightTop.AnchorPoint = Vector2.new(1, 0)
                                                
                                                RightSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                                RightSide.Position = UDim2.new(0, Pos.X + w / 2 - 1, 0, Pos.Y - h / 2)
                                                RightSide.Size = UDim2.new(0, 1, 0, h / 5)
                                                RightSide.AnchorPoint = Vector2.new(0, 0)
                                                
                                                BottomRightSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                                BottomRightSide.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                                                BottomRightSide.Size = UDim2.new(0, 1, 0, h / 5)
                                                BottomRightSide.AnchorPoint = Vector2.new(1, 1)
                                                
                                                BottomRightDown.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                                BottomRightDown.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                                                BottomRightDown.Size = UDim2.new(0, w / 5, 0, 1)
                                                BottomRightDown.AnchorPoint = Vector2.new(1, 1)                                                            
                                            end
                
                                            do -- Boxes
                                                Box.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                                                Box.Size = UDim2.new(0, w, 0, h)
                                                Box.Visible = ESP.Drawing.Boxes.Full.Enabled;
                
                                                -- Gradient
                                                if ESP.Drawing.Boxes.Filled.Enabled then
                                                    Box.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                                    if ESP.Drawing.Boxes.GradientFill then
                                                        Box.BackgroundTransparency = ESP.Drawing.Boxes.Filled.Transparency;
                                                    else
                                                        Box.BackgroundTransparency = 1
                                                    end
                                                    Box.BorderSizePixel = 1
                                                else
                                                    Box.BackgroundTransparency = 1
                                                end
                                                -- Animation
                                                RotationAngle = RotationAngle + (tick() - Tick) * ESP.Drawing.Boxes.RotationSpeed * math.cos(math.pi / 4 * tick() - math.pi / 2)
                                                if ESP.Drawing.Boxes.Animate then
                                                    Gradient1.Rotation = RotationAngle
                                                    Gradient2.Rotation = RotationAngle
                                                else
                                                    Gradient1.Rotation = -45
                                                    Gradient2.Rotation = -45
                                                end
                                                Tick = tick()
                                            end
                
                                            -- Healthbar
                                            do  
                                                local health = Humanoid.Health / Humanoid.MaxHealth;
                                                Healthbar.Visible = ESP.Drawing.Healthbar.Enabled;
                                                Healthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - health))  
                                                Healthbar.Size = UDim2.new(0, ESP.Drawing.Healthbar.Width, 0, h * health)  
                                                --
                                                BehindHealthbar.Visible = ESP.Drawing.Healthbar.Enabled;
                                                BehindHealthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2)  
                                                BehindHealthbar.Size = UDim2.new(0, ESP.Drawing.Healthbar.Width, 0, h)
                                                -- Health Text
                                                do
                                                    if ESP.Drawing.Healthbar.HealthText then
                                                        local healthPercentage = math.floor(Humanoid.Health / Humanoid.MaxHealth * 100)
                                                        HealthText.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - healthPercentage / 100) + 3)
                                                        HealthText.Text = tostring(healthPercentage)
                                                        HealthText.Visible = Humanoid.Health < Humanoid.MaxHealth
                                                        if ESP.Drawing.Healthbar.Lerp then
                                                            local color = health >= 0.75 and Color3.fromRGB(0, 255, 0) or health >= 0.5 and Color3.fromRGB(255, 255, 0) or health >= 0.25 and Color3.fromRGB(255, 170, 0) or Color3.fromRGB(255, 0, 0)
                                                            HealthText.TextColor3 = color
                                                        else
                                                            HealthText.TextColor3 = ESP.Drawing.Healthbar.HealthTextRGB
                                                        end
                                                    end                        
                                                end
                                            end
                
                                            do -- Names
                                                Name.Visible = ESP.Drawing.Names.Enabled
                                                if ESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                                                    Name.Text = string.format('(<font color="rgb(%d, %d, %d)">Friendly</font>) %s', ESP.Options.FriendcheckRGB.R * 255, ESP.Options.FriendcheckRGB.G * 255, ESP.Options.FriendcheckRGB.B * 255, plr.Name)
                                                else
                                                    Name.Text = string.format('(<font color="rgb(%d, %d, %d)">Enemy</font>) %s', 255, 0, 0, plr.Name)
                                                end
                                                Name.Position = UDim2.new(0, Pos.X, 0, Pos.Y - h / 2 - 9)
                                            end
                
                                            --[[do -- Flags
                                                Flag1.Position = UDim2.new(0, Pos.X + w / 2 + 20, 0, Pos.Y - h / 2 + 3)                                
                                                if ESP.Drawing.Flags.Enabled then
                                                    if false then
                                                        Flag1.Visible = true;
                                                        Flag1.TextColor3 = Color3.fromRGB(55, 200, 55)
                                                    else
                                                        Flag1.Visible = false;
                                                        Flag1.Text = "";
                                                    end
                                                    Flag2.Position = UDim2.new(0, Pos.X + w / 2 + 16, 0, Pos.Y - h / 2 + 14)       
                                                    if false then
                                                        Flag2.Visible = true;                      
                                                    else
                                                        Flag2.Visible = false;
                                                        Flag2.Text = "";
                                                    end
                                                end
                                            end]]
                                            
                                            do -- Distance
                                                if ESP.Drawing.Distances.Enabled then
                                                    if ESP.Drawing.Distances.Position == "Bottom" then
                                                        Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 18)
                                                        WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 15);
                                                        Distance.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 7)
                                                        Distance.Text = string.format("%d meters", math.floor(Dist))
                                                        Distance.Visible = true
                                                    elseif ESP.Drawing.Distances.Position == "Text" then
                                                        Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 8)
                                                        WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 5);
                                                        Distance.Visible = false
                                                        if ESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                                                            Name.Text = string.format('(<font color="rgb(%d, %d, %d)">F</font>) %s [%d]', ESP.Options.FriendcheckRGB.R * 255, ESP.Options.FriendcheckRGB.G * 255, ESP.Options.FriendcheckRGB.B * 255, plr.Name, math.floor(Dist))
                                                        else
                                                            Name.Text = string.format('(<font color="rgb(%d, %d, %d)">E</font>) %s [%d]', 255, 0, 0, plr.Name, math.floor(Dist))
                                                        end
                                                        Name.Visible = ESP.Drawing.Names.Enabled
                                                    end
                                                end
                                            end
                
                                            do -- Weapons
                                                local currentTool = Functions:GetPlayerTool(plr.Character)
                                                Weapon.Text = ESP.Drawing.Weapons.Enabled and string.format('[<font color="rgb(%d, %d, %d)">'.. currentTool ..'</font>]', ESP.Drawing.Weapons.WeaponTextRGB.R * 255, ESP.Drawing.Weapons.WeaponTextRGB.G * 255, ESP.Drawing.Weapons.WeaponTextRGB.B * 255) or ""
                                                Weapon.Visible = ESP.Drawing.Weapons.Enabled
                                                
                                                do -- Weapon icons
                                                    local WeaponImage = Functions:GetPlayerToolImg(plr.Character)
                                                    WeaponIcon.ImageColor3 = ESP.Drawing.Weapons.RGB
                                                    if WeaponImage then
                                                        WeaponIcon.Visible = ESP.Drawing.Weapons.Icons
                                                        WeaponIcon.Image = WeaponImage
                                                    else
                                                        WeaponIcon.Visible = false
                                                    end
                                                end
                                            end                            
                                        else
                                            HideESP();
                                        end
                                    else
                                        HideESP();
                                    end
                                else
                                    HideESP();
                                end
                            end)
                        end
                        coroutine.wrap(Updater)();
                    end
                    do -- Update ESP
                        for _, v in pairs(game:GetService("Players"):GetPlayers()) do
                            if v.Name ~= lplayer.Name then
                                coroutine.wrap(ESP)(v)
                            end      
                        end
                        --
                        game:GetService("Players").PlayerAdded:Connect(function(v)
                            coroutine.wrap(ESP)(v)
                        end);
                    end;
                end;
                
                --
            end})
        

        

        local lplr = game.Players.LocalPlayer
local camera = game:GetService("Workspace").CurrentCamera
local CurrentCamera = workspace.CurrentCamera
local worldToViewportPoint = CurrentCamera.worldToViewportPoint

_G.TeamCheck = false -- Use True or False to toggle TeamCheck

local TracerEnabled = false -- Add this line at the top of your script

playerespsection:addToggle({
    name = "Tracers",
    flag = "Tracers",
    callback = function(enabled)
        TracerEnabled = enabled -- Set the global variable based on the toggle
    end
})

for i,v in pairs(game.Players:GetChildren()) do
    local Tracer = Drawing.new("Line")
    Tracer.Visible = false
    Tracer.Color = Color3.new(34/255, 0, 204/255) -- Changed color here
    Tracer.Thickness = 1
    Tracer.Transparency = 1

    function lineesp()
        game:GetService("RunService").RenderStepped:Connect(function()
            if v.Character ~= nil and v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("HumanoidRootPart") ~= nil and v ~= lplr and v.Character.Humanoid.Health > 0 then
                local rootPart = v.Character.HumanoidRootPart
                local rootPartPos = rootPart.Position - Vector3.new(0, rootPart.Size.Y/2, 0)
                local Vector, OnScreen = camera:worldToViewportPoint(rootPartPos)

                if OnScreen then
                    Tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 1)
                    Tracer.To = Vector2.new(Vector.X, Vector.Y)

                    if _G.TeamCheck and v.TeamColor == lplr.TeamColor then
                        --//Teammates
                        Tracer.Visible = false
                    else
                        --//Enemies
                        Tracer.Visible = TracerEnabled -- Use the global variable here
                    end
                else
                    Tracer.Visible = false
                end
            else
                Tracer.Visible = false
            end
        end)
    end
    coroutine.wrap(lineesp)()
end

game.Players.PlayerAdded:Connect(function(v)
    local Tracer = Drawing.new("Line")
    Tracer.Visible = false
    Tracer.Color = Color3.new(34/255, 0, 204/255) -- Changed color here
    Tracer.Thickness = 1
    Tracer.Transparency = 1

    function lineesp()
        game:GetService("RunService").RenderStepped:Connect(function()
            if v.Character ~= nil and v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("HumanoidRootPart") ~= nil and v ~= lplr and v.Character.Humanoid.Health > 0 then
                local rootPart = v.Character.HumanoidRootPart
                local rootPartPos = rootPart.Position - Vector3.new(0, rootPart.Size.Y/2, 0)
                local Vector, OnScreen = camera:worldToViewportPoint(rootPartPos)

                if OnScreen then
                    Tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 1)
                    Tracer.To = Vector2.new(Vector.X, Vector.Y)

                    if _G.TeamCheck and v.TeamColor == lplr.TeamColor then
                        --//Teammates
                        Tracer.Visible = false
                    else
                        --//Enemies
                        Tracer.Visible = TracerEnabled -- Use the global variable here
                    end
                else
                    Tracer.Visible = false
                end
            else
                Tracer.Visible = false
            end
        end)
    end
    coroutine.wrap(lineesp)()
end)


playerespsection:addToggle({
    name = "Held Item",
    flag = "Held Item",
    callback = function(enabled)
        local Workspace, RunService, Players, CoreGui, Lighting = cloneref(game:GetService("Workspace")), cloneref(game:GetService("RunService")), cloneref(game:GetService("Players")), game:GetService("CoreGui"), cloneref(game:GetService("Lighting"))
        local Skybox = loadstring(game:HttpGet("https://raw.githubusercontent.com/BurnHubz/eclipse/main/Skyboxes.lua", true))();
        
        local utilities = {
            aimbot = {
                target = nil
            },
            functions = {}
        };
        
        local aimbot = {
            enabled = true,
            randomisation = 0,
            distance = 200,
            speed = 0.5,
            autoprediction = true,
            teamcheck = false,
            bone = "Head",
            --
            fov_circle = true,
            dynamic = true,
            radius = 120,
            position = "Mouse",
            --
            snapline = true,
            snapline_color = Color3.fromRGB(255, 255, 255),
            snapline_bone = "HumanoidRootPart",
            snapline_from = "Mouse",
        };
        
        local Player_Modifications = {
            Omni_Sprint = {
                Enabled = false,
                Speed = 25,
            },
        };
        
        local ESP = {
            Enabled = true,
            TeamCheck = true,
            MaxDistance = 5000,
            FontSize = 11,
            FadeOut = {
                OnDistance = true,
                OnDeath = false,
                OnLeave = false,
            },
            Options = { 
                Teamcheck = false, TeamcheckRGB = Color3.fromRGB(0, 255, 0),
                Friendcheck = true, FriendcheckRGB = Color3.fromRGB(0, 255, 0),
                Highlight = false, HighlightRGB = Color3.fromRGB(255, 0, 0),
            },
            Drawing = {
                Chams = {
                    Enabled  = false,
                    Thermal = false,
                    FillRGB = Color3.fromRGB(119, 120, 255),
                    Fill_Transparency = 100,
                    OutlineRGB = Color3.fromRGB(119, 120, 255),
                    Outline_Transparency = 100,
                    VisibleCheck = false,
                },
                Names = {
                    Enabled = false,
                    RGB = Color3.fromRGB(255, 255, 255),
                },
                Flags = {
                    Enabled = true,
                },
                Distances = {
                    Enabled = false, 
                    Position = "Text",
                    RGB = Color3.fromRGB(255, 255, 255),
                },
                Weapons = {
                    Enabled = true, WeaponTextRGB = Color3.fromRGB(119, 120, 255),
                    Outlined = false,
                    Icons = true, RGB = Color3.fromRGB(255, 255, 255),
                    Gradient = false,
                    GradientRGB1 = Color3.fromRGB(255, 255, 255), GradientRGB2 = Color3.fromRGB(119, 120, 255),
                },
                Healthbar = {
                    Enabled = false,  
                    HealthText = false, Lerp = false, HealthTextRGB = Color3.fromRGB(119, 120, 255),
                    Width = 2.5,
                    Gradient = false, GradientRGB1 = Color3.fromRGB(200, 0, 0), GradientRGB2 = Color3.fromRGB(60, 60, 125), GradientRGB3 = Color3.fromRGB(119, 120, 255), 
                },
                Boxes = {
                    Animate = false,
                    RotationSpeed = 300,
                    Gradient = false, GradientRGB1 = Color3.fromRGB(119, 120, 255), GradientRGB2 = Color3.fromRGB(0, 0, 0), 
                    GradientFill = false, GradientFillRGB1 = Color3.fromRGB(119, 120, 255), GradientFillRGB2 = Color3.fromRGB(0, 0, 0), 
                    Filled = {
                        Enabled = false,
                        Transparency = 0.75,
                        RGB = Color3.fromRGB(0, 0, 0),
                    },
                    Full = {
                        Enabled = false,
                        RGB = Color3.fromRGB(255, 255, 255),
                    },
                    Corner = {
                        Enabled = false,
                        RGB = Color3.fromRGB(255, 255, 255),
                    },
                };
            };
            Items = {
                Enabled = true,
                Icons = false,
                RGB = Color3.fromRGB(255, 255, 255)
            },
            Connections = {
                RunService = RunService;
            };
            Fovcircle = {};
            Fonts = {};
        }
        
        -- Def & Vars
        local Euphoria = ESP.Connections;
        local lplayer = Players.LocalPlayer;
        local camera = game.Workspace.CurrentCamera;
        local Cam = Workspace.CurrentCamera;
        local RotationAngle, Tick = -45, tick();
        
        -- Weapon Images
        local Weapon_Icons = {
            ["Wooden Bow"] = "http://www.roblox.com/asset/?id=17677465400",
            ["Crossbow"] = "http://www.roblox.com/asset/?id=17677473017",
            ["Salvaged SMG"] = "http://www.roblox.com/asset/?id=17677463033",
            ["Salvaged AK47"] = "http://www.roblox.com/asset/?id=17677455113",
            ["Salvaged AK74u"] = "http://www.roblox.com/asset/?id=17677442346",
            ["Salvaged M14"] = "http://www.roblox.com/asset/?id=17677444642",
            ["Salvaged Python"] = "http://www.roblox.com/asset/?id=17677451737",
            ["Military PKM"] = "http://www.roblox.com/asset/?id=17677449448",
            ["Military M4A1"] = "http://www.roblox.com/asset/?id=17677479536",
            ["Bruno's M4A1"] = "http://www.roblox.com/asset/?id=17677471185",
            ["Military Barrett"] = "http://www.roblox.com/asset/?id=17677482998",
            ["Salvaged Skorpion"] = "http://www.roblox.com/asset/?id=17677459658",
            ["Salvaged Pump Action"] = "http://www.roblox.com/asset/?id=17677457186",
            ["Military AA12"] = "http://www.roblox.com/asset/?id=17677475227",
            ["Salvaged Break Action"] = "http://www.roblox.com/asset/?id=17677468751",
            ["Salvaged Pipe Rifle"] = "http://www.roblox.com/asset/?id=17677468751",
            ["Salvaged P250"] = "http://www.roblox.com/asset/?id=17677447257",
            ["Nail Gun"] = "http://www.roblox.com/asset/?id=17677484756"
        };
        
        -- Functions
        local Functions = {}
        do
            function Functions:Create(Class, Properties)
                local _Instance = typeof(Class) == 'string' and Instance.new(Class) or Class
                for Property, Value in pairs(Properties) do
                    _Instance[Property] = Value
                end
                return _Instance;
            end
            --
            function Functions:GetPlayerTool(Character)
                for _, value in pairs(Character:GetChildren()) do
                    if value.Name ~= "HolsterModel" and value:IsA("Model") and value.Name ~= "Hair" and (value:FindFirstChild("Detail") or value:FindFirstChild("Main") or value:FindFirstChild("Handle") or value:FindFirstChild("Attachments") or value:FindFirstChild("ArrowAttach") or value:FindFirstChild("Attach")) and value.PrimaryPart then
                        return value.Name;
                    end
                end
                return "none"
            end    
            function Functions:GetPlayerToolImg(Character)
                for _, value in pairs(Character:GetChildren()) do
                    if value.Name ~= "HolsterModel" and value:IsA("Model") and value.Name ~= "Hair" and (value:FindFirstChild("Detail") or value:FindFirstChild("Main") or value:FindFirstChild("Handle") or value:FindFirstChild("Attachments") or value:FindFirstChild("ArrowAttach") or value:FindFirstChild("Attach")) and value.PrimaryPart then
                        return Weapon_Icons[value.Name] ;
                    end
                end
                return nil
            end     
            --
            function Functions:FadeOutOnDist(element, distance)
                local transparency = math.max(0.1, 1 - (distance / ESP.MaxDistance))
                if element:IsA("TextLabel") then
                    element.TextTransparency = 1 - transparency
                elseif element:IsA("ImageLabel") then
                    element.ImageTransparency = 1 - transparency
                elseif element:IsA("UIStroke") then
                    element.Transparency = 1 - transparency
                elseif element:IsA("Frame") and (element == Healthbar or element == BehindHealthbar) then
                    element.BackgroundTransparency = 1 - transparency
                elseif element:IsA("Frame") then
                    element.BackgroundTransparency = 1 - transparency
                elseif element:IsA("Highlight") then
                    element.FillTransparency = 1 - transparency
                    element.OutlineTransparency = 1 - transparency
                end;
            end;  
        end;
        
        do -- Initalize
            local ScreenGui = Functions:Create("ScreenGui", {
                Parent = CoreGui,
                Name = "ESPHolder",
            });
        
            local DupeCheck = function(plr)
                if ScreenGui:FindFirstChild(plr.Name) then
                    ScreenGui[plr.Name]:Destroy()
                end
            end
        
            local ESP = function(plr)
                coroutine.wrap(DupeCheck)(plr) -- Dupecheck
                local Name = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, -11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
                local Distance = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 11), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
                local Weapon = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true})
                local Box = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0.75, BorderSizePixel = 0})
                local Gradient1 = Functions:Create("UIGradient", {Parent = Box, Enabled = ESP.Drawing.Boxes.GradientFill, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientFillRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientFillRGB2)}})
                local Outline = Functions:Create("UIStroke", {Parent = Box, Enabled = ESP.Drawing.Boxes.Gradient, Transparency = 0, Color = Color3.fromRGB(255, 255, 255), LineJoinMode = Enum.LineJoinMode.Miter})
                local Gradient2 = Functions:Create("UIGradient", {Parent = Outline, Enabled = ESP.Drawing.Boxes.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Boxes.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Boxes.GradientRGB2)}})
                local Healthbar = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 0})
                local BehindHealthbar = Functions:Create("Frame", {Parent = ScreenGui, ZIndex = -1, BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 0})
                local HealthbarGradient = Functions:Create("UIGradient", {Parent = Healthbar, Enabled = ESP.Drawing.Healthbar.Gradient, Rotation = -90, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Healthbar.GradientRGB1), ColorSequenceKeypoint.new(0.5, ESP.Drawing.Healthbar.GradientRGB2), ColorSequenceKeypoint.new(1, ESP.Drawing.Healthbar.GradientRGB3)}})
                local HealthText = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
                local Chams = Functions:Create("Highlight", {Parent = ScreenGui, FillTransparency = 1, OutlineTransparency = 0, OutlineColor = Color3.fromRGB(119, 120, 255), DepthMode = "AlwaysOnTop"})
                local WeaponIcon = Functions:Create("ImageLabel", {Parent = ScreenGui, BackgroundTransparency = 1, BorderColor3 = Color3.fromRGB(0, 0, 0), BorderSizePixel = 0, Size = UDim2.new(0, 40, 0, 40)})
                local Gradient3 = Functions:Create("UIGradient", {Parent = WeaponIcon, Rotation = -90, Enabled = ESP.Drawing.Weapons.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ESP.Drawing.Weapons.GradientRGB1), ColorSequenceKeypoint.new(1, ESP.Drawing.Weapons.GradientRGB2)}})
                local LeftTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local LeftSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local RightTop = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local RightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local BottomSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local BottomDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local BottomRightSide = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local BottomRightDown = Functions:Create("Frame", {Parent = ScreenGui, BackgroundColor3 = ESP.Drawing.Boxes.Corner.RGB, Position = UDim2.new(0, 0, 0, 0)})
                local Flag1 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
                local Flag2 = Functions:Create("TextLabel", {Parent = ScreenGui, Position = UDim2.new(1, 0, 0, 0), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
                --local DroppedItems = Functions:Create("TextLabel", {Parent = ScreenGui, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), Font = Enum.Font.Code, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0)})
                --
                local Updater = function()
                    local Connection;
                    local function HideESP()
                        Box.Visible = false;
                        Name.Visible = false;
                        Distance.Visible = false;
                        Weapon.Visible = false;
                        Healthbar.Visible = false;
                        BehindHealthbar.Visible = false;
                        HealthText.Visible = false;
                        WeaponIcon.Visible = false;
                        LeftTop.Visible = false;
                        LeftSide.Visible = false;
                        BottomSide.Visible = false;
                        BottomDown.Visible = false;
                        RightTop.Visible = false;
                        RightSide.Visible = false;
                        BottomRightSide.Visible = false;
                        BottomRightDown.Visible = false;
                        Flag1.Visible = false;
                        Chams.Enabled = false;
                        Flag2.Visible = false;
                        if not plr then
                            ScreenGui:Destroy();
                            Connection:Disconnect();
                        end
                    end
                    --
                    Connection = Euphoria.RunService.RenderStepped:Connect(function()
                        --[[ do -- Item ESP
                            if ESP.Items.Enabled then
                                for _, debrisPart in pairs(workspace.Debris:GetChildren()) do
                                    if debrisPart:IsA("BasePart") then
                                        local item_pos = debrisPart.Position
                                        local screen_pos, onScreen = Cam:WorldToScreenPoint(item_pos)
                                        DroppedItems.Text = debrisPart.Name
                                        DroppedItems.Position = UDim2.new(0, screen_pos.X, 0, screen_pos.Y)
                                        DroppedItems.Visible = onScreen
                                    end
                                end
                            else
                                DroppedItems.Visible = false
                            end         
                        end]]
                        --
                        if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                            local HRP = plr.Character.HumanoidRootPart
                            local Humanoid = plr.Character:WaitForChild("Humanoid");
                            local Pos, OnScreen = Cam:WorldToScreenPoint(HRP.Position)
                            local Dist = (Cam.CFrame.Position - HRP.Position).Magnitude / 3.5714285714
                            
                            if OnScreen and Dist <= ESP.MaxDistance then
                                local Size = HRP.Size.Y
                                local scaleFactor = (Size * Cam.ViewportSize.Y) / (Pos.Z * 2)
                                local w, h = 3 * scaleFactor, 4.5 * scaleFactor
        
                                -- Fade-out effect --
                                if ESP.FadeOut.OnDistance then
                                    Functions:FadeOutOnDist(Box, Dist)
                                    Functions:FadeOutOnDist(Outline, Dist)
                                    Functions:FadeOutOnDist(Name, Dist)
                                    Functions:FadeOutOnDist(Distance, Dist)
                                    Functions:FadeOutOnDist(Weapon, Dist)
                                    Functions:FadeOutOnDist(Healthbar, Dist)
                                    Functions:FadeOutOnDist(BehindHealthbar, Dist)
                                    Functions:FadeOutOnDist(HealthText, Dist)
                                    Functions:FadeOutOnDist(WeaponIcon, Dist)
                                    Functions:FadeOutOnDist(LeftTop, Dist)
                                    Functions:FadeOutOnDist(LeftSide, Dist)
                                    Functions:FadeOutOnDist(BottomSide, Dist)
                                    Functions:FadeOutOnDist(BottomDown, Dist)
                                    Functions:FadeOutOnDist(RightTop, Dist)
                                    Functions:FadeOutOnDist(RightSide, Dist)
                                    Functions:FadeOutOnDist(BottomRightSide, Dist)
                                    Functions:FadeOutOnDist(BottomRightDown, Dist)
                                    Functions:FadeOutOnDist(Chams, Dist)
                                    Functions:FadeOutOnDist(Flag1, Dist)
                                    Functions:FadeOutOnDist(Flag2, Dist)
                                end
        
                                -- Teamcheck
                                if ESP.TeamCheck and plr ~= lplayer and ((lplayer.Team ~= plr.Team and plr.Team) or (not lplayer.Team and not plr.Team)) and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Humanoid") then
        
                                    do -- Chams
                                        Chams.Adornee = plr.Character
                                        Chams.Enabled = ESP.Drawing.Chams.Enabled
                                        Chams.FillColor = ESP.Drawing.Chams.FillRGB
                                        Chams.OutlineColor = ESP.Drawing.Chams.OutlineRGB
                                        do -- Breathe
                                            if ESP.Drawing.Chams.Thermal then
                                                local breathe_effect = math.atan(math.sin(tick() * 2)) * 2 / math.pi
                                                Chams.FillTransparency = ESP.Drawing.Chams.Fill_Transparency * breathe_effect * 0.01
                                                Chams.OutlineTransparency = ESP.Drawing.Chams.Outline_Transparency * breathe_effect * 0.01
                                            end
                                        end
                                        if ESP.Drawing.Chams.VisibleCheck then
                                            Chams.DepthMode = "Occluded"
                                        else
                                            Chams.DepthMode = "AlwaysOnTop"
                                        end
                                    end;
        
                                    do -- Corner Boxes
                                        LeftTop.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        LeftTop.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                                        LeftTop.Size = UDim2.new(0, w / 5, 0, 1)
                                        
                                        LeftSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        LeftSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                                        LeftSide.Size = UDim2.new(0, 1, 0, h / 5)
                                        
                                        BottomSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        BottomSide.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                                        BottomSide.Size = UDim2.new(0, 1, 0, h / 5)
                                        BottomSide.AnchorPoint = Vector2.new(0, 5)
                                        
                                        BottomDown.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        BottomDown.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y + h / 2)
                                        BottomDown.Size = UDim2.new(0, w / 5, 0, 1)
                                        BottomDown.AnchorPoint = Vector2.new(0, 1)
                                        
                                        RightTop.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        RightTop.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y - h / 2)
                                        RightTop.Size = UDim2.new(0, w / 5, 0, 1)
                                        RightTop.AnchorPoint = Vector2.new(1, 0)
                                        
                                        RightSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        RightSide.Position = UDim2.new(0, Pos.X + w / 2 - 1, 0, Pos.Y - h / 2)
                                        RightSide.Size = UDim2.new(0, 1, 0, h / 5)
                                        RightSide.AnchorPoint = Vector2.new(0, 0)
                                        
                                        BottomRightSide.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        BottomRightSide.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                                        BottomRightSide.Size = UDim2.new(0, 1, 0, h / 5)
                                        BottomRightSide.AnchorPoint = Vector2.new(1, 1)
                                        
                                        BottomRightDown.Visible = ESP.Drawing.Boxes.Corner.Enabled
                                        BottomRightDown.Position = UDim2.new(0, Pos.X + w / 2, 0, Pos.Y + h / 2)
                                        BottomRightDown.Size = UDim2.new(0, w / 5, 0, 1)
                                        BottomRightDown.AnchorPoint = Vector2.new(1, 1)                                                            
                                    end
        
                                    do -- Boxes
                                        Box.Position = UDim2.new(0, Pos.X - w / 2, 0, Pos.Y - h / 2)
                                        Box.Size = UDim2.new(0, w, 0, h)
                                        Box.Visible = ESP.Drawing.Boxes.Full.Enabled;
        
                                        -- Gradient
                                        if ESP.Drawing.Boxes.Filled.Enabled then
                                            Box.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                            if ESP.Drawing.Boxes.GradientFill then
                                                Box.BackgroundTransparency = ESP.Drawing.Boxes.Filled.Transparency;
                                            else
                                                Box.BackgroundTransparency = 1
                                            end
                                            Box.BorderSizePixel = 1
                                        else
                                            Box.BackgroundTransparency = 1
                                        end
                                        -- Animation
                                        RotationAngle = RotationAngle + (tick() - Tick) * ESP.Drawing.Boxes.RotationSpeed * math.cos(math.pi / 4 * tick() - math.pi / 2)
                                        if ESP.Drawing.Boxes.Animate then
                                            Gradient1.Rotation = RotationAngle
                                            Gradient2.Rotation = RotationAngle
                                        else
                                            Gradient1.Rotation = -45
                                            Gradient2.Rotation = -45
                                        end
                                        Tick = tick()
                                    end
        
                                    -- Healthbar
                                    do  
                                        local health = Humanoid.Health / Humanoid.MaxHealth;
                                        Healthbar.Visible = ESP.Drawing.Healthbar.Enabled;
                                        Healthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - health))  
                                        Healthbar.Size = UDim2.new(0, ESP.Drawing.Healthbar.Width, 0, h * health)  
                                        --
                                        BehindHealthbar.Visible = ESP.Drawing.Healthbar.Enabled;
                                        BehindHealthbar.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2)  
                                        BehindHealthbar.Size = UDim2.new(0, ESP.Drawing.Healthbar.Width, 0, h)
                                        -- Health Text
                                        do
                                            if ESP.Drawing.Healthbar.HealthText then
                                                local healthPercentage = math.floor(Humanoid.Health / Humanoid.MaxHealth * 100)
                                                HealthText.Position = UDim2.new(0, Pos.X - w / 2 - 6, 0, Pos.Y - h / 2 + h * (1 - healthPercentage / 100) + 3)
                                                HealthText.Text = tostring(healthPercentage)
                                                HealthText.Visible = Humanoid.Health < Humanoid.MaxHealth
                                                if ESP.Drawing.Healthbar.Lerp then
                                                    local color = health >= 0.75 and Color3.fromRGB(0, 255, 0) or health >= 0.5 and Color3.fromRGB(255, 255, 0) or health >= 0.25 and Color3.fromRGB(255, 170, 0) or Color3.fromRGB(255, 0, 0)
                                                    HealthText.TextColor3 = color
                                                else
                                                    HealthText.TextColor3 = ESP.Drawing.Healthbar.HealthTextRGB
                                                end
                                            end                        
                                        end
                                    end
        
                                    do -- Names
                                        Name.Visible = ESP.Drawing.Names.Enabled
                                        if ESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                                            Name.Text = string.format('(<font color="rgb(%d, %d, %d)">F</font>) %s', ESP.Options.FriendcheckRGB.R * 255, ESP.Options.FriendcheckRGB.G * 255, ESP.Options.FriendcheckRGB.B * 255, plr.Name)
                                        else
                                            Name.Text = string.format('(<font color="rgb(%d, %d, %d)">E</font>) %s', 255, 0, 0, plr.Name)
                                        end
                                        Name.Position = UDim2.new(0, Pos.X, 0, Pos.Y - h / 2 - 9)
                                    end
        
                                    --[[do -- Flags
                                        Flag1.Position = UDim2.new(0, Pos.X + w / 2 + 20, 0, Pos.Y - h / 2 + 3)                                
                                        if ESP.Drawing.Flags.Enabled then
                                            if false then
                                                Flag1.Visible = true;
                                                Flag1.TextColor3 = Color3.fromRGB(55, 200, 55)
                                            else
                                                Flag1.Visible = false;
                                                Flag1.Text = "";
                                            end
                                            Flag2.Position = UDim2.new(0, Pos.X + w / 2 + 16, 0, Pos.Y - h / 2 + 14)       
                                            if false then
                                                Flag2.Visible = true;                      
                                            else
                                                Flag2.Visible = false;
                                                Flag2.Text = "";
                                            end
                                        end
                                    end]]
                                    
                                    do -- Distance
                                        if ESP.Drawing.Distances.Enabled then
                                            if ESP.Drawing.Distances.Position == "Bottom" then
                                                Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 18)
                                                WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 15);
                                                Distance.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 7)
                                                Distance.Text = string.format("%d meters", math.floor(Dist))
                                                Distance.Visible = true
                                            elseif ESP.Drawing.Distances.Position == "Text" then
                                                Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 8)
                                                WeaponIcon.Position = UDim2.new(0, Pos.X - 21, 0, Pos.Y + h / 2 + 5);
                                                Distance.Visible = false
                                                if ESP.Options.Friendcheck and lplayer:IsFriendsWith(plr.UserId) then
                                                    Name.Text = string.format('(<font color="rgb(%d, %d, %d)">F</font>) %s [%d]', ESP.Options.FriendcheckRGB.R * 255, ESP.Options.FriendcheckRGB.G * 255, ESP.Options.FriendcheckRGB.B * 255, plr.Name, math.floor(Dist))
                                                else
                                                    Name.Text = string.format('(<font color="rgb(%d, %d, %d)">E</font>) %s [%d]', 255, 0, 0, plr.Name, math.floor(Dist))
                                                end
                                                Name.Visible = ESP.Drawing.Names.Enabled
                                            end
                                        end
                                    end
        
                                    do -- Weapons
                                        local currentTool = Functions:GetPlayerTool(plr.Character)
                                        Weapon.Text = ESP.Drawing.Weapons.Enabled and string.format('[<font color="rgb(%d, %d, %d)">'.. currentTool ..'</font>]', ESP.Drawing.Weapons.WeaponTextRGB.R * 255, ESP.Drawing.Weapons.WeaponTextRGB.G * 255, ESP.Drawing.Weapons.WeaponTextRGB.B * 255) or ""
                                        Weapon.Visible = ESP.Drawing.Weapons.Enabled
                                        
                                        do -- Weapon icons
                                            local WeaponImage = Functions:GetPlayerToolImg(plr.Character)
                                            WeaponIcon.ImageColor3 = ESP.Drawing.Weapons.RGB
                                            if WeaponImage then
                                                WeaponIcon.Visible = ESP.Drawing.Weapons.Icons
                                                WeaponIcon.Image = WeaponImage
                                            else
                                                WeaponIcon.Visible = false
                                            end
                                        end
                                    end                            
                                else
                                    HideESP();
                                end
                            else
                                HideESP();
                            end
                        else
                            HideESP();
                        end
                    end)
                end
                coroutine.wrap(Updater)();
            end
            do -- Update ESP
                for _, v in pairs(game:GetService("Players"):GetPlayers()) do
                    if v.Name ~= lplayer.Name then
                        coroutine.wrap(ESP)(v)
                    end      
                end
                --
                game:GetService("Players").PlayerAdded:Connect(function(v)
                    coroutine.wrap(ESP)(v)
                end);
            end;
        end;
        
        --
       
    end})





    --AI SECTION

    scavsection:addToggle({name = "Ai ESP",
    flag = "Ai ESP", 
    callback = function(value)
        tog = value
        function createtext(parent,name)
          local gui = Instance.new("BillboardGui")
          local esp = Instance.new("TextLabel")
          esp.Parent = gui;
      
          gui.Name = tostring(name);
          gui.ResetOnSpawn = false
          gui.AlwaysOnTop = true;
          gui.LightInfluence = 0;
          gui.Size = UDim2.new(1,0.5,1,0.5);
          gui.Parent = parent
          esp.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
          esp.Text = name
          esp.Size = UDim2.new(1,0,0,1.5);
          esp.BorderSizePixel = 0;
          esp.Font = "GothamMedium"
          esp.TextSize = 13
          esp.TextColor3 = Color3.fromRGB(255,255,255) 
      end
      
      for i,v in next,game:GetService("Workspace").AiZones.Sawmill:GetChildren() do
          if v:IsA("Model") then
              local Highlight = Instance.new("Highlight")
              Highlight.Parent = v
              Highlight.OutlineColor = Color3.fromRGB(255,255,255)
              Highlight.FillColor = Color3.fromRGB(119,120,255)
              Highlight.Enabled = true
              Highlight.FillTransparency = 0.7;
              Highlight.OutlineTransparency = 0
      
                  createtext(v,tostring(v))
          end
      end
      function createesp(v)
          local Highlight = Instance.new("Highlight")
              Highlight.Parent = v
              Highlight.OutlineColor = Color3.fromRGB(119,120,255)
              Highlight.FillColor = Color3.fromRGB(119,120,255)
              Highlight.Enabled = true
              Highlight.FillTransparency = 0.7;
              Highlight.OutlineTransparency = 0
      
                  createtext(v,tostring(v))
      end
      game:GetService("Workspace").AiZones.Sawmill.ChildAdded:Connect(function(child)
          createesp(child)
      end)
      end})



      playerespsection:addToggle({
        name = "Inventory Viewer",
        flag = "Inventory Viewer",
        callback = function(skibidi)
            if skibidi then
                -- Cache frequently accessed services and objects
                local Players = game:GetService("Players")
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local RunService = game:GetService("RunService")
                local LocalPlayer = Players.LocalPlayer
                local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
                local CurrentCamera = workspace.CurrentCamera
    
                local screenGui, frame, playerNameLabel, weaponsListLabel, armourListLabel
    
                -- Function to create the GUI
                local function createGUI()
                    -- Create the ScreenGui
                    screenGui = Instance.new("ScreenGui")
                    screenGui.Parent = PlayerGui
                    screenGui.Name = "LeftSideUI"
    
                    -- Create the Frame
                    frame = Instance.new("Frame")
                    frame.Parent = screenGui
                    frame.Size = UDim2.new(0.12, 0, 0.55, 0) -- 12% of the screen width and 55% of the height
                    frame.Position = UDim2.new(0, 10, 0, 10) -- Positioned slightly down and to the right
                    frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Dark grey color
                    frame.BackgroundTransparency = 1 -- 20% transparency
    
                    -- Create the gradient background
                    local gradient = Instance.new("UIGradient")
                    gradient.Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
                        ColorSequenceKeypoint.new(1, Color3.fromRGB(128, 128, 128))
                    }
                    gradient.Parent = frame
    
                    -- Create the corner effect
                    local corner = Instance.new("UICorner")
                    corner.CornerRadius = UDim.new(0, 10)
                    corner.Parent = frame
    
                    -- Consistent text size and font
                    local textSize = 28 -- Increased text size for better visibility
                    local textFont = Enum.Font.Code -- Bold font for emphasis
    
                    -- Create a TextLabel to display the player's name
                    playerNameLabel = Instance.new("TextLabel")
                    playerNameLabel.Parent = frame
                    playerNameLabel.Size = UDim2.new(1, 0, 0, 70) -- Full width, height of 70 pixels
                    playerNameLabel.Position = UDim2.new(0, 0, 0, 0) -- Positioned at the top of the frame
                    playerNameLabel.BackgroundTransparency = 1 -- Fully transparent background
                    playerNameLabel.TextColor3 = Color3.new(1, 1, 1) -- White text color
                    playerNameLabel.TextSize = textSize -- Consistent text size
                    playerNameLabel.Font = textFont -- Custom font
                    playerNameLabel.Text = "Finding closest player..."
    
                    -- Create a TextLabel for the "Weapons" title
                    local weaponsTitleLabel = Instance.new("TextLabel")
                    weaponsTitleLabel.Parent = frame
                    weaponsTitleLabel.Size = UDim2.new(1, 0, 0, 70) -- Full width, height of 70 pixels
                    weaponsTitleLabel.Position = UDim2.new(0, 0, 0, 70) -- Positioned below the player's name label
                    weaponsTitleLabel.BackgroundTransparency = 1 -- Fully transparent background
                    weaponsTitleLabel.TextColor3 = Color3.new(1, 1, 0) -- Yellow text color
                    weaponsTitleLabel.TextSize = textSize -- Consistent text size
                    weaponsTitleLabel.Font = textFont -- Custom font
                    weaponsTitleLabel.Text = "Weapons"
    
                    -- Create a TextLabel to display the weapons list
                    weaponsListLabel = Instance.new("TextLabel")
                    weaponsListLabel.Parent = frame
                    weaponsListLabel.Size = UDim2.new(1, 0, 0, 140) -- Full width, height of 140 pixels
                    weaponsListLabel.Position = UDim2.new(0, 0, 0, 140) -- Positioned below the weapons title
                    weaponsListLabel.BackgroundTransparency = 1 -- Fully transparent background
                    weaponsListLabel.TextColor3 = Color3.new(1, 1, 1) -- White text color
                    weaponsListLabel.TextSize = textSize -- Consistent text size
                    weaponsListLabel.Font = textFont -- Custom font
                    weaponsListLabel.Text = "None"
    
                    -- Create a TextLabel for the "Armour" title
                    local armourTitleLabel = Instance.new("TextLabel")
                    armourTitleLabel.Parent = frame
                    armourTitleLabel.Size = UDim2.new(1, 0, 0, 70) -- Full width, height of 70 pixels
                    armourTitleLabel.Position = UDim2.new(0, 0, 0, 260) -- Positioned below the weapons list
                    armourTitleLabel.BackgroundTransparency = 1 -- Fully transparent background
                    armourTitleLabel.TextColor3 = Color3.new(1, 1, 0) -- Yellow text color
                    armourTitleLabel.TextSize = textSize -- Consistent text size
                    armourTitleLabel.Font = textFont -- Custom font
                    armourTitleLabel.Text = "Armor"
    
                    -- Create a TextLabel to display the armour list
                    armourListLabel = Instance.new("TextLabel")
                    armourListLabel.Parent = frame
                    armourListLabel.Size = UDim2.new(1, 0, 0, 140) -- Full width, height of 140 pixels
                    armourListLabel.Position = UDim2.new(0, 0, 0, 350) -- Positioned below the armour title
                    armourListLabel.BackgroundTransparency = 1 -- Fully transparent background
                    armourListLabel.TextColor3 = Color3.new(1, 1, 1) -- White text color
                    armourListLabel.TextSize = textSize -- Consistent text size
                    armourListLabel.Font = textFont -- Custom font
                    armourListLabel.Text = "None"
                end
    
                -- Function to find the closest player to the center of the screen
                local function findClosestPlayer()
                    local players = Players:GetPlayers()
                    local screenCenter = Vector2.new(CurrentCamera.ViewportSize.X / 2, CurrentCamera.ViewportSize.Y / 2)
                    local closestPlayer, closestDistance = nil, math.huge
    
                    for _, player in ipairs(players) do
                        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            local playerPosition = CurrentCamera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
                            local distance = (Vector2.new(playerPosition.X, playerPosition.Y) - screenCenter).magnitude
                            if distance < closestDistance then
                                closestDistance = distance
                                closestPlayer = player
                            end
                        end
                    end
    
                    return closestPlayer
                end
    
                -- Function to update the weapons list UI
                local function updateWeaponsList(player)
                    local inventory = ReplicatedStorage:FindFirstChild("Players"):FindFirstChild(player.Name):FindFirstChild("Inventory")
                    if inventory then
                        local weaponList = {}
                        for _, weapon in ipairs(inventory:GetChildren()) do
                            table.insert(weaponList, weapon.Name)
                        end
                        weaponsListLabel.Text = table.concat(weaponList, "\n")
                    else
                        weaponsListLabel.Text = "None"
                    end
                end
    
                -- Function to update the armour list UI
                local function updateArmourList(player)
                    local playerFolder = ReplicatedStorage:FindFirstChild("Players"):FindFirstChild(player.Name)
                    if playerFolder then
                        local clothing = playerFolder:FindFirstChild("Clothing")
                        if clothing then
                            local armourList = {}
                            local excludeItem = "WastelandShirt"
                            for _, armour in ipairs(clothing:GetChildren()) do
                                if armour.Name ~= excludeItem then
                                    table.insert(armourList, armour.Name)
                                end
                            end
                            armourListLabel.Text = table.concat(armourList, "\n")
                        else
                            armourListLabel.Text = "None"
                        end
                    else
                        armourListLabel.Text = "None"
                    end
                end
    
                -- Function to update the UI with the closest player's name, weapons, and armour
                local function updateUI()
                    local closestPlayer = findClosestPlayer()
                    if closestPlayer then
                        playerNameLabel.Text = closestPlayer.Name
                        updateWeaponsList(closestPlayer)
                        updateArmourList(closestPlayer)
                    else
                        playerNameLabel.Text = "No players found"
                        weaponsListLabel.Text = "None"
                        armourListLabel.Text = "None"
                    end
                end
    
                -- Create the GUI initially
                createGUI()
    
                -- Check every 5 seconds if the UI exists, if not then load the UI
                local checkInterval, checkElapsedTime = 5, 0
                local uiUpdateInterval, uiElapsedTime = 0.1, 0
    
                RunService.Heartbeat:Connect(function(deltaTime)
                    checkElapsedTime = checkElapsedTime + deltaTime
                    uiElapsedTime = uiElapsedTime + deltaTime
    
                    if checkElapsedTime >= checkInterval then
                        checkElapsedTime = 0
                        if not PlayerGui:FindFirstChild("LeftSideUI") then
                            createGUI()
                        end
                    end
    
                    if uiElapsedTime >= uiUpdateInterval then
                        uiElapsedTime = 0
                        updateUI()
                    end
                end)
    
                -- Function to reinitialize the GUI when the local player dies
                local function onPlayerDied()
                    -- Reuse the existing GUI
                    screenGui:Destroy()
                    createGUI()
                    wait(15)
                end
    
                -- Connect to the Humanoid.Died event
                LocalPlayer.CharacterAdded:Connect(function(character)
                    local humanoid = character:WaitForChild("Humanoid")
                    humanoid.Died:Connect(onPlayerDied)
                end)
            else
                -- Code to disable or clean up the UI if skibidi is false
                if screenGui then
                    screenGui:Destroy()
                    screenGui = nil
                end
            end
        end})


      --WORLD

      worldespsection:addToggle({name = "Corpse/Dropped Items ESP",
      flag = "Corpse ESP",
      callback = function(value)
        tog = value
        function createtext(parent,name)
          local gui = Instance.new("BillboardGui")
          local esp = Instance.new("TextLabel")
          esp.Parent = gui;
      
          gui.Name = tostring(name);
          gui.ResetOnSpawn = false
          gui.AlwaysOnTop = true;
          gui.LightInfluence = 0;
          gui.Size = UDim2.new(1,0.5,1,0.5);
          gui.Parent = parent
          esp.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
          esp.Text = name
          esp.Size = UDim2.new(1,0,0,1.5);
          esp.BorderSizePixel = 0;
          esp.Font = "GothamMedium"
          esp.TextSize = 13
          esp.TextColor3 = Color3.fromRGB(255,255,255) 
      end
      
      for i,v in next,game:GetService("Workspace").DroppedItems:GetChildren() do
          if v:IsA("Model") then
              local Highlight = Instance.new("Highlight")
              Highlight.Parent = v
              Highlight.OutlineColor = Color3.fromRGB(255,255,255)
              Highlight.FillColor = Color3.fromRGB(119,120,255)
              Highlight.Enabled = true
              Highlight.FillTransparency = 0.7;
              Highlight.OutlineTransparency = 0
      
                  createtext(v,tostring(v))
          end
      end
      function createesp(v)
          local Highlight = Instance.new("Highlight")
              Highlight.Parent = v
              Highlight.OutlineColor = Color3.fromRGB(255,255,255)
              Highlight.FillColor = Color3.fromRGB(119,120,255)
              Highlight.Enabled = true
              Highlight.FillTransparency = 0;
              Highlight.OutlineTransparency = 0
      
                  createtext(v,tostring(v))
      end
      game:GetService("Workspace").DroppedItems.ChildAdded:Connect(function(child)
          createesp(child)
      end)
      end})

      worldespsection:addToggle({name = "Container ESP",
      flag = "Container ESP",
      callback = function(value)
        local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

local Active = true
local Keybind = Enum.KeyCode.P
local RenderDistance = 200

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
ScreenGui.Parent = CoreGui

local TextLabel = Instance.new("TextLabel")
TextLabel.BackgroundTransparency = 1
TextLabel.Position = UDim2.new(0.02, 0, 0.2, 0)
TextLabel.Size = UDim2.new(0, 0, 0, 0)
TextLabel.Text = "Render Distance: " .. RenderDistance .. [[<br /><font color = "rgb(255, 0, 0)">[↓]</font> Decrease render distance by 100<br /><font color = "rgb(0, 255, 0)">[↑]</font> Increase render distance by 100<br /><font color = "rgb(255, 255, 0)">[]] .. Keybind.Name .. "]</font> Enable / Disable ESP (" .. (Active and "Enabled" or "Disabled") .. ")"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.Font = Enum.Font.RobotoMono
TextLabel.RichText = true
TextLabel.TextSize = 20
TextLabel.TextStrokeTransparency = 0
TextLabel.TextXAlignment = Enum.TextXAlignment.Left
TextLabel.Parent = ScreenGui

local ValueCache = {
	["6B45"] = 16,
	["AS Val"] = 16,
	["ATC Key"] = 4,
	["Airfield Key"] = 6,
	["Altyn"] = 16,
	["Altyn Visor"] = 8,
	["Attak-5 60L"] = 16,
	["Bolts"] = 1,
	["Crane Key"] = 6,
	["DAGR"] = 8,
	["Duct Tape"] = 1,
	["Fast MT"] = 10,
	["Flare Gun"] = 8,
	["Fueling Station Key"] = 4,
	["Garage Key"] = 4,
	["Hammer"] = 1,
	["JPC"] = 10,
	["Lighthouse Key"] = 6,
	["M4A1"] = 12,
	["Nails"] = 1,
	["Nuts"] = 1,
	["Saiga 12"] = 8,
	["Super Glue"] = 1,
	["Village Key"] = 4,
	["Wrench"] = 1
}

local ValueSettings = {
	[0] = Color3.fromRGB(255, 255, 255),
	[4] = Color3.fromRGB(76, 187, 23),
	[8] = Color3.fromRGB(218, 112, 214),
	[16] = Color3.fromRGB(233, 116, 81),
	[32] = Color3.fromRGB(255, 36, 0)
}

local Camera = Workspace.CurrentCamera
local Containers = Workspace:WaitForChild("Containers")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character

while true do
	if LocalPlayer.Character then
		Character = LocalPlayer.Character; break
	end
	RunService.RenderStepped:Wait()
end

local function Draw(Container)
	local Drawing = Drawing.new("Text")
	Drawing.Center = true
	Drawing.Font = 2
	Drawing.Outline = true
	Drawing.Size = 14

	local Connection;
	Connection = RunService.RenderStepped:Connect(function()
		if not Active then
			Drawing.Visible = false; return
		end

		if not Container.PrimaryPart then
			Drawing.Visible = false; return
		end

		if LocalPlayer.Character ~= Character then
			Character = LocalPlayer.Character; return
		end

		if not Character:FindFirstChild("HumanoidRootPart") then
			Drawing.Visible = false; return
		end

		local Distance = (Container.PrimaryPart.Position - Character.HumanoidRootPart.Position).Magnitude
		if Distance > RenderDistance then
			Drawing.Visible = false; return
		end

		local Position, Visible = Camera:WorldToViewportPoint(Container.PrimaryPart.Position)
		if not Visible then
			Drawing.Visible = false; return
		end

		local Amount;
		local ItemName;
		local NextSpawn = (Container:GetAttribute("NextSpawn") or 0) - os.time()
		local TotalPrice = 0
		local Value = 0

		local Color;
		local Highest = -1
		local Loot = ""

		for _, v in pairs(Container.Inventory:GetChildren()) do
			Amount = v.ItemProperties:GetAttribute("Amount") or 1
			ItemName = v.ItemProperties:GetAttribute("CallSign")
			TotalPrice += v.ItemProperties:GetAttribute("Price") or 0
			Value += (ValueCache[ItemName] or 0) * Amount
			Loot ..= ItemName .. " (x" .. Amount .. ")\n"
		end

		for i, v in pairs(ValueSettings) do
			if Value >= i and i > Highest then
				Color = v
				Highest = i
			end
		end

		Drawing.Color = Color
		Drawing.Position = Vector2.new(Position.X, Position.Y)
		Drawing.Text = "$" .. TotalPrice .. "\n" .. Container:GetAttribute("DisplayName") .. "\n" .. (NextSpawn < 0 and "Not loaded" or Loot .. "Next Spawn: " .. NextSpawn .. "s") .. "\n" .. math.round(Distance)
		Drawing.ZIndex = Value
		Drawing.Visible = true
	end)
end

UserInputService.InputBegan:Connect(function(Input, GameProcessedEvent)
	if Input.KeyCode == Keybind and not GameProcessedEvent then
		Active = not Active
	end

	if Input.KeyCode == Enum.KeyCode.Down or Input.KeyCode == Enum.KeyCode.Up then
		RenderDistance = math.clamp(RenderDistance + (Input.KeyCode == Enum.KeyCode.Down and -100 or 100), 100, 1200)
	end

	TextLabel.Text = "Render Distance: " .. RenderDistance .. [[<br /><font color = "rgb(255, 0, 0)">[↓]</font> Decrease render distance by 100<br /><font color = "rgb(0, 255, 0)">[↑]</font> Increase render distance by 100<br /><font color = "rgb(255, 255, 0)">[]] .. Keybind.Name .. "]</font> Enable / Disable ESP (" .. (Active and "Enabled" or "Disabled") .. ")"
end)

for _, v in pairs(Containers:GetDescendants()) do
	if v:IsA("Model") then
		Draw(v)
	end
end

Containers.ChildAdded:Connect(Draw)
      end})


      worldespsection:addToggle({name = "Exits ESP",
      flag = "Exits ESP",
      callback = function(value)
        tog = value
        function createtext(parent,name)
          local gui = Instance.new("BillboardGui")
          local esp = Instance.new("TextLabel")
          esp.Parent = gui;
      
          gui.Name = tostring(name);
          gui.ResetOnSpawn = false
          gui.AlwaysOnTop = true;
          gui.LightInfluence = 0;
          gui.Size = UDim2.new(1,0.5,1,0.5);
          gui.Parent = parent
          esp.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
          esp.Text = name
          esp.Size = UDim2.new(1,0,0,1.1);
          esp.BorderSizePixel = 0;
          esp.Font = "GothamMedium"
          esp.TextSize = 13
          esp.TextColor3 = Color3.fromRGB(255,0,0) 
      end
      
      for i,v in next,game:GetService("Workspace").NoCollision.ExitLocations:GetChildren() do
          if v:IsA("Part") then
              local Highlight = Instance.new("Highlight")
              Highlight.Parent = v
              Highlight.OutlineColor = Color3.fromRGB(255,255,255)
              Highlight.FillColor = Color3.fromRGB(255,0,0)
              Highlight.Enabled = true
              Highlight.FillTransparency = 0;
              Highlight.OutlineTransparency = 0
      
                  createtext(v,tostring(v))
          end
      end
      function createesp(v)
          local Highlight = Instance.new("Highlight")
              Highlight.Parent = v
              Highlight.OutlineColor = Color3.fromRGB(255,255,255)
              Highlight.FillColor = Color3.fromRGB(255,0,0)
              Highlight.Enabled = true
              Highlight.FillTransparency = 0;
              Highlight.OutlineTransparency = 0
      
                  createtext(v,tostring(v))
      end
      game:GetService("Workspace").NoCollision.ExitLocations.ChildAdded:Connect(function(child)
          createesp(child)
      end)
      end})
      


      worldespsection:addToggle({name = "Vehicles ESP",
      flag = "Vehicle ESP",
      callback = function(value)
        tog = value
        function createtext(parent,name)
          local gui = Instance.new("BillboardGui")
          local esp = Instance.new("TextLabel")
          esp.Parent = gui;
      
          gui.Name = tostring(name);
          gui.ResetOnSpawn = false
          gui.AlwaysOnTop = true;
          gui.LightInfluence = 0;
          gui.Size = UDim2.new(1,0.5,1,0.5);
          gui.Parent = parent
          esp.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
          esp.Text = name
          esp.Size = UDim2.new(1,0,0,1.5);
          esp.BorderSizePixel = 0;
          esp.Font = "GothamMedium"
          esp.TextSize = 13
          esp.TextColor3 = Color3.fromRGB(255,255,255) 
      end
      
      for i,v in next,game:GetService("Workspace").Vehicles:GetChildren() do
          if v:IsA("Model") then
              local Highlight = Instance.new("Highlight")
              Highlight.Parent = v
              Highlight.OutlineColor = Color3.fromRGB(255,255,255)
              Highlight.FillColor = Color3.fromRGB(119,120,255)
              Highlight.Enabled = false
              Highlight.FillTransparency = 0;
              Highlight.OutlineTransparency = 0
      
                  createtext(v,tostring(v))
          end
      end
      function createesp(v)
          local Highlight = Instance.new("Highlight")
              Highlight.Parent = v
              Highlight.OutlineColor = Color3.fromRGB(255,255,255)
              Highlight.FillColor = Color3.fromRGB(119,120,255)
              Highlight.Enabled = false
              Highlight.FillTransparency = 0;
              Highlight.OutlineTransparency = 0
      
                  createtext(v,tostring(v))
      end
      game:GetService("Workspace").Vehicles.ChildAdded:Connect(function(child)
          createesp(child)
      end)
      end})


      worldespsection:addToggle({name = "Always Day",
      flag = "Always Day",
      callback = function(value)
        tog = value
        local Light = game:GetService("Lighting")
      
      function dofullbright()
      Light.Ambient = Color3.new(1, 1, 1)
      Light.ColorShift_Bottom = Color3.new(1, 1, 1)
      Light.ColorShift_Top = Color3.new(1, 1, 1)
      end
      
      dofullbright()
      
      Light.LightingChanged:Connect(dofullbright)
      end})




--gun mods lol




recoilsection:addToggle({
    text = "No Recoil",
    flag = "no recoil",
    callback = function(value)
        
        if value then
            local ammo = game.ReplicatedStorage.AmmoTypes
            for i, v in pairs(ammo:GetChildren()) do
                v:SetAttribute("RecoilStrength", 0)
            end
        end
    end
})


recoilsection:addToggle({
text = "No Spread",
flag = "no spread",
callback = function(value)
    -- If the toggle is true, set RecoilStrength to 0 for all ammo types
    if value then
        local ammo = game.ReplicatedStorage.AmmoTypes
        for i, v in pairs(ammo:GetChildren()) do
            v:SetAttribute("RecoilStrength", 0)
        end
    end
end
})



-- First, set the value outside the table
values.enabled["megaBullets"] = value

-- Then, create the toggle
recoilsection:addToggle({
    text = "No Drop",
    flag = "no drop",
    tog = function(value)
        if values.enabled["megaBullets"] and rp:FindFirstChild("AmmoTypes") then
            for i,v in ipairs(rp.AmmoTypes:GetChildren()) do
                if v then
                    v:SetAttribute("ProjectileDrop", 0)
                    v:SetAttribute("Tracer", true)
                    v:SetAttribute("Drag", 0)
                    v:SetAttribute("MuzzleVelocity", 3000)
                    v:SetAttribute("RecoilStrength", 0)
                    if v:GetAttribute("AccuracyDeviation") then
                        v:SetAttribute("AccuracyDeviation", 0)
                    end
                end
            end
        elseif not values.enabled["megaBullets"] and rp:FindFirstChild("AmmoTypes") then
            for i,v in ipairs(rp.AmmoTypes:GetChildren()) do
                if v then
                    local realAmmo = realAmmoTypes:FindFirstChild(v.Name)
                    if realAmmo then
                        v:SetAttribute("ProjectileDrop", realAmmo:GetAttribute("ProjectileDrop"))
                        v:SetAttribute("Tracer", realAmmo:GetAttribute("Tracer"))
                        v:SetAttribute("Drag", realAmmo:GetAttribute("Drag"))
                        v:SetAttribute("MuzzleVelocity", realAmmo:GetAttribute("MuzzleVelocity"))
                        v:SetAttribute("RecoilStrength", realAmmo:GetAttribute("RecoilStrength"))
                        if v:GetAttribute("AccuracyDeviation") then
                            v:SetAttribute("AccuracyDeviation", realAmmo:GetAttribute("AccuracyDeviation"))
                        end
                    end
                end
            end
        end
    end
})


recoilsection:addToggle({
    text = "No Tracer",
    flag = "No Tracer",
    tog = function(value)
        values.enabled["megaBullets"] = value
		if values.enabled["megaBullets"] and rp:FindFirstChild("AmmoTypes") then
			for i,v in ipairs(rp.AmmoTypes:GetChildren()) do
				if v then
					v:SetAttribute("ProjectileDrop", 0)
					v:SetAttribute("Tracer", false)
					v:SetAttribute("Drag", 0)
					v:SetAttribute("MuzzleVelocity", 3000)
					v:SetAttribute("RecoilStrength", 0)
					if v:GetAttribute("AccuracyDeviation") then
						v:SetAttribute("AccuracyDeviation", 0)
					end
				end
			end
		elseif not values.enabled["megaBullets"] and rp:FindFirstChild("AmmoTypes") then
			for i,v in ipairs(rp.AmmoTypes:GetChildren()) do
                if v then
                    local realAmmo = realAmmoTypes:FindFirstChild(v.Name)
                    if realAmmo then
                        v:SetAttribute("ProjectileDrop", realAmmo:GetAttribute("ProjectileDrop"))
                        v:SetAttribute("Tracer", realAmmo:GetAttribute("Tracer"))
                        v:SetAttribute("Drag", realAmmo:GetAttribute("Drag"))
                        v:SetAttribute("MuzzleVelocity", realAmmo:GetAttribute("MuzzleVelocity"))
                        v:SetAttribute("RecoilStrength", realAmmo:GetAttribute("RecoilStrength"))
                        if v:GetAttribute("AccuracyDeviation") then
                            v:SetAttribute("AccuracyDeviation", realAmmo:GetAttribute("AccuracyDeviation"))
                        end
                    end
                end
            end
		end
	end
})



recoilsection:addToggle({
    text = "Instant Bullet",
    flag = "instant bullet",
    callback = function(value)
    values.enabled["megaBullets"] = value
		if values.enabled["megaBullets"] and rp:FindFirstChild("AmmoTypes") then
			for i,v in ipairs(rp.AmmoTypes:GetChildren()) do
				if v then
					v:SetAttribute("ProjectileDrop", 0)
					v:SetAttribute("Tracer", true)
					v:SetAttribute("Drag", 0)
					v:SetAttribute("MuzzleVelocity", 3000)
					v:SetAttribute("RecoilStrength", 0)
					if v:GetAttribute("AccuracyDeviation") then
						v:SetAttribute("AccuracyDeviation", 0)
					end
				end
			end
		elseif not values.enabled["megaBullets"] and rp:FindFirstChild("AmmoTypes") then
			for i,v in ipairs(rp.AmmoTypes:GetChildren()) do
                if v then
                    local realAmmo = realAmmoTypes:FindFirstChild(v.Name)
                    if realAmmo then
                        v:SetAttribute("ProjectileDrop", realAmmo:GetAttribute("ProjectileDrop"))
                        v:SetAttribute("Tracer", realAmmo:GetAttribute("Tracer"))
                        v:SetAttribute("Drag", realAmmo:GetAttribute("Drag"))
                        v:SetAttribute("MuzzleVelocity", realAmmo:GetAttribute("MuzzleVelocity"))
                        v:SetAttribute("RecoilStrength", realAmmo:GetAttribute("RecoilStrength"))
                        if v:GetAttribute("AccuracyDeviation") then
                            v:SetAttribute("AccuracyDeviation", realAmmo:GetAttribute("AccuracyDeviation"))
                        end
                    end
                end
            end
		end
	end
})


recoilsection:addToggle({
    text = "Rapid Fire",
    flag = "Rapid Fire",
    callback = function(value)
    
        if value then
        local ammo = game.ReplicatedStorage.AmmoTypes
        for i, v in pairs(ammo:GetChildren()) do
            v:SetAttribute("RecoilStrength", 0)
            end
        end
    end
})

recoilsection:addToggle({
text = "Unlock Firemodes",
flag = "Unlock Firemodes"

})



--aimlock shit


legitsection:addToggle({
    name = "Aimbot",
    flag = "Aimbot",
    callback = function(value)
        local dwCamera = workspace.CurrentCamera
        local dwRunService = game:GetService("RunService")
        local dwUIS = game:GetService("UserInputService")
        local dwEntities = game:GetService("Players")
        local dwLocalPlayer = dwEntities.LocalPlayer
        local dwMouse = dwLocalPlayer:GetMouse()
        
        local settings = {
            Aimbot = value,  -- Set Aimbot to the value of the toggle
            Aiming = false,
            Aimbot_AimPart = "Head",
            Aimbot_TeamCheck = false,
            Aimbot_Draw_FOV = false,
            Aimbot_FOV_Radius = 100,
            Aimbot_FOV_Color = Color3.fromRGB(255,255,255)
        }
        
        -- Only create and display the fovcircle if Aimbot is enabled
        local fovcircle
        if settings.Aimbot then
            fovcircle = Drawing.new("Circle")
            fovcircle.Visible = settings.Aimbot_Draw_FOV
            fovcircle.Radius = settings.Aimbot_FOV_Radius
            fovcircle.Color = settings.Aimbot_FOV_Color
            fovcircle.Thickness = 1
            fovcircle.Filled = false
            fovcircle.Transparency = 1
            fovcircle.Position = Vector2.new(dwCamera.ViewportSize.X / 2, dwCamera.ViewportSize.Y / 2)
        end
        
        dwUIS.InputBegan:Connect(function(i)
            if i.UserInputType == Enum.UserInputType.MouseButton2 then
                settings.Aiming = settings.Aimbot  -- Only set Aiming to true if Aimbot is enabled
            end
        end)
        
        dwUIS.InputEnded:Connect(function(i)
            if i.UserInputType == Enum.UserInputType.MouseButton2 then
                settings.Aiming = false
            end
        end)
        
        dwRunService.RenderStepped:Connect(function()
            
            local dist = math.huge
            local closest_char = nil
        
            if settings.Aiming then
        
                for i,v in next, dwEntities:GetChildren() do 
        
                    if v ~= dwLocalPlayer and
                    v.Character and
                    v.Character:FindFirstChild("HumanoidRootPart") and
                    v.Character:FindFirstChild("Humanoid") and
                    v.Character:FindFirstChild("Humanoid").Health > 0 then
        
                        if settings.Aimbot_TeamCheck == true and
                        v.Team ~= dwLocalPlayer.Team or
                        settings.Aimbot_TeamCheck == false then
        
                            local char = v.Character
                            local char_part_pos, is_onscreen = dwCamera:WorldToViewportPoint(char[settings.Aimbot_AimPart].Position)
        
                            if is_onscreen then
        
                                local mag = (Vector2.new(dwMouse.X, dwMouse.Y) - Vector2.new(char_part_pos.X, char_part_pos.Y)).Magnitude
        
                                if mag < dist and mag < settings.Aimbot_FOV_Radius then
        
                                    dist = mag
                                    closest_char = char
        
                                end
                            end
                        end
                    end
                end
        
                if closest_char ~= nil and
                closest_char:FindFirstChild("HumanoidRootPart") and
                closest_char:FindFirstChild("Humanoid") and
                closest_char:FindFirstChild("Humanoid").Health > 0 then
        
                    dwCamera.CFrame = CFrame.new(dwCamera.CFrame.Position, closest_char[settings.Aimbot_AimPart].Position)
                end
            end
        end)
    end
})

legitsection:addToggle({
    name = "Show FOV",
    flag = "Show FOV",
    callback = function(value)
        local dwCamera = workspace.CurrentCamera
        local dwRunService = game:GetService("RunService")
        local dwUIS = game:GetService("UserInputService")
        local dwEntities = game:GetService("Players")
        local dwLocalPlayer = dwEntities.LocalPlayer
        local dwMouse = dwLocalPlayer:GetMouse()
        
        local settings = {
            Aimbot = value,  -- Set Aimbot to the value of the toggle
            Aiming = false,
            Aimbot_AimPart = "Head",
            Aimbot_TeamCheck = false,
            Aimbot_Draw_FOV = true,
            Aimbot_FOV_Radius = 100,
            Aimbot_FOV_Color = Color3.fromRGB(255,255,255)
        }
        
        -- Only create and display the fovcircle if Aimbot is enabled
        local fovcircle
        if settings.Aimbot then
            fovcircle = Drawing.new("Circle")
            fovcircle.Visible = settings.Aimbot_Draw_FOV
            fovcircle.Radius = settings.Aimbot_FOV_Radius
            fovcircle.Color = settings.Aimbot_FOV_Color
            fovcircle.Thickness = 1
            fovcircle.Filled = false
            fovcircle.Transparency = 1
            fovcircle.Position = Vector2.new(dwCamera.ViewportSize.X / 2, dwCamera.ViewportSize.Y / 2)
        end
        
        dwUIS.InputBegan:Connect(function(i)
            if i.UserInputType == Enum.UserInputType.MouseButton2 then
                settings.Aiming = settings.Aimbot  -- Only set Aiming to true if Aimbot is enabled
            end
        end)
        
        dwUIS.InputEnded:Connect(function(i)
            if i.UserInputType == Enum.UserInputType.MouseButton2 then
                settings.Aiming = false
            end
        end)
        
        dwRunService.RenderStepped:Connect(function()
            
            local dist = math.huge
            local closest_char = nil
        
            if settings.Aiming then
        
                for i,v in next, dwEntities:GetChildren() do 
        
                    if v ~= dwLocalPlayer and
                    v.Character and
                    v.Character:FindFirstChild("HumanoidRootPart") and
                    v.Character:FindFirstChild("Humanoid") and
                    v.Character:FindFirstChild("Humanoid").Health > 0 then
        
                        if settings.Aimbot_TeamCheck == true and
                        v.Team ~= dwLocalPlayer.Team or
                        settings.Aimbot_TeamCheck == false then
        
                            local char = v.Character
                            local char_part_pos, is_onscreen = dwCamera:WorldToViewportPoint(char[settings.Aimbot_AimPart].Position)
        
                            if is_onscreen then
        
                                local mag = (Vector2.new(dwMouse.X, dwMouse.Y) - Vector2.new(char_part_pos.X, char_part_pos.Y)).Magnitude
        
                                if mag < dist and mag < settings.Aimbot_FOV_Radius then
        
                                    dist = mag
                                    closest_char = char
        
                                end
                            end
                        end
                    end
                end
        
                if closest_char ~= nil and
                closest_char:FindFirstChild("HumanoidRootPart") and
                closest_char:FindFirstChild("Humanoid") and
                closest_char:FindFirstChild("Humanoid").Health > 0 then
        
                    dwCamera.CFrame = CFrame.new(dwCamera.CFrame.Position, closest_char[settings.Aimbot_AimPart].Position)
                end
            end
        end)
    end
})







local createconfigs = configTab:createGroup('left', 'Create Configs')
local configsettings = configTab:createGroup('left', 'Config Settings')
local uisection = configTab:createGroup('left', 'Settings')
local playerinfosettings = configTab:createGroup('right', 'Enemy')
local selfinfosettings = configTab:createGroup('center', 'Self')

createconfigs:addTextbox({text = "Name",flag = "config_name"})
createconfigs:addButton({text = "Create",callback = library.loadConfig})

configsettings:addConfigbox({flag = 'test',values = {}})
configsettings:addButton({text = "Load",callback = library.loadConfig})
configsettings:addButton({text = "Update",callback = library.saveConfig})
configsettings:addButton({text = "Delete",callback = library.deleteConfig})
configsettings:addButton({text = "Refresh",callback = library.refreshConfigs})

configsettings:addButton({text = "Copy Game Invite"})
configsettings:addButton({text = "Rejoin Server"})
configsettings:addButton({text = "Server Hop"})


uisection:addToggle({
    name = "Watermark",
    flag = "Watermark",
    callback = function(value)
        local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local fps = 0

-- Function to update FPS
local function updateFPS()
    local lastTime = tick()
    RunService.RenderStepped:Connect(function()
        local currentTime = tick()
        fps = math.floor(1 / (currentTime - lastTime))
        lastTime = currentTime
    end)
end

-- Create a ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "IllusionsGui"
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Create a Frame for background
local backgroundFrame = Instance.new("Frame")
backgroundFrame.Name = "BackgroundFrame"
backgroundFrame.Size = UDim2.new(0, 300, 0, 20) -- Adjusted size to fit the text properly
backgroundFrame.Position = UDim2.new(0, 10, 0, 10)
backgroundFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
backgroundFrame.BorderSizePixel = 1
backgroundFrame.BorderColor3 = Color3.fromHex("#c375ae")
backgroundFrame.Parent = screenGui

-- Create a TextLabel
local textLabel = Instance.new("TextLabel")
textLabel.Name = "IllusionsLabel"
textLabel.Size = UDim2.new(1, 0, 1, 0)
textLabel.Position = UDim2.new(0, 0, 0, 0)
textLabel.BackgroundTransparency = 1
textLabel.TextColor3 = Color3.fromHex("#c375ae")
textLabel.Font = Enum.Font.Code -- Use 'Code' font for a similar look
textLabel.TextSize = 10
textLabel.TextXAlignment = Enum.TextXAlignment.Left -- Align text to the left
textLabel.Parent = backgroundFrame

-- Function to update the text
local function updateText()
    textLabel.Text = string.format(" chaos.win | Project Delta | %d fps | %s", fps, player.Name)
end

-- Update the text periodically
RunService.RenderStepped:Connect(updateText)

-- Start the FPS update function
updateFPS()

    end})



local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local ScreenGui = Instance.new("ScreenGui")
local InfoLabel = Instance.new("TextLabel")
local StatusLabel = Instance.new("TextLabel")  -- New label for visibility status
local DistanceLabel = Instance.new("TextLabel")  -- New label for distance

ScreenGui.Parent = game.CoreGui

InfoLabel.Name = "InfoLabel"
InfoLabel.Parent = ScreenGui
InfoLabel.BackgroundColor3 = Color3.new(0, 0, 0)
InfoLabel.BackgroundTransparency = 1
InfoLabel.BorderSizePixel = 0
InfoLabel.Position = UDim2.new(0.5, -100, 0.5, 20)
InfoLabel.Size = UDim2.new(0, 200, 0, 25)
InfoLabel.Font = Enum.Font.SourceSans
InfoLabel.TextSize = 14
InfoLabel.TextColor3 = Color3.new(1, 1, 1)
InfoLabel.Visible = false

StatusLabel.Name = "StatusLabel"
StatusLabel.Parent = ScreenGui
StatusLabel.BackgroundColor3 = Color3.new(0, 0, 0)
StatusLabel.BackgroundTransparency = 1
StatusLabel.BorderSizePixel = 0
StatusLabel.Position = UDim2.new(0.5, -100, 0.5, 46)  -- Position below the InfoLabel
StatusLabel.Size = UDim2.new(0, 200, 0, 25)
StatusLabel.Font = Enum.Font.SourceSans
StatusLabel.TextSize = 14
StatusLabel.Visible = false

DistanceLabel.Name = "DistanceLabel"
DistanceLabel.Parent = ScreenGui
DistanceLabel.BackgroundColor3 = Color3.new(0, 0, 0)
DistanceLabel.BackgroundTransparency = 1
DistanceLabel.BorderSizePixel = 0
DistanceLabel.Position = UDim2.new(0.5, -100, 0.5, 50)  -- Position below the StatusLabel
DistanceLabel.Size = UDim2.new(0, 200, 0, 25)
DistanceLabel.Font = Enum.Font.SourceSans
DistanceLabel.TextSize = 14
DistanceLabel.Visible = false

local function isVisible(player)
    local character = player.Character
    if not character or not character:FindFirstChild("Head") then
        return false
    end

    local origin = Camera.CFrame.Position
    local target = character.Head.Position
    local direction = (target - origin).unit
    local distance = (target - origin).magnitude
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character, character}
    raycastParams.IgnoreWater = true

    local raycastResult = workspace:Raycast(origin, direction * distance, raycastParams)

    if raycastResult then
        return raycastResult.Instance:IsDescendantOf(character)
    else
        return true
    end
end

local function updatePlayerInfo()
    local closestPlayer = nil
    local closestDistance = math.huge
    local mouseLocation = Camera:WorldToViewportPoint(LocalPlayer:GetMouse().Hit.Position)
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local head = player.Character.Head
            local screenPosition, onScreen = Camera:WorldToViewportPoint(head.Position)
            local distance = (Vector2.new(screenPosition.X, screenPosition.Y) - Vector2.new(mouseLocation.X, mouseLocation.Y)).magnitude
            
            if onScreen and distance < closestDistance then
                closestDistance = distance
                closestPlayer = player
            end
        end
    end

    if closestPlayer then
        local character = closestPlayer.Character
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        local health = humanoid and humanoid.Health or 0
        local visible = isVisible(closestPlayer)
        local distance = (character.Head.Position - Camera.CFrame.Position).magnitude
        
        InfoLabel.Text = string.format("%s\nHealth: %.0f\nDistance: %.1f meters", closestPlayer.Name, health, distance)
        InfoLabel.Visible = true
        
        StatusLabel.Text = visible and "Visible" or "Invisible"
        StatusLabel.TextColor3 = visible and Color3.new(0, 1, 0) or Color3.new(1, 0, 0)
        StatusLabel.Visible = true
        
        DistanceLabel.Visible = false
    else
        InfoLabel.Visible = false
        StatusLabel.Visible = false
        DistanceLabel.Visible = false
    end
end

local updateConnection

extrasection:addToggle({
    name = "Crosshair info",
    flag = "Crosshair Info",
    callback = function(value)
        if value then
            updateConnection = RunService.RenderStepped:Connect(updatePlayerInfo)
        else
            if updateConnection then
                updateConnection:Disconnect()
            end
            InfoLabel.Visible = false
            StatusLabel.Visible = false
            DistanceLabel.Visible = false
        end
    end
})

-- Assuming you have the ExtraSection module loaded and initialized

local crosshairEnabled = false
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer.PlayerGui

local crosshairSize = 50
local crosshairColor = Color3.fromRGB(34, 0, 204)  -- Color adjusted to (34, 0, 204)

-- Create the horizontal crosshair frame
local crosshair = Instance.new("Frame")
crosshair.Size = UDim2.new(0, 2, 0, crosshairSize)
crosshair.BorderSizePixel = 0
crosshair.BackgroundColor3 = crosshairColor
crosshair.AnchorPoint = Vector2.new(0.5, 0.5)
crosshair.Position = UDim2.new(0.5, 0, 0.5, 0)
crosshair.Visible = false  -- Initially hidden
crosshair.Parent = screenGui

-- Create the vertical crosshair frame
local crosshairVertical = Instance.new("Frame")
crosshairVertical.Size = UDim2.new(0, crosshairSize, 0, 2)
crosshairVertical.BorderSizePixel = 0
crosshairVertical.BackgroundColor3 = crosshairColor
crosshairVertical.AnchorPoint = Vector2.new(0.5, 0.5)
crosshairVertical.Position = UDim2.new(0.5, 0, 0.5, 0)
crosshairVertical.Visible = false  -- Initially hidden
crosshairVertical.Parent = screenGui

-- Create the text label for "Illusions.cc"
local illusionsLabel = Instance.new("TextLabel")
illusionsLabel.Size = UDim2.new(0, 100, 0, 20)
illusionsLabel.Position = UDim2.new(0.5, 10, 0.5, 0)  -- Position to the right of the crosshair
illusionsLabel.AnchorPoint = Vector2.new(0, 0.5)
illusionsLabel.Text = "chaos.win"
illusionsLabel.TextColor3 = crosshairColor  -- Same color as the crosshair
illusionsLabel.TextSize = 14
illusionsLabel.Font = Enum.Font.SourceSansBold
illusionsLabel.BackgroundTransparency = 1  -- Make background transparent
illusionsLabel.Visible = false  -- Initially hidden
illusionsLabel.Parent = screenGui

-- Function to toggle crosshair and label visibility
local function toggleCrosshair1(enabled)
    crosshair.Visible = enabled
    crosshairVertical.Visible = enabled
    illusionsLabel.Visible = enabled
    crosshairEnabled = enabled
end

-- Register the toggle in ExtraSection
extrasection:addToggle({
    name = "Crosshair Center",
    flag = "Crosshair Center",
    callback = function(enabled)
        toggleCrosshair1(enabled)
    end
})

-- Rotation and animation code
local rotationSpeed = 13
local minSize = 25

-- Adjust these values
local xOffset = 0 -- Change this value to move the crosshair left or right
local yOffset = -27 -- Change this value to move the crosshair up or down

while true do
    if crosshairEnabled then
        local scaleFactor = math.max(minSize / crosshairSize, 1)
        
        crosshair.Size = UDim2.new(0, 2, 0, crosshairSize * scaleFactor)
        crosshairVertical.Size = UDim2.new(0, crosshairSize * scaleFactor, 0, 2)
        
        -- Set the anchor point of the crosshair to its center
        crosshair.AnchorPoint = Vector2.new(0.5, 0.5)
        crosshairVertical.AnchorPoint = Vector2.new(0.5, 0.5)
        
        -- Set the position of the crosshair to the center of the screen
        crosshair.Position = UDim2.new(0.5, xOffset, 0.5, yOffset)
        crosshairVertical.Position = UDim2.new(0.5, xOffset, 0.5, yOffset)
        
        crosshair.Rotation = crosshair.Rotation + rotationSpeed
        crosshairVertical.Rotation = crosshairVertical.Rotation + rotationSpeed
    end
    wait(0.01)
end




local RunService = game:GetService("RunService")
local CurrentCamera = workspace.CurrentCamera

local crosshairEnabled = false
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer.PlayerGui

local crosshairSize = 50
local crosshairColor = Color3.fromRGB(34, 0, 204)  -- Color adjusted to (34, 0, 204)

-- Create the horizontal crosshair frame
local crosshair = Instance.new("Frame")
crosshair.Size = UDim2.new(0, 2, 0, crosshairSize)
crosshair.BorderSizePixel = 0
crosshair.BackgroundColor3 = crosshairColor
crosshair.AnchorPoint = Vector2.new(0.5, 0.5)
crosshair.Position = UDim2.new(0.5, 0, 0.5, 0)
crosshair.Visible = false  -- Initially hidden
crosshair.Parent = screenGui

-- Create the vertical crosshair frame
local crosshairVertical = Instance.new("Frame")
crosshairVertical.Size = UDim2.new(0, crosshairSize, 0, 2)
crosshairVertical.BorderSizePixel = 0
crosshairVertical.BackgroundColor3 = crosshairColor
crosshairVertical.AnchorPoint = Vector2.new(0.5, 0.5)
crosshairVertical.Position = UDim2.new(0.5, 0, 0.5, 0)
crosshairVertical.Visible = false  -- Initially hidden
crosshairVertical.Parent = screenGui

-- Create the text label for "Illusions.cc"
local illusionsLabel = Instance.new("TextLabel")
illusionsLabel.Size = UDim2.new(0, 100, 0, 20)
illusionsLabel.Position = UDim2.new(0.5, 10, 0.5, 0)  -- Position to the right of the crosshair
illusionsLabel.AnchorPoint = Vector2.new(0, 0.5)
illusionsLabel.Text = "chaos.win"
illusionsLabel.TextColor3 = crosshairColor  -- Same color as the crosshair
illusionsLabel.TextSize = 14
illusionsLabel.Font = Enum.Font.SourceSansBold
illusionsLabel.BackgroundTransparency = 1  -- Make background transparent
illusionsLabel.Visible = false  -- Initially hidden
illusionsLabel.Parent = screenGui

-- Function to toggle crosshair and label visibility
local function toggleCrosshair2(enabled)
    if crosshair then
        crosshair.Visible = enabled
    end

    if crosshairVertical then
        crosshairVertical.Visible = enabled
    end

    if illusionsLabel then
        illusionsLabel.Visible = enabled
    end

    crosshairEnabled = enabled
end

-- Register the toggle in ExtraSection
extrasection:addToggle({
    name = "Crosshair Aimpoint",
    flag = "Crosshair Aimpoint",
    callback = function(enabled)
        toggleCrosshair2(enabled)
    end
})

local rotationSpeed = 13
local minSize = 25

while true do
    if crosshairEnabled then
        local scaleFactor = math.max(minSize / crosshairSize, 1)
        
        crosshair.Size = UDim2.new(0, 2, 0, crosshairSize * scaleFactor)
        crosshairVertical.Size = UDim2.new(0, crosshairSize * scaleFactor, 0, 2)
        
        -- Set the anchor point of the crosshair to its center
        crosshair.AnchorPoint = Vector2.new(0.5, 0.5)
        crosshairVertical.AnchorPoint = Vector2.new(0.5, 0.5)
        
        -- Get the ViewModel and AimPart
        local ViewModel = CurrentCamera:FindFirstChild("ViewModel")
        if ViewModel then
            local AimPart = ViewModel:FindFirstChild("AimPart")
            if AimPart then
                -- Calculate the position of the gun barrel in screen coordinates
                local _, Hit = workspace:FindPartOnRayWithIgnoreList(Ray.new(AimPart.Position, AimPart.CFrame.LookVector * -100), {})
                local Ray = CurrentCamera:WorldToViewportPoint(Hit)
                local Position = Vector2.new(Ray.X, Ray.Y)
                
                -- Set the position of the crosshair to the position of the gun barrel
                crosshair.Position = UDim2.new(0, Position.X, 0, Position.Y)
                crosshairVertical.Position = UDim2.new(0, Position.X, 0, Position.Y)
            end
        end
        
        crosshair.Rotation = crosshair.Rotation + rotationSpeed
        crosshairVertical.Rotation = crosshairVertical.Rotation + rotationSpeed
    end
    wait(0.01)
end
